[{"/Users/simeonikudabo/Downloads/geocities/src/index.js":"1","/Users/simeonikudabo/Downloads/geocities/src/serviceWorkerRegistration.js":"2","/Users/simeonikudabo/Downloads/geocities/src/store/store.js":"3","/Users/simeonikudabo/Downloads/geocities/src/App.js":"4","/Users/simeonikudabo/Downloads/geocities/src/reportWebVitals.js":"5","/Users/simeonikudabo/Downloads/geocities/src/reducers/counterReducer.js":"6","/Users/simeonikudabo/Downloads/geocities/src/reducers/themeReducer.js":"7","/Users/simeonikudabo/Downloads/geocities/src/reducers/userThemeReducer.js":"8","/Users/simeonikudabo/Downloads/geocities/src/reducers/userReducer.js":"9","/Users/simeonikudabo/Downloads/geocities/src/reducers/userPostsReducer.js":"10","/Users/simeonikudabo/Downloads/geocities/src/reducers/userModeReducer.js":"11","/Users/simeonikudabo/Downloads/geocities/src/reducers/visitorPostsReducer.js":"12","/Users/simeonikudabo/Downloads/geocities/src/components/TopBar.js":"13","/Users/simeonikudabo/Downloads/geocities/src/components/Login.js":"14","/Users/simeonikudabo/Downloads/geocities/src/components/GeoCitiesSearch.js":"15","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUser.js":"16","/Users/simeonikudabo/Downloads/geocities/src/components/Followers.js":"17","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserFollowing.js":"18","/Users/simeonikudabo/Downloads/geocities/src/components/ProfilePage.js":"19","/Users/simeonikudabo/Downloads/geocities/src/components/Following.js":"20","/Users/simeonikudabo/Downloads/geocities/src/components/Signup.js":"21","/Users/simeonikudabo/Downloads/geocities/src/components/GeouserFollowers.js":"22","/Users/simeonikudabo/Downloads/geocities/src/components/BuildCommunity.js":"23","/Users/simeonikudabo/Downloads/geocities/src/components/NotificationsComponent.js":"24","/Users/simeonikudabo/Downloads/geocities/src/components/Community.js":"25","/Users/simeonikudabo/Downloads/geocities/src/components/CommunityPostsCard.js":"26","/Users/simeonikudabo/Downloads/geocities/src/components/NonUserPostsCard.js":"27","/Users/simeonikudabo/Downloads/geocities/src/components/UserPostsCard.js":"28","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserPostsCard.js":"29","/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js":"30"},{"size":1121,"mtime":1610736022000,"results":"31","hashOfConfig":"32"},{"size":5064,"mtime":1610736022000,"results":"33","hashOfConfig":"32"},{"size":1149,"mtime":1610736022000,"results":"34","hashOfConfig":"32"},{"size":3296,"mtime":1615086738059,"results":"35","hashOfConfig":"32"},{"size":364,"mtime":1610736022000,"results":"36","hashOfConfig":"32"},{"size":461,"mtime":1610736022000,"results":"37","hashOfConfig":"32"},{"size":652,"mtime":1610736022000,"results":"38","hashOfConfig":"32"},{"size":338,"mtime":1610736022000,"results":"39","hashOfConfig":"32"},{"size":583,"mtime":1610736022000,"results":"40","hashOfConfig":"32"},{"size":329,"mtime":1610736022000,"results":"41","hashOfConfig":"32"},{"size":320,"mtime":1610736022000,"results":"42","hashOfConfig":"32"},{"size":337,"mtime":1610736022000,"results":"43","hashOfConfig":"32"},{"size":11756,"mtime":1615084111511,"results":"44","hashOfConfig":"32"},{"size":18770,"mtime":1615084066039,"results":"45","hashOfConfig":"32"},{"size":10960,"mtime":1615083987880,"results":"46","hashOfConfig":"32"},{"size":91587,"mtime":1615083998778,"results":"47","hashOfConfig":"32"},{"size":4678,"mtime":1615083916006,"results":"48","hashOfConfig":"32"},{"size":5597,"mtime":1615084015153,"results":"49","hashOfConfig":"32"},{"size":60793,"mtime":1615084095081,"results":"50","hashOfConfig":"32"},{"size":4684,"mtime":1615083937745,"results":"51","hashOfConfig":"32"},{"size":103010,"mtime":1615084104323,"results":"52","hashOfConfig":"32"},{"size":5601,"mtime":1615084007533,"results":"53","hashOfConfig":"32"},{"size":24074,"mtime":1615083879251,"results":"54","hashOfConfig":"32"},{"size":36755,"mtime":1615084084896,"results":"55","hashOfConfig":"32"},{"size":59561,"mtime":1615086882215,"results":"56","hashOfConfig":"32"},{"size":34189,"mtime":1615083908225,"results":"57","hashOfConfig":"32"},{"size":15538,"mtime":1615084073450,"results":"58","hashOfConfig":"32"},{"size":33697,"mtime":1615084121072,"results":"59","hashOfConfig":"32"},{"size":27201,"mtime":1615084031805,"results":"60","hashOfConfig":"32"},{"size":6031,"mtime":1615105158373,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qdsj1d",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/simeonikudabo/Downloads/geocities/src/index.js",[],"/Users/simeonikudabo/Downloads/geocities/src/serviceWorkerRegistration.js",[],"/Users/simeonikudabo/Downloads/geocities/src/store/store.js",[],"/Users/simeonikudabo/Downloads/geocities/src/App.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reportWebVitals.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/counterReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/themeReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userThemeReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userPostsReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userModeReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/visitorPostsReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/TopBar.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/Login.js",["124"],"/Users/simeonikudabo/Downloads/geocities/src/components/GeoCitiesSearch.js",["125","126","127","128","129","130","131","132"],"/Users/simeonikudabo/Downloads/geocities/src/components/GeoUser.js",["133","134","135","136","137","138","139","140","141","142","143"],"/Users/simeonikudabo/Downloads/geocities/src/components/Followers.js",["144"],"/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserFollowing.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/ProfilePage.js",["145","146","147","148","149","150","151"],"/Users/simeonikudabo/Downloads/geocities/src/components/Following.js",["152"],"/Users/simeonikudabo/Downloads/geocities/src/components/Signup.js",["153","154","155","156","157"],"/Users/simeonikudabo/Downloads/geocities/src/components/GeouserFollowers.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/BuildCommunity.js",["158"],"/Users/simeonikudabo/Downloads/geocities/src/components/NotificationsComponent.js",["159"],"/Users/simeonikudabo/Downloads/geocities/src/components/Community.js",["160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],"import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Hidden from '@material-ui/core/Hidden';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom'; \nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiClose, mdiCamera, mdiVideo } from '@mdi/js';\nimport PropTypes from 'prop-types';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport CommunityPostsCard from './CommunityPostsCard';\nimport Resizer from 'react-image-file-resizer';\nimport TextField from '@material-ui/core/TextField';\n\nfunction TabPanel(props) {\n    //This component will serve as the panel for each individual tab.\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div \n            role='tabpanel'\n            hidden={index !== value} \n            id={`tabpanel-${index}`}\n            aria-label={`tab-${index}`}\n            aria-labelledby={`tab-${index}`}\n            {...other}\n            style={{\n                marginTop: 100,\n            }}\n        >\n            {value === index &&\n                <Grid \n                    item \n                    xs\n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    {children}\n                </Grid>\n            }\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    index: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    };\n}\n\n\nfunction Community(props) {\n    const [community, setCommunity] = useState(null); //This variable and setter will manipulate community.\n    const useStyles = makeStyles(() => ({\n        root: {\n            marginTop: 100,\n        },\n        centerContent: {\n            margin: 'auto',\n            textAlign: 'center',\n        },\n        nameGrid: {\n            margin: 'auto',\n            textAlign: 'center',\n            marginTop: 20,\n        },\n        avatarLg: {\n            height: 168,\n            width: 168,\n            margin: 'auto',\n        },\n        avatarSm: {\n            height: 128,\n            width: 128,\n            margin: 'auto',\n        },\n        paper: {\n            backgroundColor: community !== null ? community.communityTheme : 'rgb(0, 20, 60)',\n        },\n        closeIcon: {\n            color: 'rgb(255, 255, 255)',\n        },\n        input: {\n            display: 'none',\n        },\n    }));\n    const classes = useStyles(); //Custom styles for the component. \n    const history = useHistory(); //Window history API.\n    const params = useParams(); //Access url parameters. \n    const textFormRef = useRef(null); //Ref for validator form when we upload posts.\n    const linkFormRef = useRef(null);\n    const [joinSending, setJoinSending] = useState(false); //Will disable the button while we send a join or request join to the server.\n    const [postDialog, setPostDialog] = useState(false); //Will open and close the dialog to make a post.\n    const [curTab, setTab] = useState(0); //Sets the current tab in post upload dialog. \n    const [curTab2, setTab2] = useState(0); //For the second tab that displays posts, about (and settings if the user is not null and the uniqueUserId matches the mainUser, for moderation)\n    const [textPost, setTextPost] = useState(''); //Value for text post. \n    const [textPostTitle, setTextPostTitle] = useState(''); //Value for title.\n    const [photoPost, setPhotoPost] = useState(null); //Value for photo upload. \n    const [photoPostTitle, setPhotoPostTitle] = useState(''); //Value for photo post title. \n    const [videoPost, setVideoPost] = useState(null); //Value for video post. \n    const [videoPostTitle, setVideoPostTitle] = useState(''); //Video post title. \n    const [linkPost, setLinkPost] = useState(''); //Value for the link in a link post. \n    const [linkPostTitle, setLinkPostTitle] = useState(''); //Value for link post title. \n    const [posting, setPosting] = useState(false); //Will handle disabling buttons and bars when a post is being sent to the server.\n    const [uploadPhoto, setUploadPhoto] = useState(null); //Will control any photo post photo that we upload to the server. \n    const [photoCaption, setPhotoCaption] = useState('');//Variable and setter for a caption for a photo upload. \n    const [photoUploading, setPhotoUploading] = useState(false); //Used to alter functionality when the photo post is being uploaded to the server. \n    const [uploadVideo, setUploadVideo] = useState(null); //Variable and setter for a video to be uploaded \n    const [videoUploading, setVideoUploading] = useState(null); //Variable and setter to disable button while video is uploading. \n    const [videoCaption, setVideoCaption] = useState(null); //Variable and setter for the caption for a video post. \n    const [postLink, setPostLink] = useState(''); //This variable will store the link post link. \n    const regularExpressions = {\n        urlRegex: /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\n    }; //This will store the regular expressions to make sure link posts have valid url's. \n\n\n    useEffect(() => {\n        //Add validation rules \n        ValidatorForm.addValidationRule('titleLength', v => {\n            if(v.length > 75) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Rule for text or caption to be 3,000 characters or less. \n        ValidatorForm.addValidationRule('textLength', v => {\n            if(v.length > 3000) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule to ensure textPost and linkPost are not empty. \n        ValidatorForm.addValidationRule('requiredText', v => {\n            if(v.trim() === '') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule will ensure links are valid \n        ValidatorForm.addValidationRule('validLink', v => {\n            if(!regularExpressions.urlRegex.test(v)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //First we need to fetch the community with axios. \n        if(true) {\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/fetch/community/${params.communityName}`,\n            }).then(response => {\n                if(response.data.community) {\n                    setCommunity(response.data.community);\n                    props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Update the theme to match the community theme.\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts}); //Update the posts to match what a visitor viewing these posts will see.\n                    //Now determine if the mainUser is in the blockList, and re-route to the previous page if they are. \n                    if(props.mainUser !== null) {\n                        if(_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n                            swal(\n                                'Uh Oh!',\n                                'You are blocked from this community!',\n                                'error',\n                            );\n                            history.goBack(1);\n                        }\n                    }\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find that community!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error finding that community! Please try again.',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    }, []);\n\n    function publicJoin() {\n        //Function that will enable a member to join a public community. \n        let data = JSON.stringify({\n            username: props.mainUser.username,\n            uniqueUserId: props.mainUser.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/public/join/community',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.result === 'success') {\n                swal(\n                    'Great!',\n                    'Successfully joined community!',\n                    'success',\n                );\n                setJoinSending(false);\n                setCommunity(response.data.community);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error with joining this community! Please try again',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error joining this community! Please try again',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    function privateJoinRequest() {\n        //This function will handle sending a join notification to the moderator. \n        setJoinSending(true);\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            username: props.mainUser.username,\n            moderatorUniqueUserId: community.moderator.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/community/join/request',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data === 'duplicate') {\n                swal(\n                    'Uh Oh!',\n                    'You have already sent a request to join this community!',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Community join request sent!',\n                    'success',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error sending a request to join this community! Please try again.',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    async function sendTextPost() {\n        //Function that will handle uploading a text post to the server. \n        setPosting(true); \n        let isValid = textFormRef.current.isFormValid();\n        if(!isValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure the form is filled out properly',\n                'error',\n            );\n            setPosting(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = JSON.stringify({\n                text: textPost,\n                title: textPostTitle,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                community: community.name,\n                type: 'text',\n                dateString: dateString,\n                uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\n                context: 'community',\n                privacy: community.communityPrivacy,\n                link: postLink ? postLink : '',\n                textType: 'link',\n            });\n\n            return axios({\n                method: 'post',\n                url: 'http://192.168.0.17:3001/api/add/community/text/post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                if(response.data.result === 'success') {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded text post!',\n                        'success',\n                    );\n                    setTextPost('');\n                    setTextPostTitle('');\n                    setPosting(false);\n                    setPostDialog(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error sending that text post!',\n                        'error',\n                    );\n                    setPosting(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that text post! Please try again.',\n                    'error',\n                );\n                setPosting(false);\n            });\n        }\n    }\n\n    function sendLinkPost() {\n        //This function will handle sending a post with a link URL to the server.\n        setPosting(true); \n        let isValid = linkFormRef.current.isFormValid();\n\n        if(!regularExpressions.urlRegex.test(postLink)) {\n            swal(\n                'Uh Oh!',\n                'You must enter a valid URL to create a link post',\n                'error',\n            ); \n            setPosting(false);\n            return false;\n        }\n\n        else if(textPostTitle === '') {\n            swal(\n                'Uh Oh!',\n                'You must enter a title for all link posts.',\n                'error',\n            );\n            setPosting(false);\n            return false;\n        }\n\n        else if(!isValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure the form is filled out properly',\n                'error',\n            );\n            setPosting(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = JSON.stringify({\n                text: '',\n                title: textPostTitle,\n                link: postLink,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                community: community.name,\n                type: 'link',\n                dateString: dateString,\n                uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\n                context: 'community',\n                privacy: community.communityPrivacy,\n            });\n\n            return axios({\n                method: 'post',\n                url: 'http://192.168.0.17:3001/api/add/community/text/post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                if(response.data.result === 'success') {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded link post!',\n                        'success',\n                    );\n                    setTextPost('');\n                    setTextPostTitle('');\n                    setPosting(false);\n                    setPostDialog(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error sending that link post!',\n                        'error',\n                    );\n                    setPosting(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that link post! Please try again.',\n                    'error',\n                );\n                setPosting(false);\n            });\n        }\n    }\n\n    function resizerFunction(file) {\n        //This is a wrapper for the file resizer \n        return new Promise(resolve => {\n            Resizer.imageFileResizer(\n                file,\n                600,\n                600,\n                'JPEG',\n                100,\n                0,\n                uri => {\n                    resolve(uri);\n                },\n                'blob',\n            );\n        });\n    }\n\n    async function handlePhotoChange(e) {\n        //This function will handle passing a photo that is uploaded to the resizer function to rersize the photo\n        let file = e.target.files[0];\n        let resizedPhoto = await resizerFunction(file);\n        setUploadPhoto(resizedPhoto);\n    }\n\n    function handlePhotoUpload() {\n        //Function that will handle sending an uploaded photo to the server after resizing it.\n        //Might need to make some edits here since the photo will be community-based\n        setPhotoUploading(true);\n\n        if(!uploadPhoto) {\n            swal(\n                'Uh Oh!',\n                'You must select a photo to upload!',\n                'error',\n            );\n            setPhotoUploading(false);\n        }\n        else {\n            let data = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[data.getMonth()];\n            let day = data.getDate();\n            let year = data.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let fd = new FormData();\n            fd.append('photo', uploadPhoto, 'photo.jpg');\n            fd.append('caption', photoCaption);\n            fd.append('uniqueUserId', props.mainUser.uniqueUserId);\n            fd.append('uniquePostId', Date.now() + props.mainUser.username + 'photoupload' + props.mainUser.uniqueUserId);\n            fd.append('username', props.mainUser.username);\n            fd.append('dateString', dateString);\n            fd.append('type', 'photo');\n            fd.append('context', 'community');\n            fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.mainUser.username}photoupload${props.mainUser.uniqueUserId}`);\n            fd.append('community', community.name); //Name of the community that this post belongs to. \n            fd.append('title', '');\n            fd.append('privacy', community.communityPrivacy);\n            fd.append('text', '');\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/upload/photo',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded photo!',\n                        'success',\n                    );\n                    setPhotoCaption('');\n                    setUploadPhoto(null);\n                    setPostDialog(false);\n                    setPhotoUploading(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that photo!',\n                        'error',\n                    );\n                    setPhotoUploading(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that photo!',\n                    'error',\n                );\n                setPhotoUploading(false);\n            });\n        }\n    }\n\n    function handleVideoChange(e) {\n        //This function will handle setting the uploadVideo variable to the valua of the file. \n        setUploadVideo(e.target.files[0]);\n    }\n\n    function handleVideoUpload() {\n        //Function that will handle sending an uploaded video to the server.\n        setVideoUploading(true);\n\n        if(!uploadVideo) {\n            swal(\n                'Uh Oh!',\n                'You must select a video to upload!',\n                'error',\n            );\n            setVideoUploading(false);\n        }\n        else {\n            let data = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[data.getMonth()];\n            let day = data.getDate();\n            let year = data.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let ext = uploadVideo.name.split('.').pop().toString(); //This will get the extension name of the video \n            ext = 'video.' + ext;\n            let fd = new FormData();\n            fd.append('photo', uploadVideo, ext); //Keep the name \"photo\" for the server upload although it is technically a video!\n            fd.append('caption', videoCaption);\n            fd.append('uniqueUserId', props.mainUser.uniqueUserId);\n            fd.append('uniquePostId', Date.now() + props.mainUser.username + 'videoupload' + props.mainUser.uniqueUserId);\n            fd.append('username', props.mainUser.username);\n            fd.append('dateString', dateString);\n            fd.append('type', 'video');\n            fd.append('context', 'community');\n            fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.mainUser.username}videoupload${props.mainUser.uniqueUserId}`);\n            fd.append('community', community.name);\n            fd.append('communityPost', true);\n            fd.append('title', '');\n            fd.append('privacy', community.communityPrivacy);\n            fd.append('text', '');\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/upload/photo',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded video!',\n                        'success',\n                    );\n                    setVideoCaption('');\n                    setUploadVideo(null);\n                    setPostDialog(false);\n                    setVideoUploading(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that video!',\n                        'error',\n                    );\n                    setVideoUploading(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that video!',\n                    'error',\n                );\n                setVideoUploading(false);\n            });\n        }\n    }\n\n    function leaveCommunity() {\n        //This function will remove a member from a community if they are within it. \n        setJoinSending(true);\n        let data = JSON.stringify({\n            username: props.mainUser.username,\n            uniqueUserId: props.mainUser.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/leave/community',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.result === 'success') {\n                swal(\n                    'Great!',\n                    'You have successfully left this community',\n                    'success',\n                );\n                setCommunity(response.data.community);\n                setJoinSending(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error leaving this community! Please try again.',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error leaving this community! Please try again.',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    if(community !== null) {\n        return (\n            <Grid \n                className={classes.root} \n                container \n            >\n                <Grid \n                    item \n                    xs={12} \n                    className={classes.centerContent} \n                >\n                    <Hidden \n                        smDown \n                    >\n                        <Avatar \n                            className={classes.avatarLg} \n                            src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                            alt={`${community.name} avatar`}\n                            title={`${community.name} avatar`}\n                            variant='square'\n                        />\n                    </Hidden>\n                    <Hidden \n                        mdUp \n                    >\n                        <Avatar \n                            src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                            className={classes.avatarSm} \n                            title={`${community.name} avatar`}\n                            alt={`${community.name} avatar`}\n                            variant='square'\n                        />\n                    </Hidden>\n                </Grid>\n                {/* The grid below will store the name of the community */}\n                <Grid \n                    item \n                    xs={12} \n                    className={classes.nameGrid} \n                >\n                    <Typography \n                        variant='h6' \n                        component='h6' \n                        align='center' \n                    >\n                        {community.name}\n                    </Typography>\n                </Grid>\n                {/* End of the grid to display the community name */}\n                {/* Below is the Grid to display the title of the community */}\n                <Grid \n                    item \n                    xs={12}\n                    className={classes.nameGrid} \n                >\n                    <Typography \n                        variant='body1' \n                        component='p'\n                        justify='left' \n                    >\n                        {community.title}\n                    </Typography>\n                </Grid>\n                {/* End of the Grid to display the title of the community */}\n                {/* Now create a button for the user if they are logged in, not a member, and the community is public */}\n                <Grid \n                    item \n                    xs={12}\n                    style={{\n                        margin: 'auto',\n                        textAlign: 'center',\n                        marginTop: 20,\n                    }}\n                >\n                    {/* Button if the user is logged in, not a member, and the community is public */}\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'public' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId) &&\n                        <Button \n                            color='primary' \n                            variant='contained' \n                            onClick={publicJoin}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\n                        </Button>\n                    }\n                    {/* Below is the Button if the user is logged in, not a member, and the community is private */}\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserid) &&\n                        <Button \n                            color='primary' \n                            variant='contained' \n                            onClick={privateJoinRequest}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\n                        </Button>\n                    }\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.moderator.uniqueUserId !==  props.mainUser.uniqueUserId) &&\n                        <Button \n                            color='primary'\n                            variant='outlined' \n                            onClick={leaveCommunity}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'leave'}\n                        </Button>\n                    }\n                    {/* Below, we will add a button to route someone who is not signed up or logged in to the sign up page */}\n                    {props.mainUser === null &&\n                        <Button \n                            color='primary' \n                            onClick={e => history.push('/')}\n                        >\n                            Sign up or log in!\n                        </Button>\n                    }\n                    {(props.mainUser === null && community.communityPrivacy === 'private') &&\n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                This community is private\n                            </Typography>\n                        </Grid>\n                    }\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private') && \n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                This community is private\n                            </Typography>\n                        </Grid>\n                    }\n                    {/*Now I will have two buttons in two grids for members of the community to either chat or post content to the community */}\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\n                        <div>\n                            <Grid \n                                item \n                                xs={12} \n                                style={{\n                                    marginTop: 20,\n                                    marginBottom: 20,\n                                }}\n                            >\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    style={{\n                                        margin: 'auto',\n                                    }}\n                                    onClick={e => history.push(`/community/chat/${community.name}`)}\n                                >\n                                    Chat \n                                </Button>\n                            </Grid>\n                            <Grid \n                                item \n                                xs={12} \n                            >\n                                <Button \n                                    color='primary' \n                                    variant='outlined' \n                                    onClick={e => setPostDialog(true)}\n                                >\n                                    Post \n                                </Button>\n                            </Grid>\n                        </div>\n                    }\n                    {/* This is the end of the two Grids for a the chat Button and the Post button */}\n                    {/*Below create the Dialog that will open when the user tries to make a post. Only show when a user is part of the community */}\n                </Grid>\n                {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <Dialog \n                            open={postDialog} \n                            fullScreen\n                        >\n                            <DialogContent>\n                                <AppBar \n                                    color='primary'\n                                    hidden={posting}\n                                >\n                                    <Icon \n                                        path={mdiClose} \n                                        size={1} \n                                        title='Dialog close' \n                                        style={{\n                                            cursor: 'pointer'\n                                        }}\n                                        onClick={() => setPostDialog(false)}\n                                    />\n                                    <Tabs \n                                        value={curTab}\n                                        onChange={(e, newVal) => setTab(newVal)} \n                                        centered\n                                    >\n                                        <Tab \n                                            {...a11yProps(0)} \n                                            label='Text' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(1)} \n                                            label='Photo' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(2)}\n                                            label='Video' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(3)}\n                                            label='Link'\n                                            disabled={posting} \n                                        />\n                                    </Tabs>\n                                </AppBar>\n                                <TabPanel \n                                    index={0}\n                                    value={curTab}\n                                >\n                                    <ValidatorForm\n                                        ref={textFormRef} \n                                        onSubmit={e => e.preventDefault()}\n                                    >\n                                        <Typography \n                                            variant='body1' \n                                            component='small' \n                                            color={textPostTitle.length > 75 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPostTitle.length}/75\n                                        </Typography>\n                                        <TextValidator \n                                            label='Post title'\n                                            placeholder='Enter a title for your post of 75 characters or less'\n                                            value={textPostTitle}\n                                            onChange={e => setTextPostTitle(e.target.value)}\n                                            helperText='Enter a title for this text post'\n                                            validators={['titleLength']}\n                                            errorMessages={['Title can only be up to 75 characters']}\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary'\n                                            variant='outlined'\n                                            fullWidth\n                                        />\n                                        <Typography \n                                            style={{\n                                                marginTop: 30,\n                                            }}\n                                            variant='body1' \n                                            component='small'\n                                            color={textPost.length > 3000 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPost.length}/3000\n                                        </Typography>\n                                        <TextValidator \n                                            label='Text post'\n                                            placeholder='Share a text post!'\n                                            value={textPost}\n                                            onChange={e => setTextPost(e.target.value)}\n                                            helperText='Enter a text post of up to 3,000 characters long!'\n                                            validators={['requiredText', 'textLength']}\n                                            errorMessages={['Must enter some text!', 'Text post cannot be more than 3,000 characters long!']}\n                                            variant='outlined' \n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary' \n                                            variant='outlined' \n                                            rows={3}\n                                            multiline \n                                            required \n                                            fullWidth \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            onClick={sendTextPost}\n                                            disabled={posting}\n                                        >\n                                            {posting ? <CircularProgress color='primary' /> : 'Upload'}\n                                        </Button>\n                                    </ValidatorForm>\n                                </TabPanel>\n                                <TabPanel \n                                    index={1} \n                                    value={curTab} \n                                >\n                                    <Typography \n                                        variant='h6' \n                                        component='h6' \n                                    >\n                                        Post a photo\n                                    </Typography>\n                                    <label \n                                        html-for='photoPost' \n                                    >\n                                        <input \n                                            className={classes.input}\n                                            type='file'\n                                            accept='image/jpg, image/jpeg, image/png' \n                                            id='photoPost'\n                                            name='photoPost' \n                                            onChange={handlePhotoChange} \n                                            required \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            component='span' \n                                            aria-label='Photo picker button'\n                                        >\n                                            <Icon \n                                                path={mdiCamera} \n                                                size={1} \n                                                title='Photo upload icon' \n                                                aria-label='Photo upload icon' \n                                            />\n                                        </Button>\n                                    </label>\n                                    <br/>\n                                    <TextField \n                                        label='Caption'\n                                        placeholder='Enter a caption for your photo' \n                                        variant='outlined' \n                                        color='primary' \n                                        value={photoCaption} \n                                        onChange={e => setPhotoCaption(e.target.value)} \n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        rows={4}\n                                        multiline\n                                        required\n                                        style={{\n                                            marginTop: 40,\n                                        }}\n                                        fullWidth\n                                    />\n                                    <br/>\n                                    <Button \n                                        style={{\n                                            marginTop: 30,\n                                        }}\n                                        color='primary' \n                                        variant='outlined' \n                                        onClick={handlePhotoUpload}\n                                        disabled={photoUploading}\n                                    >\n                                        {photoUploading ? <CircularProgress color='primary' /> : 'Upload Photo'}\n                                    </Button>\n                                </TabPanel>\n                                <TabPanel \n                                    index={2} \n                                    value={curTab} \n                                >\n                                    <Typography \n                                        variant='h6' \n                                        component='h6' \n                                    >\n                                        Post a video\n                                    </Typography>\n                                    <label \n                                        html-for='videoPost' \n                                    >\n                                        <input \n                                            className={classes.input}\n                                            type='file'\n                                            accept='video/mp4, video/mov'\n                                            id='videoPost'\n                                            name='videoPost' \n                                            onChange={handleVideoChange} \n                                            required \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            component='span' \n                                            aria-label='Video picker button'\n                                        >\n                                            <Icon \n                                                path={mdiVideo} \n                                                size={1} \n                                                title='Video upload icon' \n                                                aria-label='Video upload icon' \n                                            />\n                                        </Button>\n                                    </label>\n                                    <br/>\n                                    <TextField \n                                        label='Caption'\n                                        placeholder='Enter a caption for your video' \n                                        variant='outlined' \n                                        color='primary' \n                                        value={videoCaption} \n                                        onChange={e => setVideoCaption(e.target.value)} \n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        rows={4}\n                                        multiline\n                                        required\n                                        style={{\n                                            marginTop: 40,\n                                        }}\n                                        fullWidth\n                                    />\n                                    <br/>\n                                    <Button \n                                        style={{\n                                            marginTop: 30,\n                                        }}\n                                        color='primary' \n                                        variant='outlined' \n                                        onClick={handleVideoUpload}\n                                        disabled={videoUploading}\n                                    >\n                                        {videoUploading ? <CircularProgress color='primary' /> : 'Upload Video'}\n                                    </Button>\n                                </TabPanel>\n                                <TabPanel \n                                    index={3}\n                                    value={curTab}\n                                >\n                                    <ValidatorForm\n                                        ref={linkFormRef} \n                                        onSubmit={e => e.preventDefault()}\n                                    >\n                                        <Typography \n                                            variant='body1' \n                                            component='small' \n                                            color={textPostTitle.length > 75 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPostTitle.length}/75\n                                        </Typography>\n                                        <TextValidator \n                                            label='Post title'\n                                            placeholder='Enter a title for your post of 75 characters or less'\n                                            value={textPostTitle}\n                                            onChange={e => setTextPostTitle(e.target.value)}\n                                            helperText='Enter a title for this text post'\n                                            validators={['requiredText', 'titleLength']}\n                                            errorMessages={['Must enter a title for all link posts', 'Title can only be up to 75 characters']}\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary'\n                                            variant='outlined'\n                                            fullWidth\n                                        />\n                                        <br></br>\n                                        <TextValidator \n                                            label='Link'\n                                            placeholder='Share a valid link!'\n                                            value={postLink}\n                                            onChange={e => setPostLink(e.target.value)}\n                                            helperText='Enter a valid url link.'\n                                            validators={['requiredText', 'validLink']}\n                                            errorMessages={['Must enter a link!', 'The link that you enter must be formatted properly!']}\n                                            variant='outlined' \n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary' \n                                            variant='outlined'\n                                            required \n                                            fullWidth \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            onClick={sendLinkPost}\n                                            disabled={posting}\n                                        >\n                                            {posting ? <CircularProgress color='primary' /> : 'Upload'}\n                                        </Button>\n                                    </ValidatorForm>\n                                </TabPanel>\n                            </DialogContent>\n                        </Dialog>\n                    </Grid>\n                }\n                {/*End of the Grid for the dialog box for posts if the user is logged in and a member of the community */}\n                {/* Below add the tabpanel for posts, about, and settings (only render settings if moderator is visiting page) */}\n                {(community.communityPrivacy === 'public' || (props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId))) &&\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <Paper \n                            className={classes.paper}\n                            style={{\n                                marginTop: 10,\n                            }}\n                        >\n                            <Tabs \n                                value={curTab2} \n                                onChange={(e, newVal) => setTab2(newVal)}\n                                centered\n                                style={{\n                                    color: 'rgb(255, 255, 255)',\n                                }}\n                            >\n                                <Tab \n                                    label='Posts' \n                                    {...a11yProps(0)} \n                                />\n                                <Tab \n                                    label='About' \n                                    {...a11yProps(1)} \n                                />\n                                {(props.mainUser !== null && community.moderator.uniqueUserId === props.mainUser.uniqueUserId) &&\n                                    <Tab \n                                        label='Settings' \n                                        {...a11yProps(2)} \n                                    />\n                                }\n                            </Tabs>\n                        </Paper>\n                        {/* Now begin the tab for posts. Have the CommunityPostsCard ONLY for users who are logged in */}\n                        <TabPanel \n                            value={0} \n                            index={curTab2} \n                        >\n                            {props.posts.length < 1 && \n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                    align='center' \n                                >\n                                    No posts \n                                </Typography>\n                            }\n                            {props.posts.length > 0 && \n                                <div>\n                                    {props.posts.map((post, index) => (\n                                        <div \n                                            style={{\n                                                textAlign: 'left',\n                                            }}\n                                            key={index}\n                                        >\n                                            {props.mainUser !== null &&       \n                                                <CommunityPostsCard\n                                                    post={post}\n                                                    id={post.uniquePostId}\n                                                    moderator={props.mainUser.uniqueUserId === community.moderator.uniqueUserId}\n                                                />\n                                            }\n                                            {index < props.posts.length - 1 &&\n                                                <div \n                                                    style={{\n                                                        marginBottom: 20,\n                                                    }}\n                                                />\n                                            }\n                                        </div>\n                                    ))}\n                                </div>\n                            }\n                        </TabPanel>\n                    </Grid>\n                }\n                {/* End of the Grid for the main sections of the community page */}\n            </Grid>\n        );\n    }\n    else {\n        //If the community is null, simply return a Backdrop with a CircularProgress inside \n        return (\n            <Backdrop \n                open={true} \n            >\n                <CircularProgress \n                    color='primary' \n                />\n            </Backdrop>\n        );\n    }  \n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n        posts: state.visitorPostsReducer.posts,\n    };\n}\n\nexport default connect(mapStateToProps)(Community);",["182","183"],"/Users/simeonikudabo/Downloads/geocities/src/components/CommunityPostsCard.js",["184"],"/Users/simeonikudabo/Downloads/geocities/src/components/NonUserPostsCard.js",["185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"/Users/simeonikudabo/Downloads/geocities/src/components/UserPostsCard.js",["200","201"],"/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserPostsCard.js",["202","203","204"],"/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js",["205","206","207","208","209","210","211","212","213","214","215","216","217"],{"ruleId":"218","severity":1,"message":"219","line":99,"column":8,"nodeType":"220","endLine":99,"endColumn":10,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":4,"column":8,"nodeType":"224","messageId":"225","endLine":4,"endColumn":12},{"ruleId":"222","severity":1,"message":"226","line":5,"column":10,"nodeType":"224","messageId":"225","endLine":5,"endColumn":20},{"ruleId":"222","severity":1,"message":"227","line":7,"column":8,"nodeType":"224","messageId":"225","endLine":7,"endColumn":22},{"ruleId":"222","severity":1,"message":"228","line":26,"column":7,"nodeType":"224","messageId":"225","endLine":26,"endColumn":29},{"ruleId":"222","severity":1,"message":"229","line":48,"column":12,"nodeType":"224","messageId":"225","endLine":48,"endColumn":15},{"ruleId":"222","severity":1,"message":"230","line":48,"column":17,"nodeType":"224","messageId":"225","endLine":48,"endColumn":23},{"ruleId":"222","severity":1,"message":"231","line":49,"column":11,"nodeType":"224","messageId":"225","endLine":49,"endColumn":18},{"ruleId":"218","severity":1,"message":"232","line":86,"column":8,"nodeType":"220","endLine":86,"endColumn":10,"suggestions":"233"},{"ruleId":"222","severity":1,"message":"234","line":1,"column":38,"nodeType":"224","messageId":"225","endLine":1,"endColumn":53},{"ruleId":"222","severity":1,"message":"235","line":1,"column":55,"nodeType":"224","messageId":"225","endLine":1,"endColumn":61},{"ruleId":"222","severity":1,"message":"236","line":9,"column":8,"nodeType":"224","messageId":"225","endLine":9,"endColumn":14},{"ruleId":"222","severity":1,"message":"237","line":10,"column":8,"nodeType":"224","messageId":"225","endLine":10,"endColumn":21},{"ruleId":"222","severity":1,"message":"238","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":14},{"ruleId":"222","severity":1,"message":"239","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":15},{"ruleId":"222","severity":1,"message":"240","line":20,"column":24,"nodeType":"224","messageId":"225","endLine":20,"endColumn":33},{"ruleId":"222","severity":1,"message":"241","line":20,"column":35,"nodeType":"224","messageId":"225","endLine":20,"endColumn":43},{"ruleId":"222","severity":1,"message":"242","line":20,"column":45,"nodeType":"224","messageId":"225","endLine":20,"endColumn":54},{"ruleId":"222","severity":1,"message":"243","line":20,"column":56,"nodeType":"224","messageId":"225","endLine":20,"endColumn":64},{"ruleId":"218","severity":1,"message":"244","line":197,"column":8,"nodeType":"220","endLine":197,"endColumn":10,"suggestions":"245"},{"ruleId":"218","severity":1,"message":"232","line":46,"column":8,"nodeType":"220","endLine":46,"endColumn":10,"suggestions":"246"},{"ruleId":"222","severity":1,"message":"235","line":1,"column":38,"nodeType":"224","messageId":"225","endLine":1,"endColumn":44},{"ruleId":"222","severity":1,"message":"247","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":11},{"ruleId":"222","severity":1,"message":"248","line":123,"column":12,"nodeType":"224","messageId":"225","endLine":123,"endColumn":17},{"ruleId":"222","severity":1,"message":"249","line":123,"column":19,"nodeType":"224","messageId":"225","endLine":123,"endColumn":27},{"ruleId":"222","severity":1,"message":"250","line":130,"column":18,"nodeType":"224","messageId":"225","endLine":130,"endColumn":25},{"ruleId":"218","severity":1,"message":"232","line":169,"column":8,"nodeType":"220","endLine":169,"endColumn":10,"suggestions":"251"},{"ruleId":"218","severity":1,"message":"252","line":176,"column":8,"nodeType":"220","endLine":176,"endColumn":14,"suggestions":"253"},{"ruleId":"218","severity":1,"message":"232","line":46,"column":8,"nodeType":"220","endLine":46,"endColumn":10,"suggestions":"254"},{"ruleId":"255","severity":1,"message":"256","line":110,"column":32,"nodeType":"257","messageId":"258","endLine":110,"endColumn":33,"suggestions":"259"},{"ruleId":"255","severity":1,"message":"260","line":110,"column":34,"nodeType":"257","messageId":"258","endLine":110,"endColumn":35,"suggestions":"261"},{"ruleId":"255","severity":1,"message":"262","line":110,"column":39,"nodeType":"257","messageId":"258","endLine":110,"endColumn":40,"suggestions":"263"},{"ruleId":"255","severity":1,"message":"260","line":110,"column":53,"nodeType":"257","messageId":"258","endLine":110,"endColumn":54,"suggestions":"264"},{"ruleId":"218","severity":1,"message":"265","line":218,"column":8,"nodeType":"220","endLine":218,"endColumn":10,"suggestions":"266"},{"ruleId":"218","severity":1,"message":"267","line":156,"column":8,"nodeType":"220","endLine":156,"endColumn":10,"suggestions":"268"},{"ruleId":"218","severity":1,"message":"232","line":60,"column":8,"nodeType":"220","endLine":60,"endColumn":10,"suggestions":"269"},{"ruleId":"222","severity":1,"message":"270","line":10,"column":8,"nodeType":"224","messageId":"225","endLine":10,"endColumn":12},{"ruleId":"222","severity":1,"message":"271","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":16},{"ruleId":"222","severity":1,"message":"272","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":15},{"ruleId":"222","severity":1,"message":"239","line":19,"column":8,"nodeType":"224","messageId":"225","endLine":19,"endColumn":15},{"ruleId":"222","severity":1,"message":"273","line":25,"column":8,"nodeType":"224","messageId":"225","endLine":25,"endColumn":18},{"ruleId":"222","severity":1,"message":"274","line":125,"column":12,"nodeType":"224","messageId":"225","endLine":125,"endColumn":21},{"ruleId":"222","severity":1,"message":"275","line":125,"column":23,"nodeType":"224","messageId":"225","endLine":125,"endColumn":35},{"ruleId":"222","severity":1,"message":"276","line":126,"column":12,"nodeType":"224","messageId":"225","endLine":126,"endColumn":26},{"ruleId":"222","severity":1,"message":"277","line":126,"column":28,"nodeType":"224","messageId":"225","endLine":126,"endColumn":45},{"ruleId":"222","severity":1,"message":"278","line":127,"column":12,"nodeType":"224","messageId":"225","endLine":127,"endColumn":21},{"ruleId":"222","severity":1,"message":"279","line":127,"column":23,"nodeType":"224","messageId":"225","endLine":127,"endColumn":35},{"ruleId":"222","severity":1,"message":"280","line":128,"column":12,"nodeType":"224","messageId":"225","endLine":128,"endColumn":26},{"ruleId":"222","severity":1,"message":"281","line":128,"column":28,"nodeType":"224","messageId":"225","endLine":128,"endColumn":45},{"ruleId":"222","severity":1,"message":"282","line":129,"column":12,"nodeType":"224","messageId":"225","endLine":129,"endColumn":20},{"ruleId":"222","severity":1,"message":"283","line":129,"column":22,"nodeType":"224","messageId":"225","endLine":129,"endColumn":33},{"ruleId":"222","severity":1,"message":"284","line":130,"column":12,"nodeType":"224","messageId":"225","endLine":130,"endColumn":25},{"ruleId":"222","severity":1,"message":"285","line":130,"column":27,"nodeType":"224","messageId":"225","endLine":130,"endColumn":43},{"ruleId":"218","severity":1,"message":"286","line":225,"column":8,"nodeType":"220","endLine":225,"endColumn":10,"suggestions":"287"},{"ruleId":"288","severity":1,"message":"289","line":344,"column":81,"nodeType":"290","messageId":"291","endLine":344,"endColumn":82},{"ruleId":"288","severity":1,"message":"289","line":441,"column":81,"nodeType":"290","messageId":"291","endLine":441,"endColumn":82},{"ruleId":"292","severity":1,"message":"293","line":999,"column":45,"nodeType":"294","endLine":999,"endColumn":63},{"ruleId":"292","severity":1,"message":"293","line":1196,"column":45,"nodeType":"294","endLine":1196,"endColumn":63},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","replacedBy":"298"},{"ruleId":"222","severity":1,"message":"270","line":22,"column":8,"nodeType":"224","messageId":"225","endLine":22,"endColumn":12},{"ruleId":"222","severity":1,"message":"235","line":1,"column":27,"nodeType":"224","messageId":"225","endLine":1,"endColumn":33},{"ruleId":"222","severity":1,"message":"299","line":1,"column":35,"nodeType":"224","messageId":"225","endLine":1,"endColumn":44},{"ruleId":"222","severity":1,"message":"300","line":10,"column":10,"nodeType":"224","messageId":"225","endLine":10,"endColumn":23},{"ruleId":"222","severity":1,"message":"301","line":10,"column":25,"nodeType":"224","messageId":"225","endLine":10,"endColumn":38},{"ruleId":"222","severity":1,"message":"302","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":14},{"ruleId":"222","severity":1,"message":"303","line":14,"column":8,"nodeType":"224","messageId":"225","endLine":14,"endColumn":24},{"ruleId":"222","severity":1,"message":"304","line":16,"column":10,"nodeType":"224","messageId":"225","endLine":16,"endColumn":20},{"ruleId":"222","severity":1,"message":"305","line":16,"column":41,"nodeType":"224","messageId":"225","endLine":16,"endColumn":51},{"ruleId":"222","severity":1,"message":"306","line":16,"column":102,"nodeType":"224","messageId":"225","endLine":16,"endColumn":111},{"ruleId":"222","severity":1,"message":"307","line":16,"column":113,"nodeType":"224","messageId":"225","endLine":16,"endColumn":120},{"ruleId":"222","severity":1,"message":"308","line":18,"column":8,"nodeType":"224","messageId":"225","endLine":18,"endColumn":13},{"ruleId":"222","severity":1,"message":"309","line":19,"column":13,"nodeType":"224","messageId":"225","endLine":19,"endColumn":14},{"ruleId":"222","severity":1,"message":"310","line":20,"column":10,"nodeType":"224","messageId":"225","endLine":20,"endColumn":17},{"ruleId":"222","severity":1,"message":"311","line":21,"column":8,"nodeType":"224","messageId":"225","endLine":21,"endColumn":12},{"ruleId":"222","severity":1,"message":"270","line":22,"column":8,"nodeType":"224","messageId":"225","endLine":22,"endColumn":12},{"ruleId":"222","severity":1,"message":"270","line":22,"column":8,"nodeType":"224","messageId":"225","endLine":22,"endColumn":12},{"ruleId":"222","severity":1,"message":"312","line":466,"column":14,"nodeType":"224","messageId":"225","endLine":466,"endColumn":23},{"ruleId":"222","severity":1,"message":"270","line":22,"column":8,"nodeType":"224","messageId":"225","endLine":22,"endColumn":12},{"ruleId":"222","severity":1,"message":"313","line":58,"column":12,"nodeType":"224","messageId":"225","endLine":58,"endColumn":24},{"ruleId":"222","severity":1,"message":"314","line":58,"column":26,"nodeType":"224","messageId":"225","endLine":58,"endColumn":41},{"ruleId":"222","severity":1,"message":"235","line":1,"column":38,"nodeType":"224","messageId":"225","endLine":1,"endColumn":44},{"ruleId":"222","severity":1,"message":"315","line":4,"column":8,"nodeType":"224","messageId":"225","endLine":4,"endColumn":13},{"ruleId":"222","severity":1,"message":"270","line":8,"column":8,"nodeType":"224","messageId":"225","endLine":8,"endColumn":12},{"ruleId":"222","severity":1,"message":"271","line":9,"column":8,"nodeType":"224","messageId":"225","endLine":9,"endColumn":16},{"ruleId":"222","severity":1,"message":"316","line":10,"column":8,"nodeType":"224","messageId":"225","endLine":10,"endColumn":22},{"ruleId":"222","severity":1,"message":"317","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":20},{"ruleId":"222","severity":1,"message":"272","line":13,"column":8,"nodeType":"224","messageId":"225","endLine":13,"endColumn":15},{"ruleId":"222","severity":1,"message":"318","line":14,"column":8,"nodeType":"224","messageId":"225","endLine":14,"endColumn":17},{"ruleId":"222","severity":1,"message":"302","line":15,"column":8,"nodeType":"224","messageId":"225","endLine":15,"endColumn":14},{"ruleId":"222","severity":1,"message":"319","line":38,"column":11,"nodeType":"224","messageId":"225","endLine":38,"endColumn":17},{"ruleId":"222","severity":1,"message":"320","line":39,"column":12,"nodeType":"224","messageId":"225","endLine":39,"endColumn":15},{"ruleId":"222","severity":1,"message":"321","line":39,"column":17,"nodeType":"224","messageId":"225","endLine":39,"endColumn":23},{"ruleId":"218","severity":1,"message":"322","line":104,"column":8,"nodeType":"220","endLine":104,"endColumn":10,"suggestions":"323"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'props', 'regularExpressions.alphaStartRe', and 'regularExpressions.usernameExpression'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["324"],"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'mdiAccount' is defined but never used.","'InputAdornment' is defined but never used.","'communityFilterOptions' is assigned a value but never used.","'val' is assigned a value but never used.","'setVal' is assigned a value but never used.","'myUsers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["325"],"'useLayoutEffect' is defined but never used.","'useRef' is defined but never used.","'Dialog' is defined but never used.","'DialogContent' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'mdiPencil' is defined but never used.","'mdiClose' is defined but never used.","'mdiCamera' is defined but never used.","'mdiVideo' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'params.uniqueUserId', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["326"],["327"],"'Box' is defined but never used.","'posts' is assigned a value but never used.","'setPosts' is assigned a value but never used.","'setUser' is assigned a value but never used.",["328"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["329"],["330"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["331","332"],"Unnecessary escape character: \\-.",["333","334"],"Unnecessary escape character: \\@.",["335","336"],["337","338"],"React Hook useEffect has missing dependencies: 'history', 'props', 'regularExpressions.alphaStartRe', 'regularExpressions.emailRe', and 'regularExpressions.usernameExpression'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["339"],"React Hook useEffect has missing dependencies: 'history', 'props', 'regularExpressions.alphaStartRe', and 'regularExpressions.nameExpression'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["340"],["341"],"'List' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","'IconButton' is defined but never used.","'photoPost' is assigned a value but never used.","'setPhotoPost' is assigned a value but never used.","'photoPostTitle' is assigned a value but never used.","'setPhotoPostTitle' is assigned a value but never used.","'videoPost' is assigned a value but never used.","'setVideoPost' is assigned a value but never used.","'videoPostTitle' is assigned a value but never used.","'setVideoPostTitle' is assigned a value but never used.","'linkPost' is assigned a value but never used.","'setLinkPost' is assigned a value but never used.","'linkPostTitle' is assigned a value but never used.","'setLinkPostTitle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'params.communityName', 'props', and 'regularExpressions.urlRegex'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["342"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["343"],"no-negated-in-lhs",["344"],"'useEffect' is defined but never used.","'ValidatorForm' is defined but never used.","'TextValidator' is defined but never used.","'Button' is defined but never used.","'CircularProgress' is defined but never used.","'mdiThumbUp' is defined but never used.","'mdiComment' is defined but never used.","'mdiDelete' is defined but never used.","'mdiSend' is defined but never used.","'axios' is defined but never used.","'_' is defined but never used.","'connect' is defined but never used.","'swal' is defined but never used.","'linkClick' is defined but never used.","'deletingPost' is assigned a value but never used.","'setDeletingPost' is assigned a value but never used.","'Paper' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'TextField' is defined but never used.","'socket' is assigned a value but never used.","'msg' is assigned a value but never used.","'setMsg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'params.communityName', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["345"],{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"348","fix":"352"},{"desc":"348","fix":"353"},{"desc":"354","fix":"355"},{"desc":"348","fix":"356"},{"messageId":"357","fix":"358","desc":"359"},{"messageId":"360","fix":"361","desc":"362"},{"messageId":"357","fix":"363","desc":"359"},{"messageId":"360","fix":"364","desc":"362"},{"messageId":"357","fix":"365","desc":"359"},{"messageId":"360","fix":"366","desc":"362"},{"messageId":"357","fix":"367","desc":"359"},{"messageId":"360","fix":"368","desc":"362"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"348","fix":"373"},{"desc":"374","fix":"375"},"no-global-assign","no-unsafe-negation",{"desc":"376","fix":"377"},"Update the dependencies array to be: [history, props, regularExpressions.alphaStartRe, regularExpressions.usernameExpression]",{"range":"378","text":"379"},"Update the dependencies array to be: [history, props]",{"range":"380","text":"381"},"Update the dependencies array to be: [history, params.uniqueUserId, props]",{"range":"382","text":"383"},{"range":"384","text":"381"},{"range":"385","text":"381"},"Update the dependencies array to be: [history, user]",{"range":"386","text":"387"},{"range":"388","text":"381"},"removeEscape",{"range":"389","text":"390"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"391","text":"392"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"393","text":"390"},{"range":"394","text":"392"},{"range":"395","text":"390"},{"range":"396","text":"392"},{"range":"397","text":"390"},{"range":"398","text":"392"},"Update the dependencies array to be: [history, props, regularExpressions.alphaStartRe, regularExpressions.emailRe, regularExpressions.usernameExpression]",{"range":"399","text":"400"},"Update the dependencies array to be: [history, props, regularExpressions.alphaStartRe, regularExpressions.nameExpression]",{"range":"401","text":"402"},{"range":"403","text":"381"},"Update the dependencies array to be: [history, params.communityName, props, regularExpressions.urlRegex]",{"range":"404","text":"405"},"Update the dependencies array to be: [history, params.communityName, props]",{"range":"406","text":"407"},[3321,3323],"[history, props, regularExpressions.alphaStartRe, regularExpressions.usernameExpression]",[3083,3085],"[history, props]",[7633,7635],"[history, params.uniqueUserId, props]",[1427,1429],[6721,6723],[6891,6897],"[history, user]",[1434,1436],[58217,58218],"",[58217,58217],"\\",[58219,58220],[58219,58219],[58224,58225],[58224,58224],[58238,58239],[58238,58238],[62148,62150],"[history, props, regularExpressions.alphaStartRe, regularExpressions.emailRe, regularExpressions.usernameExpression]",[6819,6821],"[history, props, regularExpressions.alphaStartRe, regularExpressions.nameExpression]",[2161,2163],[9641,9643],"[history, params.communityName, props, regularExpressions.urlRegex]",[4346,4348],"[history, params.communityName, props]"]