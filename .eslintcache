[{"/Users/simeonikudabo/Downloads/geocities/src/index.js":"1","/Users/simeonikudabo/Downloads/geocities/src/serviceWorkerRegistration.js":"2","/Users/simeonikudabo/Downloads/geocities/src/store/store.js":"3","/Users/simeonikudabo/Downloads/geocities/src/App.js":"4","/Users/simeonikudabo/Downloads/geocities/src/reportWebVitals.js":"5","/Users/simeonikudabo/Downloads/geocities/src/reducers/counterReducer.js":"6","/Users/simeonikudabo/Downloads/geocities/src/reducers/themeReducer.js":"7","/Users/simeonikudabo/Downloads/geocities/src/reducers/userThemeReducer.js":"8","/Users/simeonikudabo/Downloads/geocities/src/reducers/userReducer.js":"9","/Users/simeonikudabo/Downloads/geocities/src/reducers/userPostsReducer.js":"10","/Users/simeonikudabo/Downloads/geocities/src/reducers/userModeReducer.js":"11","/Users/simeonikudabo/Downloads/geocities/src/reducers/visitorPostsReducer.js":"12","/Users/simeonikudabo/Downloads/geocities/src/components/TopBar.js":"13","/Users/simeonikudabo/Downloads/geocities/src/components/Login.js":"14","/Users/simeonikudabo/Downloads/geocities/src/components/GeoCitiesSearch.js":"15","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUser.js":"16","/Users/simeonikudabo/Downloads/geocities/src/components/Followers.js":"17","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserFollowing.js":"18","/Users/simeonikudabo/Downloads/geocities/src/components/ProfilePage.js":"19","/Users/simeonikudabo/Downloads/geocities/src/components/Following.js":"20","/Users/simeonikudabo/Downloads/geocities/src/components/Signup.js":"21","/Users/simeonikudabo/Downloads/geocities/src/components/GeouserFollowers.js":"22","/Users/simeonikudabo/Downloads/geocities/src/components/BuildCommunity.js":"23","/Users/simeonikudabo/Downloads/geocities/src/components/NotificationsComponent.js":"24","/Users/simeonikudabo/Downloads/geocities/src/components/Community.js":"25","/Users/simeonikudabo/Downloads/geocities/src/components/CommunityPostsCard.js":"26","/Users/simeonikudabo/Downloads/geocities/src/components/NonUserPostsCard.js":"27","/Users/simeonikudabo/Downloads/geocities/src/components/UserPostsCard.js":"28","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserPostsCard.js":"29","/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js":"30","/Users/simeonikudabo/Downloads/geocities/src/components/NonUserCommunityPostsCard.js":"31","/Users/simeonikudabo/Downloads/geocities/src/components/TabsExample.js":"32","/Users/simeonikudabo/Downloads/geocities/src/components/UserSettings.js":"33"},{"size":1121,"mtime":1610736022000,"results":"34","hashOfConfig":"35"},{"size":5064,"mtime":1610736022000,"results":"36","hashOfConfig":"35"},{"size":1149,"mtime":1610736022000,"results":"37","hashOfConfig":"35"},{"size":3467,"mtime":1615436983920,"results":"38","hashOfConfig":"35"},{"size":364,"mtime":1610736022000,"results":"39","hashOfConfig":"35"},{"size":461,"mtime":1610736022000,"results":"40","hashOfConfig":"35"},{"size":652,"mtime":1610736022000,"results":"41","hashOfConfig":"35"},{"size":338,"mtime":1610736022000,"results":"42","hashOfConfig":"35"},{"size":583,"mtime":1610736022000,"results":"43","hashOfConfig":"35"},{"size":329,"mtime":1610736022000,"results":"44","hashOfConfig":"35"},{"size":320,"mtime":1610736022000,"results":"45","hashOfConfig":"35"},{"size":337,"mtime":1610736022000,"results":"46","hashOfConfig":"35"},{"size":13026,"mtime":1615450361204,"results":"47","hashOfConfig":"35"},{"size":18770,"mtime":1615429515003,"results":"48","hashOfConfig":"35"},{"size":10960,"mtime":1615429429535,"results":"49","hashOfConfig":"35"},{"size":91587,"mtime":1615429471291,"results":"50","hashOfConfig":"35"},{"size":4678,"mtime":1615429414123,"results":"51","hashOfConfig":"35"},{"size":5597,"mtime":1615429497622,"results":"52","hashOfConfig":"35"},{"size":60793,"mtime":1615429623881,"results":"53","hashOfConfig":"35"},{"size":4684,"mtime":1615429421477,"results":"54","hashOfConfig":"35"},{"size":103010,"mtime":1615432280969,"results":"55","hashOfConfig":"35"},{"size":5601,"mtime":1615429490017,"results":"56","hashOfConfig":"35"},{"size":24074,"mtime":1615429339906,"results":"57","hashOfConfig":"35"},{"size":38865,"mtime":1615429616685,"results":"58","hashOfConfig":"35"},{"size":115063,"mtime":1615429370664,"results":"59","hashOfConfig":"35"},{"size":34211,"mtime":1615429403713,"results":"60","hashOfConfig":"35"},{"size":15529,"mtime":1615429606915,"results":"61","hashOfConfig":"35"},{"size":33697,"mtime":1615429672208,"results":"62","hashOfConfig":"35"},{"size":27201,"mtime":1615429504928,"results":"63","hashOfConfig":"35"},{"size":18673,"mtime":1615429379669,"results":"64","hashOfConfig":"35"},{"size":18076,"mtime":1615429525277,"results":"65","hashOfConfig":"35"},{"size":3293,"mtime":1610736022000,"results":"66","hashOfConfig":"35"},{"size":38157,"mtime":1615516403553,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1qdsj1d",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/simeonikudabo/Downloads/geocities/src/index.js",[],["153","154"],"/Users/simeonikudabo/Downloads/geocities/src/serviceWorkerRegistration.js",[],"/Users/simeonikudabo/Downloads/geocities/src/store/store.js",[],"/Users/simeonikudabo/Downloads/geocities/src/App.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reportWebVitals.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/counterReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/themeReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userThemeReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userPostsReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/userModeReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/reducers/visitorPostsReducer.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/TopBar.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/Login.js",["155"],"import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Box from '@material-ui/core/Box';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport LockIcon from '@material-ui/icons/Lock';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { connect } from 'react-redux';\n\n//Within the styles rgb(0, 20, 60) fits the logo design for blue and rgb(0, 73, 0) for green\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        textAlign: 'center',\n        padding: theme.spacing(2),\n        marginTop: 100,\n    },\n    card: {\n        maxWidth: 450,\n        margin: 'auto',\n    },\n    signUpBtn: {\n        backgroundColor: 'rgb(255, 255, 255)',\n        color: 'rgb(0, 32, 91)',\n        marginLeft: 'auto',\n    },\n    geoPrimary: {\n        color: 'rgb(0, 20, 60)',\n    },\n    geoSecondary: {\n        color: 'rgb(0, 73, 0)',\n    },\n    logoImg: {\n        width: '100%',\n        height: '100%',\n    },\n}));\n\nfunction Login(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [open, setOpen] = useState(false);\n    const formRef = useRef(null);\n    const regularExpressions = {\n        usernameExpression: /^\\w+$/,\n        alphaStartRe: /^[A-Za-z]+$/,\n    }\n\n    useEffect(() => {\n        //If the user is logged in, return to the profile page. \n        if(props.user !== null) {\n            history.push('/profile');\n        }\n        else {\n            //Else, we need to make sure that we have the proper colors for the primary colors. \n            props.dispatch({type: 'ThemeChange', payload: 'rgb(0, 20, 60)'});\n        }\n        //The validation rule below ensures a username and password have at least 6 characters.\n        ValidatorForm.addValidationRule('enoughCharacters', value => {\n            if(value.length < 6) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //The validation rule below ensures that a username only containers letters, numbers and underscores.\n        ValidatorForm.addValidationRule('usernameRe', value => {\n            if(!regularExpressions.usernameExpression.test(value)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        ValidatorForm.addValidationRule('alphaStartRe', value => {\n            if(!regularExpressions.alphaStartRe.test(value.charAt(0))) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n    }, []);\n\n    function handleUsernameChange(e) {\n        setUsername(e.target.value);\n    }\n\n    function handlePasswordChange(e) {\n        setPassword(e.target.value);\n    }\n\n    function enterPress(e) {\n        /*This function will handle an \"enter\" key press. If the user presses enter \n        while they are in the password TextField box, they will trigger the \n        sendLoginData function \n        */\n        if(e.charCode === 13) {\n            sendLoginData();\n        }\n    }\n\n    function preventSpace(e) {\n        //This function will prevent spaces when the user enters a username.\n        //It is triggered with an onKeyDown event.\n        if(e.keyCode === 32) {\n            e.preventDefault();\n            return;\n        }\n    }\n\n    async function sendLoginData() {\n        //This function will handle sending the login data to the server with axios \n        \n        let isValid = await formRef.current.isFormValid();\n        if(!isValid) {\n            swal(\n                'Uh oh!',\n                'Make sure you filled out the log in form properly!',\n                'error',\n            );\n            return false;\n        }\n        if(username.length < 6) {\n            swal(\n                'Uh oh!',\n                'Username must be at least 6 characters long!',\n                'error',\n            );\n            setOpen(false);\n            return;\n        }\n        else if(password.length < 6) {\n            swal(\n                'Uh oh!',\n                'Password must be at least 6 characters long!',\n                'error',\n            );\n            setOpen(false);\n            return;\n        }\n        else {\n            let data = JSON.stringify({\n                username: username,\n                password: password,\n            });\n\n            return axios({\n                method: 'post',\n                data: data,\n                url: 'http://192.168.0.17:3001/api/login',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }).then(response => {\n                if(response.data.user) {\n                    setOpen(false);\n                    props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                    props.dispatch({type: 'ThemeChange', payload: response.data.user.profileTheme});\n                    swal(\n                        'Great!',\n                        'Successfully logged in',\n                        'success',\n                    );\n                    history.push('/profile');\n                }\n                else if(response.data === 'user not found') {\n                    setOpen(false);\n                    swal(\n                        'Uh oh!',\n                        'We could not find that username! Please try again. If you forgot your username, press the \"FORGOT USERNAME OR PASSWORD\" button below.',\n                        'error',\n                    );\n                }\n                else if(response.data === 'invalid password') {\n                    setOpen(false);\n                    swal(\n                        'Uh oh!',\n                        'That password was invalid. Please try again. If you forgot your password, press the \"FORGOT USERNAME OR PASSWORD\" button below.',\n                        'error',\n                    );\n                }\n            }).catch(err => {\n                setOpen(false);\n                console.log(err.message);\n                swal(\n                    'Uh oh!',\n                    'There was an error logging you in. Please try again!',\n                    'error',\n                )\n            });\n        }\n    }\n\n    return (\n        <div \n            className={classes.root} \n        >\n            <Backdrop \n                open={open}\n            >\n                <Box>\n                    mb={10}\n                    <CircularProgress \n                        color='primary' \n                    />\n                </Box>\n                <Box \n                    mt={2} \n                >\n                    <Typography \n                        variant='body1'\n                        color='textSecondary' \n                        component='p' \n                    >\n                        Logging in\n                    </Typography>\n                </Box>\n            </Backdrop>\n            <Card \n                className={classes.card}\n                hidden={open}\n            >\n                <CardContent>\n                    <Box \n                        mb={4} \n                    >\n                        <Typography \n                            variant='h6'\n                            component='h6'\n                        >\n                            Welcome to <span className={classes.geoPrimary}>Geo</span><span className={classes.geoSecondary}>Cities</span>!\n                            <SvgIcon  \n                                style={{\n                                    color: 'rgb(0, 20, 60)',\n                                }}\n                            >\n                                <path d=\"M 10.050781 0.222656 C 9.261719 0.355469 8.6875 0.765625 8.472656 1.363281 C 8.402344 1.558594 8.394531 1.902344 8.449219 2.085938 C 8.621094 2.644531 9.289062 3.136719 9.988281 3.226562 C 10.082031 3.234375 10.347656 3.246094 10.574219 3.242188 C 11.0625 3.238281 11.152344 3.257812 11.332031 3.414062 C 11.5 3.5625 11.566406 3.738281 11.585938 4.046875 C 11.589844 4.179688 11.585938 4.332031 11.574219 4.386719 L 11.550781 4.480469 L 11.214844 4.503906 C 8.734375 4.695312 6.742188 5.953125 5.914062 7.84375 C 5.265625 9.324219 5.53125 11.039062 6.597656 12.300781 C 6.824219 12.570312 7.167969 12.90625 7.351562 13.035156 C 7.410156 13.078125 7.460938 13.117188 7.460938 13.121094 C 7.460938 13.125 7.359375 13.179688 7.230469 13.238281 C 6.515625 13.582031 5.902344 14.085938 5.648438 14.535156 C 5.445312 14.898438 5.371094 15.320312 5.460938 15.632812 C 5.617188 16.203125 6.226562 16.734375 7.144531 17.109375 C 7.308594 17.175781 7.433594 17.230469 7.425781 17.234375 C 7.421875 17.238281 7.292969 17.285156 7.140625 17.339844 C 5.796875 17.804688 4.949219 18.566406 4.664062 19.566406 C 4.582031 19.851562 4.574219 20.457031 4.648438 20.691406 C 4.828125 21.277344 5.1875 21.757812 5.785156 22.230469 C 6.644531 22.902344 7.910156 23.375 9.476562 23.597656 C 10.308594 23.71875 10.734375 23.746094 11.914062 23.746094 C 12.980469 23.746094 13.308594 23.734375 14.046875 23.664062 C 14.910156 23.578125 15.722656 23.4375 16.425781 23.253906 C 18.523438 22.695312 19.863281 21.703125 20.296875 20.386719 C 20.414062 20.035156 20.433594 19.890625 20.433594 19.449219 C 20.433594 19.085938 20.421875 18.996094 20.371094 18.808594 C 20.210938 18.242188 19.941406 17.851562 19.417969 17.445312 C 18.839844 16.992188 18.0625 16.664062 17.011719 16.4375 C 15.882812 16.1875 14.839844 16.105469 12.277344 16.074219 C 10.996094 16.058594 10.128906 16.042969 9.957031 16.03125 C 9.875 16.027344 9.707031 16.019531 9.578125 16.011719 C 8.390625 15.945312 7.71875 15.707031 7.449219 15.261719 C 7.375 15.144531 7.367188 15.101562 7.367188 14.945312 C 7.367188 14.78125 7.375 14.753906 7.464844 14.609375 C 7.519531 14.523438 7.617188 14.40625 7.679688 14.347656 C 7.832031 14.210938 8.136719 14.023438 8.386719 13.914062 L 8.59375 13.824219 L 8.691406 13.871094 C 8.949219 13.996094 9.578125 14.21875 9.902344 14.300781 C 12.304688 14.929688 14.867188 14.4375 16.605469 13.019531 C 18.023438 11.859375 18.652344 10.246094 18.296875 8.664062 C 18.117188 7.855469 17.640625 7.050781 16.949219 6.378906 C 16.722656 6.15625 16.144531 5.714844 15.871094 5.550781 C 15.1875 5.144531 14.410156 4.835938 13.644531 4.660156 C 13.386719 4.601562 12.800781 4.511719 12.683594 4.511719 C 12.628906 4.511719 12.582031 4.503906 12.570312 4.492188 C 12.5625 4.480469 12.578125 4.363281 12.609375 4.234375 C 12.699219 3.8125 12.734375 3.5 12.734375 3.003906 C 12.730469 2.464844 12.691406 2.203125 12.558594 1.796875 C 12.273438 0.953125 11.609375 0.386719 10.734375 0.242188 C 10.574219 0.214844 10.175781 0.203125 10.050781 0.222656 Z M 12.519531 6.125 C 14.375 6.332031 15.828125 7.410156 16.210938 8.871094 C 16.265625 9.058594 16.273438 9.167969 16.273438 9.519531 C 16.273438 9.882812 16.265625 9.972656 16.210938 10.183594 C 15.96875 11.101562 15.3125 11.871094 14.34375 12.378906 C 13.535156 12.804688 12.53125 13.011719 11.59375 12.945312 C 10.949219 12.898438 10.546875 12.8125 9.96875 12.585938 C 8.765625 12.117188 7.933594 11.265625 7.640625 10.203125 C 7.5625 9.90625 7.554688 9.183594 7.632812 8.886719 C 8.003906 7.429688 9.464844 6.335938 11.308594 6.125 C 11.636719 6.089844 12.191406 6.085938 12.519531 6.125 Z M 9.394531 17.675781 C 9.945312 17.738281 10.980469 17.777344 12.8125 17.816406 C 14.164062 17.84375 14.667969 17.863281 15.253906 17.933594 C 15.9375 18.007812 16.398438 18.109375 16.84375 18.269531 C 17.6875 18.574219 18.121094 19.050781 18.121094 19.660156 C 18.121094 20.058594 17.925781 20.394531 17.492188 20.726562 C 16.746094 21.304688 15.425781 21.6875 13.632812 21.855469 C 13.140625 21.902344 11.339844 21.910156 10.894531 21.867188 C 9.703125 21.753906 8.859375 21.570312 8.21875 21.285156 C 7.699219 21.054688 7.308594 20.742188 7.121094 20.414062 C 6.972656 20.148438 6.929688 19.777344 7.015625 19.460938 C 7.191406 18.816406 7.855469 18.191406 8.832031 17.746094 C 8.953125 17.691406 9.066406 17.644531 9.082031 17.644531 C 9.097656 17.644531 9.238281 17.660156 9.394531 17.675781 Z M 9.394531 17.675781\" />\n                                <path d=\"M 11.617188 8.546875 C 11.261719 8.625 10.957031 8.828125 10.792969 9.101562 C 10.691406 9.261719 10.691406 9.269531 10.691406 9.527344 C 10.691406 9.792969 10.691406 9.792969 10.796875 9.960938 C 11.070312 10.394531 11.644531 10.617188 12.242188 10.519531 C 12.75 10.433594 13.160156 10.082031 13.238281 9.667969 C 13.328125 9.171875 12.929688 8.691406 12.320312 8.550781 C 12.144531 8.511719 11.792969 8.507812 11.617188 8.546875 Z M 11.617188 8.546875 \"/>\n                            </SvgIcon>\n                        </Typography>\n                        <Typography \n                            variant='subtitle1' \n                            component='span' \n                        >\n                            Log in \n                        </Typography>\n                    </Box>\n                    <Box>\n                        <ValidatorForm \n                            ref={formRef}\n                            onSubmit={e => e.preventDefault()}\n                        >\n                            <Box \n                                mb={3}\n                            >\n                                <TextValidator\n                                    variant='outlined' \n                                    label='Username'\n                                    placeholder='Username'\n                                    color='primary'\n                                    value={username}\n                                    onChange={handleUsernameChange}\n                                    onKeyDown={preventSpace}\n                                    type='username'\n                                    helperText='Username must be at least 6 characters'\n                                    aria-label='Username' \n                                    InputProps={{\n                                        startAdornment: (\n                                            <InputAdornment \n                                                position='start' \n                                            >\n                                                <AccountCircleIcon />\n                                            </InputAdornment>\n                                        )\n                                    }}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    validators={['enoughCharacters', 'usernameRe', 'alphaStartRe', 'required']}\n                                    errorMessages={['Username must be at least 6 characters', 'Username can only contain letters, numbers and underscores', 'Username must start with a letter', 'Must enter a username']}\n                                    fullWidth\n                                    required\n                                />\n                            </Box>\n                            <TextValidator\n                                variant='outlined' \n                                label='Password'\n                                placeholder='Password'\n                                color='primary'\n                                value={password} \n                                onChange={handlePasswordChange}\n                                onKeyPress={enterPress}\n                                type='password' \n                                helperText='Password must be at least 6 characters'\n                                aria-label='Password' \n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <LockIcon />\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                validators={['enoughCharacters', 'required']}\n                                errorMessages={['Password must be at least 6 characters', 'Must enter a password']}\n                                fullWidth \n                                required\n                            />\n                        </ValidatorForm>\n                    </Box>\n                </CardContent>\n                <CardActions>\n                    <Button \n                        color='primary' \n                        variant='contained' \n                        onClick={sendLoginData}\n                        aria-label='Log in button'\n                    >\n                        Log in \n                    </Button>\n                    <Button \n                        className={classes.signUpBtn} \n                        variant='contained' \n                        onClick={() => history.push('/signup')}\n                        style={{\n                            marginLeft: 'auto',\n                        }}\n                        aria-label='Sign up button'\n                    >\n                        Sign up\n                    </Button>\n                </CardActions>\n                <CardContent>\n                    <Box>\n                        <Button \n                            color='primary' \n                            aria-label='Forgot username or password button'\n                        >\n                            Forgot username or password?\n                        </Button>\n                    </Box>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    }\n}\n\nexport default connect(mapStateToProps)(Login);","/Users/simeonikudabo/Downloads/geocities/src/components/GeoCitiesSearch.js",["156","157","158","159","160","161","162","163"],"import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@mdi/react';\nimport { mdiAccount } from '@mdi/js';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport axios from 'axios';\nimport swal from 'sweetalert';\n\nconst userFilterOptions = createFilterOptions({\n    matchFrom: 'any',\n    stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username,\n});\n\nconst communityFilterOptions = createFilterOptions({\n    matchFrom: 'any',\n    stringify: option => option.name,\n});\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        marginTop: 100,\n    },\n    card: {\n        maxWidth: 450,\n        margin: 'auto',\n    }\n}));\n\nfunction GeoCitiesSearch(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [searchUser, setSearchUser] = useState(null);\n    const [searchCommunity, setSearchCommunity] = useState(null);\n    const [users, setUsers] = useState([]);\n    const [communities, setCommunities] = useState([]);\n    const [val, setVal] = useState('');\n    const myUsers = [\n        'Simeon',\n    ]\n\n    useEffect(() => {\n        //If the user is not logged in, return to the log in/sign up page. \n        if(props.mainUser === null) {\n            history.push('/');\n        }\n        else {\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/fetch/users/${props.mainUser.uniqueUserId}`,\n            }).then(response => {\n                if(response.data.users.length > 0) {\n                    setUsers(response.data.users);\n                    setCommunities(response.data.communities);\n                    //Update the profile theme once the users return.\n                    props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme});\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find any users to search.',\n                        'error',\n                    );\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error getting the data to search from the server! Please try again.',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    }, []);\n\n    return (\n        <Grid \n            className={classes.root} \n            container \n        >\n            <Card \n                className={classes.card} \n            >\n                <CardContent>\n                    <Typography \n                        variant='h6' \n                        component='h6' \n                        align='center'\n                        style={{\n                            marginBottom: 20,\n                        }}\n                    >\n                        Search for users or communities \n                    </Typography>\n                    {users.length > 0 &&\n                        <Autocomplete \n                            value={searchUser}\n                            filterOptions={userFilterOptions}\n                            onChange={(e, newVal) => setSearchUser(newVal)}\n                            options={users}\n                            getOptionLabel={option => option.firstName + ' ' + option.lastName}\n                            renderOption={option => (\n                                <ListItem \n                                    alignItems='flex-start' \n                                    style={{\n                                        cursor: 'pointer',\n                                    }}\n                                    onClick={() => history.push(`/geouser/${option.uniqueUserId}`)}\n                                >\n                                    <ListItemAvatar>\n                                        <Avatar \n                                            src={`http://192.168.0.17:3001/api/get-photo/${option.avatar}`}\n                                            alt={`${option.username}`}\n                                            title={`${option.username}`} \n                                        />\n                                    </ListItemAvatar>\n                                    <ListItemText \n                                        primary={\n                                            <Typography \n                                                variant='h6' \n                                                component='h6' \n                                            >\n                                                {option.username}\n                                            </Typography>\n                                        }\n                                        secondary={\n                                            <Typography \n                                                component='small'\n                                                color='textSecondary' \n                                            >\n                                                {option.firstName} {option.lastName}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                            )}\n                            renderInput={params => (\n                                <TextField \n                                    {...params} \n                                    color='primary'\n                                    variant='outlined' \n                                    label='Search users' \n                                    placeholder='Search users'\n                                    helperText='Search for a GeoCities user'\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    fullWidth \n                                    required \n                                />\n                            )}\n                        />\n                    }\n                    <div \n                        style={{\n                            marginTop: 20,\n                        }}\n                    />\n                    {communities.length > 0 &&\n                        <Autocomplete \n                            value={searchCommunity}\n                            onChange={(e, newVal) => setSearchCommunity(newVal)}\n                            options={communities}\n                            getOptionSelected={(option, value) => option.name === value || option.title === value || option.topics.includes(value)}\n                            getOptionLabel={option => option.name}\n                            renderOption={option => (\n                                <ListItem \n                                    alignItems='flex-start' \n                                    style={{\n                                        cursor: 'pointer',\n                                    }}\n                                    onClick={e => history.push(`/community/${option.name}`)}\n                                >\n                                    <ListItemAvatar>\n                                        <Avatar \n                                            src={`http://192.168.0.17:3001/api/get-photo/${option.avatar}`}\n                                            alt={`${option.name} avatar`}\n                                            title={`${option.name} avatar`} \n                                        />\n                                    </ListItemAvatar>\n                                    <ListItemText \n                                        primary={\n                                            <Grid \n                                                item \n                                                xs={12} \n                                                zeroMinWidth \n                                            >\n                                                <Typography \n                                                    variant='h6' \n                                                    component='h6' \n                                                    noWrap \n                                                >\n                                                    {option.name}\n                                                </Typography>\n                                            </Grid>\n                                        }\n                                        secondary={\n                                            <Typography \n                                                    component='small'\n                                                    color='textSecondary'\n                                                >\n                                                    {option.title}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                            )}\n                            renderInput={params => (\n                                <TextField \n                                    {...params} \n                                    color='primary'\n                                    variant='outlined' \n                                    label='Search communities' \n                                    placeholder='Search communities'\n                                    helperText='Search for a GeoCities community'\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    fullWidth \n                                    required \n                                />\n                            )}\n                        />\n                    }\n                </CardContent>\n            </Card>\n        </Grid>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        theme: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(GeoCitiesSearch);\n\n","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUser.js",["164","165","166","167","168","169","170","171","172","173","174"],"import React, { useState, useEffect, useLayoutEffect, useRef}  from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport swal from 'sweetalert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Icon from '@mdi/react';\nimport { mdiCheckBold, mdiPencil, mdiClose, mdiCamera, mdiVideo, mdiTwitter, mdiInstagram, mdiYoutube } from '@mdi/js';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Divider from '@material-ui/core/Divider';\nimport Link from '@material-ui/core/Link';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GeoUserPostsCard from './GeoUserPostsCard';\nimport NonUserPostsCard from './NonUserPostsCard';\n\nfunction TabPanel(props) {\n    //This component will serve as the panel for each individual tab.\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div \n            role='tabpanel'\n            hidden={index !== value} \n            id={`tabpanel-${index}`}\n            aria-label={`tab-${index}`}\n            aria-labelledby={`tab-${index}`}\n            {...other}\n            style={{\n                marginTop: 100,\n            }}\n        >\n            {value === index &&\n                <Grid \n                    item \n                    xs\n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    {children}\n                </Grid>\n            }\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    index: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    };\n}\n\nfunction GeoUser(props) {\n    const [geoUser, setGeoUser] = useState(null);\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            marginTop: 100,\n        },\n        profileAvatar: {\n            height: 128,\n            width: 128,\n            margin: 'auto',\n        },\n        profileAvatarLg: {\n            height: 168,\n            width: 168,\n            margin: 'auto',\n        },\n        usernameDisplay: {\n            marginTop: 40,\n            margin: 'auto',\n        },\n        statsInfo: {\n            marginTop: 40,\n            textAlign: 'center',\n        },\n        paper: {\n            backgroundColor: geoUser ? geoUser.profileTheme : 'rgb(0, 20, 60)',\n            color: 'rgb(255, 255, 255)',\n            marginTop: 40,\n        },\n        input: {\n            display: 'none',\n        },\n    }));\n    const classes = useStyles(); //Custom styling. \n    const params = useParams();\n    const history = useHistory();\n    const [isFollowing, setIsFollowing] = useState(false); //This will disable a button if the user is following or unfollowing a user.\n    const [curTab, setCurTab] = useState(0); //The tab that should display. \n    const [isFollowingRequest, setIsFollowingRequest] = useState(false); //Variable and setter that will disable follow button if the user sends a request on a private profile. \n    const [communities, setCommunities] = useState([]); //Variable and setter for the users' list of communites\n    \n    useEffect(() => {\n        if(props.mainUser === null) {\n            //Call the API to get a public profile view for a user who is not logged in.\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/get/public/geo/user/${params.uniqueUserId}`,\n            }).then(response => {\n                if(response.data.geoUser) {\n                    //If we were able to get a user, set post and theme globally, and the local geoUser state.\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    props.dispatch({type: 'ThemeChange', payload: response.data.geoUser.profileTheme});\n                    setGeoUser(response.data.geoUser); //Set the local geoUser state variable.\n                    setCommunities(response.data.communities);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find that user! Their profile might not exist.',\n                        'error',\n                    );\n\n                    \n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error finding that user! Please try again.',\n                    'error',\n                );\n            });\n        }\n        else if(props.mainUser !== null) {\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/get/geo/user/${params.uniqueUserId}/${props.mainUser.uniqueUserId}`,\n            }).then(response => {\n                if(response.data.geoUser && response.data.mainUser) {\n                    if(response.data.geoUser.uniqueUserId === props.mainUser.uniqueUserId) {\n                        history.push('/profile');\n                    }\n                    else {\n                        if(response.data.geoUser.blockList.includes(response.data.mainUser.uniqueUserId)) {\n                            swal(\n                                'Uh Oh!',\n                                'This user has blocked you!',\n                                'error',\n                            );\n                            history.goBack(1);\n                        }\n                        else {\n                            props.dispatch({type: 'user/updateUser', payload: response.data.mainUser});\n                            props.dispatch({type: 'ThemeChange', payload: response.data.geoUser.profileTheme});\n                            props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                            setGeoUser(response.data.geoUser);\n                            setCommunities(response.data.communities);\n                        }\n                    }\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'Could not find that GeoCities user!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error getting that users profile! Please try again.',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    }, []);\n\n    function followUser() {\n        setIsFollowing(true);\n        let data = JSON.stringify({\n            uniqueUserId: geoUser.uniqueUserId,\n            uniqueFollowerId: props.mainUser.uniqueUserId,\n            username: props.mainUser.username,\n            followUsername: geoUser.username,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/follow/user',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            swal(\n                'Great!',\n                'Successfully followed this user!',\n                'success',\n            );\n            setGeoUser(response.data.geoUser);\n            setIsFollowing(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error following that user! Please try again.',\n                'error',\n            );\n            setIsFollowing(false);\n        });\n    }\n\n    function unfollowUser() {\n        setIsFollowing(true);\n        let data = {\n            uniqueUserId: geoUser.uniqueUserId,\n            uniqueUnfollowerId: props.mainUser.uniqueUserId,\n            username: props.mainUser.username,\n            unfollowUsername: geoUser.username,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/unfollow/user',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            swal(\n                'Great!',\n                'Successfully unfollowed user!',\n                'success',\n            );\n            setGeoUser(response.data.geoUser);\n            setIsFollowing(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error unfollowing that user! Please try again.',\n                'error',\n            );\n            setIsFollowing(false);\n        });\n    }\n\n    function followUserRequest() {\n        //This function will send a follow request to the geoUser. \n        setIsFollowing(true);\n        setIsFollowingRequest(true);\n        let data = {\n            followerUsername: props.mainUser.username,\n            followerUniqueUserId: props.mainUser.uniqueUserId,\n            username: geoUser.username,\n            uniqueUserId: geoUser.uniqueUserId,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/follow/user/request',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data === 'duplicate') {\n                swal(\n                    'Uh Oh!',\n                    'You already sent this user a follow request!',\n                    'error',\n                );\n                setIsFollowing(false);\n                setIsFollowingRequest(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Successfully sent follow request!',\n                    'success',\n                );\n                setIsFollowing(false);\n                setGeoUser(response.data.geoUser);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error sending that follow request! Please try again.',\n                'success',\n            );\n            setIsFollowing(false);\n            setIsFollowingRequest(false);\n        });\n    }\n\n    function findFollowers() {\n        //This function will handle finding the followers for a specific geoUser. \n        history.push(`/geouser/followers/${geoUser.uniqueUserId}`);\n    }\n\n    function findFollowing() {\n        history.push(`/geouser/following/${geoUser.uniqueUserId}`);\n    }\n\n    return (\n        <div>\n            {/* Below is the conditional rendering if the geoUser object is not null */}\n            {geoUser !== null &&\n                <Grid \n                    container \n                    className={classes.root} \n                >\n                    <Grid \n                        item \n                        container \n                        xs={12} \n                    >\n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            {/* Below is the avatar that will display 128x128 pixels on small screen devices */}\n                            <Hidden \n                                mdUp  \n                            >\n                                <Avatar \n                                    src={`http://192.168.0.17:3001/api/get-photo/${geoUser.avatar}`} \n                                    className={classes.profileAvatar} \n                                    title={`${geoUser.username}`} \n                                    alt={`${geoUser.username}`} \n                                />\n                            </Hidden>\n                            {/* Below is the avatar that will display on medium and large screen devices at 168x168 pixels*/}\n                            <Hidden \n                                smDown \n                            >\n                                <Avatar \n                                    src={`http://192.168.0.17:3001/api/get-photo/${geoUser.avatar}`}\n                                    title={`${geoUser.username}`}\n                                    alt={`${geoUser.username}`}\n                                    className={classes.profileAvatarLg} \n                                />\n                            </Hidden>\n                        </Grid>\n                    </Grid>\n                    {/* End of the top Grid that displays the avatar. Below is the Grid to display the username in a Typography component */}\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <Typography \n                            variant='h4' \n                            component='h4' \n                            align='center' \n                            className={classes.usernameDisplay}\n                        >\n                            {geoUser.username}\n                        </Typography>\n                        {geoUser.isVerified &&\n                        <Typography \n                            variant='body1'\n                            component='p' \n                            style={{\n                                margin: 'auto',\n                                textAlign: 'center',\n                                marginTop: 10,\n                            }}\n                        >\n                            <Icon \n                                path={mdiCheckBold} \n                                size={1} \n                                title='Verified' \n                                style={{\n                                    color: 'rgb(0, 128, 0)'\n                                }}\n                            /> Verified \n                        </Typography>\n                    }\n                    </Grid>\n                    {/* End of the username and verified check display. Below is the Grid to display following followers and Karma.*/}\n                    <Grid \n                        container \n                        item \n                        xs={12}\n                        spacing={1}\n                        className={classes.statsInfo} \n                    >\n                        <Grid \n                            item \n                            xs={4} \n                            style={{\n                                cursor: 'pointer'\n                            }}\n                            onClick={(props.mainUser !== null && geoUser.followers.length > 0) ? findFollowers : e => console.log('No Followers')}\n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                            >\n                                Followers \n                            </Typography>\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {geoUser.followers.length}\n                            </Typography>\n                        </Grid>\n                        <Grid \n                            item \n                            xs={4} \n                            style={{\n                                cursor: 'pointer',\n                            }}\n                            onClick={(props.mainUser !== null && geoUser.following.length > 0) ? findFollowing : e => console.log('The user is not following anyone')}\n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                            >\n                                Following \n                            </Typography>\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {geoUser.following.length}\n                            </Typography>\n                        </Grid>\n                        <Grid \n                        item \n                        xs={4} \n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                            >\n                                Karma\n                            </Typography>\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {geoUser.karma}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                    {/* End of the statsInfo Grid */}\n                    {/* Below is the Grid to display the geoUsers' first and last name */}\n                    <Grid \n                        item \n                        xs={12} \n                        style={{\n                            textAlign: 'center',\n                        }}\n                    >\n                        <Typography \n                            variant='body1' \n                            component='p' \n                            style={{\n                                fontWeight: 'bold',\n                                marginTop: 30,\n                            }}\n                        >\n                            {geoUser.firstName} {geoUser.lastName}\n                        </Typography>\n                    </Grid>\n                    {/* End of the Grid to display the first and last name */}\n                    {/* Begin the Grid to display the GeoUsers bio */}\n                    <Grid \n                        item \n                        xs={12} \n                        style={{\n                            marginTop: 40,\n                            textAlign: 'center',\n                        }}\n                    >\n                        <Typography \n                            variant='body2' \n                            component='small' \n                            justify='left'\n                            align='left'\n                        >\n                            {geoUser.bio}\n                        </Typography>\n                    </Grid>\n                    {/* End of the Grid that displays the geoUsers' bio*/}\n                    {/* Below we will add a follow or unfollow button if the main user is active. This button \n                        will not exist if the main user is not active. Instead, we should add a button that \n                        takes someone visiting this page to the sign up page. If the mainUser is not null, \n                        they will get the follow Button if they don't follow the user and an unfollow button \n                        if they do follow the user. This button will only conditionally render if the mainUser \n                        object is not null.*/\n                    }\n                    {props.mainUser !== null &&\n                        <Grid \n                            item \n                            xs={12}\n                            style={{\n                                margin: 'auto',\n                                textAlign: 'center',\n                                marginTop: 20,\n                            }}\n                        >\n                            {/* Below create a condition if we have a user that is not following a user already, and the profile is public so the user doesn't have to send a follow request. */}\n                            {(!_.find(geoUser.followers, follower => follower.uniqueUserId === props.mainUser.uniqueUserId) && geoUser.profilePrivacy === 'public') &&\n                                <Button \n                                    color='primary'   \n                                    variant='contained' \n                                    onClick={followUser}\n                                    disabled={isFollowing} \n                                >\n                                    {isFollowing ? <CircularProgress /> : 'Follow'}\n                                </Button>\n                            }\n                            {/* Below create a condition if we have a user that is not following a user already, and the profile is private so the user must send a follow request */}\n                            {(!_.find(geoUser.followers, follower => follower.uniqueUserId === props.mainUser.uniqueUserId) && geoUser.profilePrivacy === 'private') &&\n                                <div>\n                                    <Button \n                                        color='primary' \n                                        variant='contained' \n                                        onClick={followUserRequest}\n                                        disabled={isFollowingRequest || _.find(geoUser.notifications, notification => notification.uniqueSenderId === props.mainUser.uniqueUserId && notification.type === 'follower request')}\n                                    >\n                                        {isFollowing ? <CircularProgress /> : 'Follow'}\n                                    </Button>\n                                    <Typography \n                                        variant='h6' \n                                        component='h6' \n                                        align='center' \n                                        style={{\n                                            marginTop: 20,\n                                        }}\n                                    >\n                                        This profile is private\n                                    </Typography>\n                                </div>\n                            }\n                            {/* Below is the condition to add the unfollow button if a mainUser is in the list of a geoUsers' followers */}\n                            {_.find(geoUser.followers, follower => follower.uniqueUserId === props.mainUser.uniqueUserId) &&\n                                <Button \n                                    color='primary' \n                                    variant='contained' \n                                    onClick={unfollowUser}\n                                    disabled={isFollowing} \n                                >\n                                    {isFollowing ? <CircularProgress /> : 'Unfollow'}\n                                </Button>\n                            }\n                            {/* End of condition to add the unfollow button */}\n                        </Grid>\n                    }\n                    {/*This will display a sign up button if the page visitor is not logged in */}\n                    {props.mainUser === null &&\n                        <Grid \n                            xs={12}\n                            item \n                            style={{\n                                margin: 'auto',\n                                textAlign: 'center',\n                                marginTop: 20,\n                            }}\n                        >\n                            <Button \n                                color='primary'\n                                onClick={e => history.push('/')}\n                            >\n                                Sign up or log in\n                            </Button>\n                        </Grid>\n                    }\n                    {/* End of the Button to handle following or unfollowing a user */}\n                    {/* Below I need to handle conditions in which the rest of the page will either \n                        display or not display depending on if the mainUser is following or not following the \n                        user. I also need to consider if the geoUser has a public or private account. I must \n                        also handle cases in which someone who is not logged in can either visit an account \n                        or not visit an account. *\n                    */}\n                    {props.mainUser !== null &&\n                        <div \n                            style={{\n                                width: '100%',\n                                padding: 0,\n                            }}\n                        >\n                            {/* If the geoUser either has a public profile, or the mainUser follows the Geo User, add the tabs and posts section */}\n                            {/* Below is the section for tabs within a Grid */}\n                            {(geoUser.profilePrivacy === 'public' || _.find(geoUser.followers, follower => follower.uniqueUserId === props.mainUser.uniqueUserId)) &&\n                                <div>\n                                    <Grid \n                                        xs={12}\n                                        item \n                                    >\n                                        <Paper \n                                            className={classes.paper} \n                                        >\n                                            <Tabs \n                                                value={curTab} \n                                                onChange={(e, newValue) => setCurTab(newValue)} \n                                                centered\n                                            >\n                                                <Tab \n                                                    label='Posts'\n                                                    {...a11yProps(0)}\n                                                />\n                                                <Tab \n                                                    label='About' \n                                                    {...a11yProps(1)}\n                                                />\n                                                <Tab \n                                                    label='Events' \n                                                    {...a11yProps(2)} \n                                                />\n                                            </Tabs>\n                                        </Paper>\n                                        <Grid \n                                            item \n                                            xs={12} \n                                        />\n                                        <TabPanel \n                                            index={0}\n                                            value={curTab} \n                                        >\n                                            {/* If condition for if the user has no posts. */}\n                                            {props.posts.length < 1 &&\n                                                <Typography \n                                                    variant='h6' \n                                                    component='h6' \n                                                    align='center' \n                                                >\n                                                    No posts \n                                                </Typography>\n                                            }\n                                            {/*End of if condition if user has no posts. Now, put the posts content below if the user has posts */}\n                                            {props.posts.length > 0 &&\n                                                <div>\n                                                    {props.posts.map((post, index) => (\n                                                        <div \n                                                            style={{\n                                                                textAlign: 'left',\n                                                            }}\n                                                            key={index} \n                                                        >\n                                                            <GeoUserPostsCard \n                                                                post={post}\n                                                                user={geoUser}\n                                                                id={post.uniquePostId} \n                                                                setter={setGeoUser}\n                                                            />\n                                                            {index < props.posts.length - 1 &&\n                                                                <div \n                                                                    style={{\n                                                                        marginBottom: 20,\n                                                                    }}\n                                                                />\n                                                            }\n                                                        </div>\n                                                    ))}\n                                                </div>\n                                            }\n                                        </TabPanel>\n                                        <TabPanel \n                                            index={1}\n                                            value={curTab} \n                                        >\n                                            <Grid \n                                                item \n                                                xs={12} \n                                            >\n                                                <Typography \n                                                    variant='h4' \n                                                    component='h4' \n                                                    align='center' \n                                                >\n                                                    About {geoUser.firstName}\n                                                </Typography>\n                                                <List \n                                                    style={{\n                                                        margin: 'auto',\n                                                        maxWidth: 450,\n                                                        marginTop: 20,\n                                                    }}\n                                                >\n                                                    <ListItem \n                                                        alignItems='center' \n                                                    >\n                                                        <ListItemText \n                                                            primary={\n                                                                <Typography \n                                                                    variant='h6' \n                                                                    component='h6' \n                                                                    align='center'\n                                                                >\n                                                                    Name \n                                                                </Typography>\n                                                            }\n                                                            secondary={\n                                                                <Typography \n                                                                    variant='body1' \n                                                                    component='p' \n                                                                    align='center'\n                                                                >\n                                                                    {geoUser.firstName} {geoUser.lastName}\n                                                                </Typography>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                    <Divider />\n                                                    <ListItem \n                                                        alignItems='center' \n                                                    >\n                                                        <ListItemText \n                                                            primary={\n                                                                <Typography \n                                                                    variant='h6' \n                                                                    component='h6' \n                                                                    align='center' \n                                                                >\n                                                                    Email\n                                                                </Typography>\n                                                            }\n                                                            secondary={\n                                                                <div\n                                                                    style={{\n                                                                        textAlign: 'center'\n                                                                    }}\n                                                                >\n                                                                    <Link \n                                                                        component='a'\n                                                                        color='primary' \n                                                                        href={`mailto:${geoUser.email}`}\n                                                                        style={{\n                                                                            textAlign: 'center',\n                                                                        }}\n                                                                    >\n                                                                        {geoUser.email}\n                                                                    </Link>\n                                                                </div>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                    <Divider />\n                                                    <ListItem \n                                                        alignItems='center' \n                                                    >\n                                                        <ListItemText \n                                                            primary={\n                                                                <Typography \n                                                                    variant='h6' \n                                                                    component='h6' \n                                                                    align='center' \n                                                                >\n                                                                    Birthdate \n                                                                </Typography>\n                                                            }\n                                                            secondary={\n                                                                <Typography \n                                                                    variant='body1' \n                                                                    component='p' \n                                                                    align='center' \n                                                                >\n                                                                    {geoUser.birthdate}\n                                                                </Typography>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                    <Divider />\n                                                    <ListItem \n                                                        alignItems='center' \n                                                    >\n                                                        <ListItemText \n                                                            primary={\n                                                                <Typography \n                                                                    variant='h6' \n                                                                    component='h6' \n                                                                    align='center' \n                                                                >\n                                                                    Profile created on\n                                                                </Typography>\n                                                            }\n                                                            secondary={\n                                                                <Typography \n                                                                    variant='body1' \n                                                                    component='p' \n                                                                    align='center'\n                                                                >\n                                                                    {new Date(geoUser.dateCreated).getMonth() + 1}/{new Date(geoUser.dateCreated).getDate()}/{new Date(geoUser.dateCreated).getFullYear()}\n                                                                </Typography>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                    <Divider />\n                                                    <ListItem \n                                                        alignItems='center' \n                                                    >\n                                                        <ListItemText \n                                                            primary={\n                                                                <Typography \n                                                                    variant='h6' \n                                                                    component='h6' \n                                                                    align='center' \n                                                                >\n                                                                    Location\n                                                                </Typography>\n                                                            }\n                                                            secondary={\n                                                                <Typography \n                                                                    variant='body1' \n                                                                    component='p' \n                                                                    align='center' \n                                                                >\n                                                                    {geoUser.city}, {geoUser.userState}\n                                                                </Typography>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                    <Divider />\n                                                    <div>\n                                                        {geoUser.college !== 'None' &&\n                                                            <ListItem \n                                                                alignItems='center' \n                                                            >\n                                                                <ListItemText \n                                                                    primary={\n                                                                        <Typography \n                                                                            variant='h6' \n                                                                            component='h6' \n                                                                            align='center' \n                                                                        >\n                                                                            College \n                                                                        </Typography>\n                                                                    }\n                                                                    secondary={\n                                                                        <Typography \n                                                                            variant='body1' \n                                                                            component='p' \n                                                                            align='center' \n                                                                        >\n                                                                            {geoUser.college}\n                                                                        </Typography>\n                                                                    }\n                                                                />\n                                                            </ListItem>\n                                                        }\n                                                    </div>\n                                                    <Divider />\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                        align='center' \n                                                    >\n                                                        Interests\n                                                    </Typography>\n                                                    <List>\n                                                        {geoUser.interests.map((interest, index) => (\n                                                            <ListItem \n                                                                alignItems='center' \n                                                                key={index} \n                                                            >\n                                                                <ListItemText \n                                                                    secondary={\n                                                                        <Typography \n                                                                            variant='body1' \n                                                                            component='p'\n                                                                            align='center' \n                                                                        >\n                                                                            {interest}\n                                                                        </Typography>\n                                                                    }\n                                                                />\n                                                            </ListItem>\n                                                        ))}\n                                                    </List>\n                                                    <Divider />\n                                                    {/* Now create the condition to see if there are any communities */}\n                                                    {communities.length > 0 &&\n                                                        <div>\n                                                            <Typography \n                                                                variant='h6' \n                                                                component='h6' \n                                                            >\n                                                                Communities \n                                                            </Typography>\n                                                            {communities.map((community, index) => (\n                                                                <Paper \n                                                                    elevation={3} \n                                                                    key={index} \n                                                                    style={{\n                                                                        marginBottom: index < communities.length - 1 ? 20 : 0,\n                                                                        cursor: 'pointer',\n                                                                    }}\n                                                                    onClick={e => history.push(`/community/${community.name}`)}\n                                                                >\n                                                                    <ListItem \n                                                                        alignItems='flex-start' \n                                                                    >\n                                                                        <ListItemAvatar>\n                                                                            <Avatar \n                                                                                src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                                                                                title={`${community.name} avatar`}\n                                                                                alt={`${community.name} avatar`}\n                                                                            />\n                                                                        </ListItemAvatar>\n                                                                        <ListItemText \n                                                                            primary={\n                                                                                <div \n                                                                                    zeroMinWidth \n                                                                                >\n                                                                                    <Typography \n                                                                                        variant='h6' \n                                                                                        component='h6' \n                                                                                        noWrap \n                                                                                    >\n                                                                                        {community.name}\n                                                                                    </Typography>\n                                                                                </div>\n                                                                            }\n                                                                            secondary={\n                                                                                <Typography \n                                                                                    variant='body1' \n                                                                                    component='p' \n                                                                                >\n                                                                                    {community.title}\n                                                                                </Typography>\n                                                                            }\n                                                                        />\n                                                                    </ListItem>\n                                                                </Paper>\n                                                            ))}\n                                                        </div>\n                                                    }\n                                                    <div>\n                                                        {geoUser.twitterHandle &&\n                                                            <div>\n                                                                <ListItem \n                                                                    alignItems='start' \n                                                                >\n                                                                    <ListItemIcon>\n                                                                        <Icon \n                                                                            path={mdiTwitter}\n                                                                            size={1} \n                                                                            title={'Twitter handld'}\n                                                                            aria-label='Twitter handle icon' \n                                                                        />\n                                                                    </ListItemIcon>\n                                                                    <ListItemText \n                                                                        primary={\n                                                                            <Link \n                                                                                component='a' \n                                                                                href={`https://www.twitter.com/${geoUser.twitterHandle}`}\n                                                                                color='primary' \n                                                                                rel='external' \n                                                                                title='Twitter handle'\n                                                                            >\n                                                                                {geoUser.twitterHandle}\n                                                                            </Link>\n                                                                        }\n                                                                    />\n                                                                </ListItem>\n                                                                <Divider />\n                                                            </div>\n                                                        }\n                                                    </div>\n                                                    {geoUser.instaHandle &&\n                                                        <div>\n                                                            <ListItem \n                                                                alignItems='start' \n                                                            >\n                                                                <ListItemIcon>\n                                                                    <Icon \n                                                                        path={mdiInstagram} \n                                                                        size={1} \n                                                                        title='Instagram handle' \n                                                                        aria-label='Instagram handle icon' \n                                                                    />\n                                                                </ListItemIcon>\n                                                                <ListItemText \n                                                                    primary={\n                                                                        <Link \n                                                                            component='a' \n                                                                            color='primary' \n                                                                            href={`https://www.instagram.com/${geoUser.instaHandle}`}\n                                                                            rel='external'\n                                                                            aria-label='Instagram profile link' \n                                                                        >\n                                                                            {geoUser.instaHandle}\n                                                                        </Link>\n                                                                    }\n                                                                />\n                                                            </ListItem>\n                                                            <Divider />\n                                                        </div>\n                                                    }\n                                                    {geoUser.youtubeChannel &&\n                                                        <div>\n                                                            <ListItem \n                                                                alignItems='center' \n                                                            >\n                                                                <ListItemIcon>\n                                                                    <Icon \n                                                                        path={mdiYoutube} \n                                                                        size={1}\n                                                                        title='Youtube channel' \n                                                                        aria-label='Youtube channel icon'\n                                                                    />\n                                                                </ListItemIcon>\n                                                                <ListItemText \n                                                                    primary={\n                                                                        <Link \n                                                                            component='a' \n                                                                            color='primary' \n                                                                            href={geoUser.youtubeChannel}\n                                                                            rel='external'\n                                                                            aria-label='Youtube channel link' \n                                                                        >\n                                                                            Youtube link\n                                                                        </Link>\n                                                                    }\n                                                                />\n                                                            </ListItem>\n                                                            <Divider />\n                                                        </div>\n                                                    }\n                                                </List>\n                                            </Grid>\n                                        </TabPanel>\n                                        <TabPanel \n                                            index={2} \n                                            value={curTab} \n                                        >\n                                            Events \n                                        </TabPanel>\n                                    </Grid>\n                                </div>\n                            }\n                        </div>\n                    }\n                    {/* This will conditionally render if the mainUser is null, meaining a user is not logged in.*/}\n                    {/* Below will will return a Typography saying the profile is private if the visitor is not logged in and the profile is private */}\n                    {(props.mainUser === null && geoUser.profilePrivacy === 'private') &&\n                        <Grid \n                            item \n                            xs={12} \n                            style={{\n                                marginTop: 20,\n                            }}\n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                Private profile\n                            </Typography>\n                        </Grid>\n                    }\n                    {/*End of privacy notice if the user is not logged in */}\n                    {/* Below show the tabs and profile page if the profile is public */}\n                    {(props.mainUser === null && geoUser.profilePrivacy === 'public') &&\n                        <div \n                            style={{\n                                width: '100%',\n                                padding: 0\n                            }}\n                        >\n                            <Grid \n                                xs={12}\n                                item \n                            >\n                                <Paper \n                                    className={classes.paper} \n                                >\n                                    <Tabs \n                                        value={curTab} \n                                        onChange={(e, newValue) => setCurTab(newValue)} \n                                        centered\n                                    >\n                                        <Tab \n                                            label='Posts'\n                                            {...a11yProps(0)}\n                                        />\n                                        <Tab \n                                            label='About' \n                                            {...a11yProps(1)}\n                                        />\n                                        <Tab \n                                            label='Events' \n                                            {...a11yProps(2)} \n                                        />\n                                    </Tabs>\n                                </Paper>\n                                <Grid \n                                    item \n                                    xs={12} \n                                />\n                                <TabPanel \n                                    index={0}\n                                    value={curTab} \n                                >\n                                    {/* If condition for if the user has no posts. */}\n                                    {props.posts.length < 1 &&\n                                        <Typography \n                                            variant='h6' \n                                            component='h6' \n                                            align='center' \n                                        >\n                                            No posts \n                                        </Typography>\n                                    }\n                                    {/* End of if condition if the user has no posts */}\n                                    {/* Now begin the if condition to iterate through all posts if the geoUser has at least one post */}\n                                    {props.posts.length > 0 &&\n                                        <div>\n                                            {props.posts.map((post, index) => (\n                                                <div \n                                                    style={{\n                                                        textAlign: 'left',\n                                                    }}\n                                                    key={index} \n                                                >\n                                                    <NonUserPostsCard\n                                                        post={post}\n                                                        id={post.uniquePostId} \n                                                    />\n                                                    {index < props.posts.length - 1 &&\n                                                        <div \n                                                            style={{\n                                                                marginBottom: 20,\n                                                            }}\n                                                        />\n                                                    }\n                                                </div>\n                                            ))}\n                                        </div>\n                                    }\n                                </TabPanel>\n                                {/* End of the first tab panel that contains posts */}\n                                {/* Begin the tab panel for the \"about\" section */}\n                                <TabPanel \n                                    index={1}\n                                    value={curTab} \n                                >\n                                    <Grid \n                                        item \n                                        xs={12} \n                                    >\n                                        <Typography \n                                            variant='h4' \n                                            component='h4' \n                                            align='center' \n                                        >\n                                            About {geoUser.firstName}\n                                        </Typography>\n                                        <List \n                                            style={{\n                                                margin: 'auto',\n                                                maxWidth: 450,\n                                                marginTop: 20,\n                                            }}\n                                        >\n                                            <ListItem \n                                                alignItems='center' \n                                            >\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center'\n                                                        >\n                                                            Name \n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center'\n                                                        >\n                                                            {geoUser.firstName} {geoUser.lastName}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider />\n                                            <ListItem \n                                                alignItems='center' \n                                            >\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            Email\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <div\n                                                            style={{\n                                                                textAlign: 'center'\n                                                            }}\n                                                        >\n                                                            <Link \n                                                                component='a'\n                                                                color='primary' \n                                                                href={`mailto:${geoUser.email}`}\n                                                                style={{\n                                                                    textAlign: 'center',\n                                                                }}\n                                                            >\n                                                                {geoUser.email}\n                                                            </Link>\n                                                        </div>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider />\n                                            <ListItem \n                                                alignItems='center' \n                                            >\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            Birthdate \n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {geoUser.birthdate}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider />\n                                            <ListItem \n                                                alignItems='center' \n                                            >\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            Profile created on\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center'\n                                                        >\n                                                            {new Date(geoUser.dateCreated).getMonth() + 1}/{new Date(geoUser.dateCreated).getDate()}/{new Date(geoUser.dateCreated).getFullYear()}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider />\n                                            <ListItem \n                                                alignItems='center' \n                                            >\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            Location\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {geoUser.city}, {geoUser.userState}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider />\n                                            <div>\n                                                {geoUser.college !== 'None' &&\n                                                    <ListItem \n                                                        alignItems='center' \n                                                    >\n                                                        <ListItemText \n                                                            primary={\n                                                                <Typography \n                                                                    variant='h6' \n                                                                    component='h6' \n                                                                    align='center' \n                                                                >\n                                                                    College \n                                                                </Typography>\n                                                            }\n                                                            secondary={\n                                                                <Typography \n                                                                    variant='body1' \n                                                                    component='p' \n                                                                    align='center' \n                                                                >\n                                                                    {geoUser.college}\n                                                                </Typography>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                }\n                                            </div>\n                                            <Divider />\n                                            <Typography \n                                                variant='h6' \n                                                component='h6' \n                                                align='center' \n                                            >\n                                                Interests\n                                            </Typography>\n                                            <List>\n                                                {geoUser.interests.map((interest, index) => (\n                                                    <ListItem \n                                                        alignItems='center' \n                                                        key={index} \n                                                    >\n                                                        <ListItemText \n                                                            secondary={\n                                                                <Typography \n                                                                    variant='body1' \n                                                                    component='p'\n                                                                    align='center' \n                                                                >\n                                                                    {interest}\n                                                                </Typography>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                ))}\n                                            </List>\n                                            <Divider />\n                                            {communities.length > 0 &&\n                                                <div>\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                    >\n                                                        Communities\n                                                    </Typography>\n                                                    {communities.map((community, index) => (\n                                                        <Paper \n                                                            key={index} \n                                                            elevation={3} \n                                                            style={{\n                                                                marginBottom: index < communities.length - 1 ? 20 : 0,\n                                                                cursor: 'pointer',\n                                                            }}\n                                                            onClick={e => history.push(`/community/${community.name}`)}\n                                                        >\n                                                            <ListItem \n                                                                alignItems='flex-start' \n                                                            >\n                                                                <ListItemAvatar>\n                                                                    <Avatar \n                                                                        src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                                                                        alt={`${community.name} avatar`}\n                                                                        title={`${community.name} avatar`}\n                                                                    />\n                                                                </ListItemAvatar>\n                                                                <ListItemText \n                                                                    primary={\n                                                                        <div \n                                                                            zeroMinWidth \n                                                                        >\n                                                                            <Typography \n                                                                                variant='h6' \n                                                                                component='h6' \n                                                                                noWrap \n                                                                            >\n                                                                                {community.name}\n                                                                            </Typography>\n                                                                        </div>\n                                                                    }\n                                                                    secondary={\n                                                                        <Typography \n                                                                            variant='body1' \n                                                                            component='p' \n                                                                        >\n                                                                            {community.title}\n                                                                        </Typography>\n                                                                    }\n                                                                />\n                                                            </ListItem>\n                                                        </Paper>\n                                                    ))}\n                                                </div>\n                                            }\n                                            <div>\n                                                {geoUser.twitterHandle &&\n                                                    <div>\n                                                        <ListItem \n                                                            alignItems='start' \n                                                        >\n                                                            <ListItemIcon>\n                                                                <Icon \n                                                                    path={mdiTwitter}\n                                                                    size={1} \n                                                                    title={'Twitter handld'}\n                                                                    aria-label='Twitter handle icon' \n                                                                />\n                                                            </ListItemIcon>\n                                                            <ListItemText \n                                                                primary={\n                                                                    <Link \n                                                                        component='a' \n                                                                        href={`https://www.twitter.com/${geoUser.twitterHandle}`}\n                                                                        color='primary' \n                                                                        rel='external' \n                                                                        title='Twitter handle'\n                                                                    >\n                                                                        {geoUser.twitterHandle}\n                                                                    </Link>\n                                                                }\n                                                            />\n                                                        </ListItem>\n                                                        <Divider />\n                                                    </div>\n                                                }\n                                            </div>\n                                            {geoUser.instaHandle &&\n                                                <div>\n                                                    <ListItem \n                                                        alignItems='start' \n                                                    >\n                                                        <ListItemIcon>\n                                                            <Icon \n                                                                path={mdiInstagram} \n                                                                size={1} \n                                                                title='Instagram handle' \n                                                                aria-label='Instagram handle icon' \n                                                            />\n                                                        </ListItemIcon>\n                                                        <ListItemText \n                                                            primary={\n                                                                <Link \n                                                                    component='a' \n                                                                    color='primary' \n                                                                    href={`https://www.instagram.com/${geoUser.instaHandle}`}\n                                                                    rel='external'\n                                                                    aria-label='Instagram profile link' \n                                                                >\n                                                                    {geoUser.instaHandle}\n                                                                </Link>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                    <Divider />\n                                                </div>\n                                            }\n                                            {geoUser.youtubeChannel &&\n                                                <div>\n                                                    <ListItem \n                                                        alignItems='center' \n                                                    >\n                                                        <ListItemIcon>\n                                                            <Icon \n                                                                path={mdiYoutube} \n                                                                size={1}\n                                                                title='Youtube channel' \n                                                                aria-label='Youtube channel icon'\n                                                            />\n                                                        </ListItemIcon>\n                                                        <ListItemText \n                                                            primary={\n                                                                <Link \n                                                                    component='a' \n                                                                    color='primary' \n                                                                    href={geoUser.youtubeChannel}\n                                                                    rel='external'\n                                                                    aria-label='Youtube channel link' \n                                                                >\n                                                                    Youtube link\n                                                                </Link>\n                                                            }\n                                                        />\n                                                    </ListItem>\n                                                    <Divider />\n                                                </div>\n                                            }\n                                        </List>\n                                    </Grid>\n                                </TabPanel>\n                                {/* End of the tab panel for the \"about\" section */}\n                                {/* Begin the tab panel for the \"events\" section */}\n                                <TabPanel \n                                    index={2} \n                                    value={curTab} \n                                >\n                                    Events \n                                </TabPanel>\n                            </Grid>\n                        </div>\n                    }\n                    {/* End of the profile page view for a user who is not logged in and is viewing a public profile page */}\n                </Grid>\n            }\n            {/* End of conditional rendering if the geoUser object is not null */}\n            {geoUser === null &&\n                <Backdrop \n                    open={true} \n                >\n                    <CircularProgress \n                        color='primary' \n                    />\n                </Backdrop>\n            }\n        </div>\n    );\n}\n\n\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n        posts: state.visitorPostsReducer.posts,\n    }\n}\n\nexport default connect(mapStateToProps)(GeoUser);","/Users/simeonikudabo/Downloads/geocities/src/components/Followers.js",["175"],"import React, { useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        marginTop: 100,\n    },\n    headerContainer: {\n        margin: 'auto',\n    },\n    paper: {\n        margin: 'auto',\n        maxWidth: 450,\n    },\n}));\n\nfunction Followers(props) {\n    const history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        if(props.mainUser === null) {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to view your followers!',\n                'error',\n            );\n            history.push('/');\n        }\n        else {\n            props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme});//Update theme\n        }\n    }, []);\n\n    if(props.mainUser !== null) {\n        return (\n            <Grid \n                container \n                className={classes.root}\n            >\n                <Grid \n                    item \n                    xs={12} \n                >\n                    <Typography \n                        variant='h6' \n                        component='h6' \n                        align='center' \n                    >\n                        Followers \n                    </Typography>\n                </Grid>\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        marginTop: 20,\n                    }}\n                >\n                    <List>\n                        {props.mainUser.followers.map((user, index) => (\n                            <div\n                                key={index} \n                                style={{\n                                    marginBottom: 20,\n                                }}\n                            >\n                                <Paper \n                                    key={index} \n                                    elevation={3} \n                                    className={classes.paper}\n                                >\n                                    <ListItem \n                                        alignItems='flex-start' \n                                        button\n                                        onClick={e => history.push(`/geouser/${user.uniqueUserId}`)}\n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar \n                                                src={`http://192.168.0.17:3001/api/get/avatar/by/id/${user.uniqueUserId}`}\n                                                alt={`${user.username}`}\n                                                title={`${user.username}`}\n                                            />\n                                        </ListItemAvatar>\n                                        <ListItemText \n                                            primary={\n                                                <Typography \n                                                    variant='h6' \n                                                    component='h6' \n                                                >\n                                                    {user.username}\n                                                </Typography>\n                                            }\n                                        />\n                                    </ListItem>\n                                </Paper>\n                            </div>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        <Backdrop \n            open={true} \n        >\n            <CircularProgress \n                color='primary' \n            />\n        </Backdrop>\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(Followers);","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserFollowing.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/ProfilePage.js",["176","177","178","179","180","181","182"],"import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Box from '@material-ui/core/Box';\nimport Icon from '@mdi/react';\nimport { mdiCheckBold, mdiPencil, mdiClose, mdiCamera, mdiVideo, mdiTwitter, mdiInstagram, mdiYoutube } from '@mdi/js';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Paper from '@material-ui/core/Paper';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UserPostsCard from './UserPostsCard';\nimport Resizer from 'react-image-file-resizer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Divider from '@material-ui/core/Divider';\nimport Link from '@material-ui/core/Link';\n\nfunction TabPanel(props) {\n    //This component will serve as the panel for each individual tab\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div \n            hidden={value !== index}\n            role='tabpanel' \n            id={`tabpanel-${index}`}\n            aria-label={`tab-${index}`}\n            aria-labelledby={`tab-${index}`}\n            {...other}\n            style={{\n                marginTop: 100,\n            }}\n        >\n            {value === index && \n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    {children}\n                </Grid>\n            }\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    index: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    };\n}\n\n\n\nfunction ProfilePage(props) {\n    const history = useHistory(); //The history API to access the brower history. \n    if(props.user === null) {\n        history.push('/');\n    }\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            marginTop: 100,\n        },\n        profileAvatar: {\n            height: 128,\n            width: 128,\n            margin: 'auto',\n        },\n        profileAvatarLg: {\n            height: 168,\n            width: 168,\n            margin: 'auto',\n        },\n        usernameDisplay: {\n            marginTop: 40,\n            margin: 'auto',\n        },\n        statsInfo: {\n            marginTop: 40,\n            textAlign: 'center',\n        },\n        paper: {\n            backgroundColor: props.user ? props.user.profileTheme : 'rgb(0, 20, 60)',\n            color: 'rgb(255, 255, 255)',\n            marginTop: 40,\n        },\n        input: {\n            display: 'none',\n        },\n    }));\n    const classes = useStyles(); //Custom styling.\n    const [openDialog, setOpenDialog] = useState(false); //Variable and setter to open and close dialog.\n    const [curTab, setTab] = useState(0); //Variable and setter to control proper tab.\n    const [curTab2, setTab2] = useState(0);\n    const [textPost, setTextPost] = useState(''); //Variable and setter for text post control\n    const [posting, setPosting] = useState(false); //Hides dialog AppBar and tabs when a post is posting to the server\n    const [posts, setPosts] = useState([]); //Personal profile posts for the user. \n    const [uploadPhoto, setUploadPhoto] = useState(null); // Variable and setter for a photo to be uploaded\n    const [photoUploading, setPhotoUploading] = useState(null); //Variable and setter to disable button while photo is uploading.\n    const [photoCaption, setPhotoCaption] = useState(''); //Variable and setter for a caption associated with a photo upload.\n    const [uploadVideo, setUploadVideo] = useState(null); //Variable and setter for a video to be uploaded \n    const [videoUploading, setVideoUploading] = useState(null); //Variable and setter to disable button while video is uploading. \n    const [videoCaption, setVideoCaption] = useState(null); //Variable and setter for the caption for a video post. \n    const [user, setUser] = useState(props.user);\n    const [communities, setCommunities] = useState([]); //This will be an array of communities a user belongs to.\n    useEffect(() => {\n        //First, if the user doesn't exist in state, re-route to the login page.\n        if(props.user === null) {\n            history.push('/');\n            return;\n        }\n        else if(props.user) {\n            //Else, we make an axios call to request the user (an updated version of the user)\n            //props.dispatch({type: 'ThemeChange', payload: props.user.profileTheme});\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/grab/user/${props.user.uniqueUserId}`,\n            }).then(response => {\n                if(response.data.user) {\n                    props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                    props.dispatch({type: 'ThemeChange', payload: response.data.user.profileTheme});\n                    props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                    setCommunities(response.data.communities);\n                }\n                else if(response.data === 'user not found') {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find your profile!',\n                        'error',\n                    );\n                    history.push('/');\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error retreiving your profile. Please try again!',\n                    'error',\n                );\n                history.push('/');\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        //If the user is ever null, get back to the log in page. \n        if(user === null) {\n            history.push('/');\n        }\n    }, [user]);\n\n    function handleTextPost() {\n        //Function that handles submitting a text post to the server. \n        setPosting(true);\n        if(!textPost) {\n            swal(\n                'Uh Oh!',\n                'You must enter some text',\n                'error',\n            );\n\n            setPosting(false);\n        }\n        else {\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let date = new Date();\n            let year = date.getFullYear();\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n\n            let data = JSON.stringify({\n                uniquePostId: Date.now() + props.user.uniqueUserId + props.user.username,\n                uniqueUserId: props.user.uniqueUserId,\n                username: props.user.username,\n                type: 'text', \n                context: 'personal',\n                text: textPost,\n                dateString: `${month} ${day}, ${year}`,\n                link: '',\n                title: '',\n                community: '',\n                caption: '',\n                src: '',\n                privacy: props.user.profilePrivacy,\n            });\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/upload/text/link/post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    swal(\n                        'Great!',\n                        'Post was successfully uploaded!',\n                        'success',\n                    );\n                    setPosting(false);\n                    setTextPost('');\n                    setOpenDialog(false);\n                    console.log(response.data.posts);\n                    //setPosts(posts => [response.data.posts[0], ...posts]);\n                    //Maybe altering the code to just push a new value to the array will work?\n                    props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that post! Please try again.',\n                        'error',\n                    )\n                    setPosting(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that post! Please try again.',\n                    'error',\n                );\n                setPosting(false);\n            });\n        }\n    }\n\n    function resizerFunction(file) {\n        //This is a wrapper for the file resizer \n        return new Promise(resolve => {\n            Resizer.imageFileResizer(\n                file,\n                600,\n                600,\n                'JPEG',\n                100,\n                0,\n                uri => {\n                    resolve(uri);\n                },\n                'blob',\n            );\n        });\n    }\n\n    async function handlePhotoChange(e) {\n        let file = e.target.files[0];\n        let resizedPhoto = await resizerFunction(file);\n        setUploadPhoto(resizedPhoto);\n    }\n\n    function handlePhotoUpload() {\n        //Function that will handle sending an uploaded photo to the server after resizing it.\n        setPhotoUploading(true);\n\n        if(!uploadPhoto) {\n            swal(\n                'Uh Oh!',\n                'You must select a photo to upload!',\n                'error',\n            );\n            setPhotoUploading(false);\n        }\n        else {\n            let data = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[data.getMonth()];\n            let day = data.getDate();\n            let year = data.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let fd = new FormData();\n            fd.append('photo', uploadPhoto, 'photo.jpg');\n            fd.append('caption', photoCaption);\n            fd.append('uniqueUserId', props.user.uniqueUserId);\n            fd.append('uniquePostId', Date.now() + props.user.username + 'photoupload' + props.user.uniqueUserId);\n            fd.append('username', props.user.username);\n            fd.append('dateString', dateString);\n            fd.append('type', 'photo');\n            fd.append('context', 'personal');\n            fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.user.username}photoupload${props.user.uniqueUserId}`);\n            fd.append('community', '');\n            fd.append('title', '');\n            fd.append('privacy', props.user.profilePrivacy);\n            fd.append('text', '');\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/upload/photo',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded photo!',\n                        'success',\n                    );\n                    setPhotoCaption('');\n                    setUploadPhoto(null);\n                    setOpenDialog(false);\n                    setPhotoUploading(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that photo!',\n                        'error',\n                    );\n                    setPhotoUploading(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that photo!',\n                    'error',\n                );\n                setPhotoUploading(false);\n            });\n        }\n    }\n\n    function handleVideoChange(e) {\n        //This function will handle setting the uploadVideo variable to the valua of the file. \n        setUploadVideo(e.target.files[0]);\n    }\n\n    function handleVideoUpload() {\n        //Function that will handle sending an uploaded video to the server.\n        setVideoUploading(true);\n\n        if(!uploadVideo) {\n            swal(\n                'Uh Oh!',\n                'You must select a video to upload!',\n                'error',\n            );\n            setVideoUploading(false);\n        }\n        else {\n            let data = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[data.getMonth()];\n            let day = data.getDate();\n            let year = data.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let ext = uploadVideo.name.split('.').pop().toString(); //This will get the extension name of the video \n            ext = 'video.' + ext;\n            let fd = new FormData();\n            fd.append('photo', uploadVideo, ext); //Keep the name \"photo\" for the server upload although it is technically a video!\n            fd.append('caption', videoCaption);\n            fd.append('uniqueUserId', props.user.uniqueUserId);\n            fd.append('uniquePostId', Date.now() + props.user.username + 'videoupload' + props.user.uniqueUserId);\n            fd.append('username', props.user.username);\n            fd.append('dateString', dateString);\n            fd.append('type', 'video');\n            fd.append('context', 'personal');\n            fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.user.username}videoupload${props.user.uniqueUserId}`);\n            fd.append('community', '');\n            fd.append('title', '');\n            fd.append('privacy', props.user.profilePrivacy);\n            fd.append('text', '');\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/upload/photo',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded video!',\n                        'success',\n                    );\n                    setVideoCaption('');\n                    setUploadVideo(null);\n                    setOpenDialog(false);\n                    setVideoUploading(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that video!',\n                        'error',\n                    );\n                    setVideoUploading(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that video!',\n                    'error',\n                );\n                setVideoUploading(false);\n            });\n        }\n    }\n\n    function findFollowers() {\n        //This function will enable us to go to a page and find all of a users followers. \n        history.push('/followers');\n    }\n\n    function findFollowing() {\n        //This function will enable us to go to a page and find all users a user is following. \n        history.push('/following');\n    }\n\n    if(props.user) {\n        return (\n            <Grid \n                className={classes.root}\n                container \n            >\n                <Grid \n                    item \n                    container \n                    xs={12}\n                >\n                    <Grid \n                        item \n                        xs={12}\n                    >\n                        {/* Below is the avatar for xs and sm screens at 128x128 pixels */}\n                        <Hidden \n                            mdUp \n                        >\n                            <Avatar \n                                className={classes.profileAvatar} \n                                src={`http://192.168.0.17:3001/api/get-photo/${props.user.avatar}`} \n                                title={`${props.user.username}`} \n                                alt={`${props.user.username}`} \n                            />\n                        </Hidden>\n                        {/* Below will be the avatar for medium screen and up devices */ }\n                        <Hidden \n                            smDown \n                        >\n                            <Avatar \n                                className={classes.profileAvatarLg}\n                                src={`http://192.168.0.17:3001/api/get-photo/${props.user.avatar}`} \n                                title={`${props.user.username}`} \n                                alt={`${props.user.username}`} \n                            />\n                        </Hidden>\n                    </Grid>\n                </Grid>\n                <Grid \n                    item \n                    xs={12} \n                >\n                    <Typography \n                        variant='h4' \n                        component='h4' \n                        align='center'\n                        className={classes.usernameDisplay} \n                    >\n                        {props.user.username}\n                    </Typography>\n                    {props.user.isVerified &&\n                        <Typography \n                            variant='body1'\n                            component='p' \n                            style={{\n                                margin: 'auto',\n                                textAlign:'center',\n                                marginTop: 10,\n                            }}\n                        >\n                            <Icon \n                                path={mdiCheckBold} \n                                size={1} \n                                title='Verified' \n                                style={{\n                                    color: 'rgb(0, 128, 0)'\n                                }}\n                            /> Verified \n                        </Typography>\n                    }\n                </Grid>\n                {/* Below will be the Grid to display Followers, Following, and Karma */}\n                <Grid \n                    item \n                    container \n                    xs={12} \n                    spacing={1}\n                    className={classes.statsInfo}\n                >\n                    <Grid \n                        item \n                        xs={4} \n                        style={{\n                            cursor: 'pointer',\n                        }}\n                        onClick={props.user.followers.length > 0 ? findFollowers: e => console.log('No Followers')}\n                    >\n                        <Typography \n                            variant='h6' \n                            component='h6' \n                        >\n                            Followers \n                        </Typography>\n                        <Typography \n                            variant='body1' \n                            component='p'\n                        >\n                            {props.user.followers.length}\n                        </Typography>\n                    </Grid>\n                    <Grid \n                        item \n                        xs={4} \n                        style={{\n                            cursor: 'pointer'\n                        }}\n                        onClick={props.user.following.length > 0 ? findFollowing : e => console.log('Not following any users')}\n                    >\n                        <Typography \n                            variant='h6' \n                            component='h6' \n                        >\n                            Following \n                        </Typography>\n                        <Typography \n                            variant='body1' \n                            component='p' \n                        >\n                            {props.user.following.length}\n                        </Typography>\n                    </Grid>\n                    <Grid \n                        item \n                        xs={4} \n                    >\n                        <Typography \n                            variant='h6' \n                            component='h6' \n                        >\n                            Karma \n                        </Typography>\n                        <Typography \n                            variant='body1' \n                            component='p' \n                        >\n                            {props.user.karma}\n                        </Typography>\n                    </Grid>\n                </Grid>\n                {/* End of the Grid for Followers, Following, and Karma */}\n                {/* Below is the Grid to display the users' first and last name */}\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    <Typography \n                        variant='body1' \n                        component='p' \n                        style={{\n                            fontWeight: 'bold',\n                            marginTop: 30,\n                        }}\n                    >\n                        {props.user.firstName} {props.user.lastName}\n                    </Typography>\n                </Grid>\n                {/* End of the Grid to display the users first and last name */}\n                {/* Below is the Grid that stores the users BIO */}\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        marginTop: 40,\n                        textAlign: 'center',\n                    }}\n                >\n                    <Typography \n                        variant='body2' \n                        component='small' \n                        justify='left'\n                        align='left'\n                    >\n                        {props.user.bio}\n                    </Typography>\n                </Grid>\n                {/* This is the end of the Grid for the bio.*/ }\n                {/* Below is the grid to display the Button that opens the Dialog for the form for posts */}\n                <Grid \n                    item \n                    xs={12}\n                    style={{\n                        textAlign: 'center',\n                        marginTop: 40,\n                    }}\n                >\n                    <Button \n                        color='primary' \n                        variant='outlined'  \n                        size='large'\n                        onClick={() => setOpenDialog(true)}\n                        startIcon={\n                            <Icon \n                                path={mdiPencil} \n                                size={1} \n                                title='Post Icon' \n                            />\n                        }\n                    >\n                        Post \n                    </Button>\n                </Grid>\n                {/* The Grid below will store the Dialog and its' content */}\n                <Grid \n                    item \n                    xs={12} \n                >\n                    <Dialog \n                        open={openDialog} \n                        fullScreen\n                    >\n                        <DialogContent>\n                            <AppBar \n                                color='primary'\n                                hidden={posting}\n                            >\n                                <Icon \n                                    path={mdiClose} \n                                    size={1} \n                                    title='Dialog close' \n                                    style={{\n                                        cursor: 'pointer'\n                                    }}\n                                    onClick={() => setOpenDialog(false)}\n                                />\n                                <Tabs \n                                    value={curTab}\n                                    onChange={(e, newVal) => setTab(newVal)} \n                                    centered\n                                >\n                                    <Tab \n                                        {...a11yProps(0)} \n                                        label='Text' \n                                        disabled={posting}\n                                    />\n                                    <Tab \n                                        {...a11yProps(1)} \n                                        label='Photo' \n                                        disabled={posting}\n                                    />\n                                    <Tab \n                                        {...a11yProps(2)}\n                                        label='Video' \n                                        disabled={posting}\n                                    />\n                                </Tabs>\n                            </AppBar>\n                            <TabPanel \n                                index={0}\n                                value={curTab}\n                            >\n                                <TextField \n                                    label='Text Post' \n                                    placeholder='Post a status!' \n                                    color='primary'\n                                    variant='outlined' \n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    aria-label='Text Post Field' \n                                    rows={4} \n                                    onChange={e => setTextPost(e.target.value)}\n                                    value={textPost} \n                                    helperText='Enter a status update!' \n                                    multiline\n                                    fullWidth \n                                    disabled={posting}\n                                />\n                                <Button \n                                    style={{\n                                        marginTop: 20,\n                                    }}\n                                    color='primary' \n                                    variant='outlined' \n                                    disabled={posting}\n                                    onClick={handleTextPost}\n                                >\n                                    {posting ? <CircularProgress /> : 'post'}\n                                </Button>\n                            </TabPanel>\n                            <TabPanel \n                                index={1} \n                                value={curTab} \n                            >\n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                >\n                                    Post a photo\n                                </Typography>\n                                <label \n                                    html-for='photoPost' \n                                >\n                                    <input \n                                        className={classes.input}\n                                        type='file'\n                                        accept='image/jpg, image/jpeg, image/png' \n                                        id='photoPost'\n                                        name='photoPost' \n                                        onChange={handlePhotoChange} \n                                        required \n                                    />\n                                    <Button \n                                        variant='contained' \n                                        color='primary' \n                                        component='span' \n                                        aria-label='Photo picker button'\n                                    >\n                                        <Icon \n                                            path={mdiCamera} \n                                            size={1} \n                                            title='Photo upload icon' \n                                            aria-label='Photo upload icon' \n                                        />\n                                    </Button>\n                                </label>\n                                <br/>\n                                <TextField \n                                    label='Caption'\n                                    placeholder='Enter a caption for your photo' \n                                    variant='outlined' \n                                    color='primary' \n                                    value={photoCaption} \n                                    onChange={e => setPhotoCaption(e.target.value)} \n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    rows={4}\n                                    multiline\n                                    required\n                                    style={{\n                                        marginTop: 40,\n                                    }}\n                                    fullWidth\n                                />\n                                <br/>\n                                <Button \n                                    style={{\n                                        marginTop: 30,\n                                    }}\n                                    color='primary' \n                                    variant='outlined' \n                                    onClick={handlePhotoUpload}\n                                    disabled={photoUploading}\n                                >\n                                    {photoUploading ? <CircularProgress color='primary' /> : 'Upload Photo'}\n                                </Button>\n                            </TabPanel>\n                            <TabPanel \n                                index={2} \n                                value={curTab} \n                            >\n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                >\n                                    Post a video\n                                </Typography>\n                                <label \n                                    html-for='videoPost' \n                                >\n                                    <input \n                                        className={classes.input}\n                                        type='file'\n                                        accept='video/mp4, video/mov'\n                                        id='videoPost'\n                                        name='videoPost' \n                                        onChange={handleVideoChange} \n                                        required \n                                    />\n                                    <Button \n                                        variant='contained' \n                                        color='primary' \n                                        component='span' \n                                        aria-label='Video picker button'\n                                    >\n                                        <Icon \n                                            path={mdiVideo} \n                                            size={1} \n                                            title='Video upload icon' \n                                            aria-label='Video upload icon' \n                                        />\n                                    </Button>\n                                </label>\n                                <br/>\n                                <TextField \n                                    label='Caption'\n                                    placeholder='Enter a caption for your video' \n                                    variant='outlined' \n                                    color='primary' \n                                    value={videoCaption} \n                                    onChange={e => setVideoCaption(e.target.value)} \n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    rows={4}\n                                    multiline\n                                    required\n                                    style={{\n                                        marginTop: 40,\n                                    }}\n                                    fullWidth\n                                />\n                                <br/>\n                                <Button \n                                    style={{\n                                        marginTop: 30,\n                                    }}\n                                    color='primary' \n                                    variant='outlined' \n                                    onClick={handleVideoUpload}\n                                    disabled={videoUploading}\n                                >\n                                    {videoUploading ? <CircularProgress color='primary' /> : 'Upload Video'}\n                                </Button>\n                            </TabPanel>\n                        </DialogContent>\n                    </Dialog>\n                </Grid>\n                {/* Below will begin the tab panels for the posts, about, and events tabs */}\n                <Grid \n                    item \n                    xs={12} \n                >\n                    <Paper \n                        className={classes.paper}\n                    >\n                        <Tabs \n                            value={curTab2} \n                            onChange={(e, newVal) => setTab2(newVal)}\n                            centered\n                        >\n                            <Tab \n                                label='Posts' \n                                {...a11yProps(0)} \n                            />\n                            <Tab \n                                label='About' \n                                {...a11yProps(1)} \n                            />\n                            <Tab \n                                label='Events' \n                                {...a11yProps(2)} \n                            />\n                        </Tabs>\n                    </Paper>\n                    <Grid \n                        item \n                        xs={12}\n                    />\n                    <TabPanel \n                        value={0} \n                        index={curTab2} \n                    >\n                        {props.posts.length < 1 && \n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                No posts \n                            </Typography>\n                        }\n                        {props.posts.length > 0 && \n                            <div>\n                                {props.posts.map((post, index) => (\n                                    <div \n                                        style={{\n                                            textAlign: 'left',\n                                        }}\n                                        key={index}\n                                    >\n                                        <UserPostsCard \n                                            user={props.user} \n                                            post={post}\n                                            id={post.uniquePostId}\n                                        />\n                                        {index < props.posts.length - 1 &&\n                                            <div \n                                                style={{\n                                                    marginBottom: 20,\n                                                }}\n                                            />\n                                        }\n                                    </div>\n                                ))}\n                            </div>\n                        }\n                    </TabPanel>\n                    {/*End of the TabPanel for posts. Begin the TabPanel for the \"about\" section of the page */}\n                    <TabPanel \n                        value={1} \n                        index={curTab2} \n                    >\n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            <Typography \n                                variant='h4' \n                                component='h4' \n                                align='center' \n                            >\n                                About {props.user.firstName}\n                            </Typography>\n                            <List \n                                style={{\n                                    margin: 'auto',\n                                    maxWidth: 450,\n                                    marginTop: 20,\n                                }}\n                            >\n                                <ListItem \n                                    alignItems='center' \n                                >\n                                    <ListItemText \n                                        primary={\n                                            <Typography \n                                                variant='h6' \n                                                component='h6' \n                                                align='center'\n                                            >\n                                                Name \n                                            </Typography>\n                                        }\n                                        secondary={\n                                            <Typography \n                                                variant='body1' \n                                                component='p' \n                                                align='center'\n                                            >\n                                                {props.user.firstName} {props.user.lastName}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                                <Divider />\n                                <ListItem \n                                    alignItems='center' \n                                >\n                                    <ListItemText \n                                        primary={\n                                            <Typography \n                                                variant='h6' \n                                                component='h6' \n                                                align='center' \n                                            >\n                                                Email\n                                            </Typography>\n                                        }\n                                        secondary={\n                                            <div\n                                                style={{\n                                                    textAlign: 'center'\n                                                }}\n                                            >\n                                                <Link \n                                                    component='a'\n                                                    color='primary' \n                                                    href={`mailto:${props.user.email}`}\n                                                    style={{\n                                                        textAlign: 'center',\n                                                    }}\n                                                >\n                                                    {props.user.email}\n                                                </Link>\n                                            </div>\n                                        }\n                                    />\n                                </ListItem>\n                                <Divider />\n                                <ListItem \n                                    alignItems='center' \n                                >\n                                    <ListItemText \n                                        primary={\n                                            <Typography \n                                                variant='h6' \n                                                component='h6' \n                                                align='center' \n                                            >\n                                                Birthdate \n                                            </Typography>\n                                        }\n                                        secondary={\n                                            <Typography \n                                                variant='body1' \n                                                component='p' \n                                                align='center' \n                                            >\n                                                {props.user.birthdate}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                                <Divider />\n                                <ListItem \n                                    alignItems='center' \n                                >\n                                    <ListItemText \n                                        primary={\n                                            <Typography \n                                                variant='h6' \n                                                component='h6' \n                                                align='center' \n                                            >\n                                                Profile created on\n                                            </Typography>\n                                        }\n                                        secondary={\n                                            <Typography \n                                                variant='body1' \n                                                component='p' \n                                                align='center'\n                                            >\n                                                {new Date(props.user.dateCreated).getMonth() + 1}/{new Date(props.user.dateCreated).getDate()}/{new Date(props.user.dateCreated).getFullYear()}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                                <Divider />\n                                <ListItem \n                                    alignItems='center' \n                                >\n                                    <ListItemText \n                                        primary={\n                                            <Typography \n                                                variant='h6' \n                                                component='h6' \n                                                align='center' \n                                            >\n                                                Location\n                                            </Typography>\n                                        }\n                                        secondary={\n                                            <Typography \n                                                variant='body1' \n                                                component='p' \n                                                align='center' \n                                            >\n                                                {props.user.city}, {props.user.userState}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                                <Divider />\n                                <div>\n                                    {props.user.college !== 'None' &&\n                                        <ListItem \n                                            alignItems='center' \n                                        >\n                                            <ListItemText \n                                                primary={\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                        align='center' \n                                                    >\n                                                        College \n                                                    </Typography>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        variant='body1' \n                                                        component='p' \n                                                        align='center' \n                                                    >\n                                                        {props.user.college}\n                                                    </Typography>\n                                                }\n                                            />\n                                        </ListItem>\n                                    }\n                                </div>\n                                <Divider />\n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                    align='center' \n                                >\n                                    Interests\n                                </Typography>\n                                <List>\n                                    {props.user.interests.map((interest, index) => (\n                                        <ListItem \n                                            alignItems='center' \n                                            key={index} \n                                        >\n                                            <ListItemText \n                                                secondary={\n                                                    <Typography \n                                                        variant='body1' \n                                                        component='p'\n                                                        align='center' \n                                                    >\n                                                        {interest}\n                                                    </Typography>\n                                                }\n                                            />\n                                        </ListItem>\n                                    ))}\n                                </List>\n                                <Divider />\n                                {communities.length > 0 &&\n                                    <div>\n                                        <Typography \n                                            variant='h6' \n                                            component='h6' \n                                        >\n                                            Communities\n                                        </Typography>\n                                        {communities.map((community, index) => (\n                                            <Paper\n                                                elevation={3}\n                                                key={index} \n                                                style={{\n                                                    marginBottom: index < communities.length - 1 ? 20 : 0,\n                                                    cursor: 'pointer',\n                                                }}\n                                                onClick={e => history.push(`/community/${community.name}`)}\n                                            >\n                                                <ListItem \n                                                    alignItems='flex-start' \n                                                >\n                                                    <ListItemAvatar>\n                                                        <Avatar \n                                                            src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                                                            alt={`${community.name} avatar`}\n                                                            title={`${community.name} avatar`}\n                                                        />\n                                                    </ListItemAvatar>\n                                                    <ListItemText \n                                                        primary={\n                                                            <Grid \n                                                                item\n                                                                xs={12}\n                                                                zeroMinWidth \n                                                            >\n                                                                <Typography \n                                                                    variant='h6' \n                                                                    component='h6' \n                                                                    noWrap \n                                                                >\n                                                                    {community.name}\n                                                                </Typography>\n                                                            </Grid>\n                                                        }\n                                                        secondary={\n                                                            <Typography \n                                                                variant='body1' \n                                                                component='p' \n                                                            >\n                                                                {community.title}\n                                                            </Typography>\n                                                        }\n                                                    />\n                                                </ListItem>\n                                            </Paper>\n                                        ))}\n                                    </div>\n                                }\n                                <Divider />\n                                <div\n                                    style={{\n                                        marginTop: 10,\n                                    }}\n                                >\n                                    {props.user.twitterHandle &&\n                                        <div>\n                                            <ListItem \n                                                alignItems='start' \n                                            >\n                                                <ListItemIcon>\n                                                    <Icon \n                                                        path={mdiTwitter}\n                                                        size={1} \n                                                        title={'Twitter handle'}\n                                                        aria-label='Twitter handle icon' \n                                                    />\n                                                </ListItemIcon>\n                                                <ListItemText \n                                                    primary={\n                                                        <Link \n                                                            component='a' \n                                                            href={`https://www.twitter.com/${props.user.twitterHandle}`}\n                                                            color='primary' \n                                                            rel='external' \n                                                            title='Twitter handle'\n                                                        >\n                                                            {props.user.twitterHandle}\n                                                        </Link>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider />\n                                        </div>\n                                    }\n                                </div>\n                                {props.user.instaHandle &&\n                                    <div>\n                                        <ListItem \n                                            alignItems='start' \n                                        >\n                                            <ListItemIcon>\n                                                <Icon \n                                                    path={mdiInstagram} \n                                                    size={1} \n                                                    title='Instagram handle' \n                                                    aria-label='Instagram handle icon' \n                                                />\n                                            </ListItemIcon>\n                                            <ListItemText \n                                                primary={\n                                                    <Link \n                                                        component='a' \n                                                        color='primary' \n                                                        href={`https://www.instagram.com/${props.user.instaHandle}`}\n                                                        rel='external'\n                                                        aria-label='Instagram profile link' \n                                                    >\n                                                        {props.user.instaHandle}\n                                                    </Link>\n                                                }\n                                            />\n                                        </ListItem>\n                                        <Divider />\n                                    </div>\n                                }\n                                {props.user.youtubeChannel &&\n                                    <div>\n                                        <ListItem \n                                            alignItems='center' \n                                        >\n                                            <ListItemIcon>\n                                                <Icon \n                                                    path={mdiYoutube} \n                                                    size={1}\n                                                    title='Youtube channel' \n                                                    aria-label='Youtube channel icon'\n                                                />\n                                            </ListItemIcon>\n                                            <ListItemText \n                                                primary={\n                                                    <Link \n                                                        component='a' \n                                                        color='primary' \n                                                        href={props.user.youtubeChannel}\n                                                        rel='external'\n                                                        aria-label='Youtube channel link' \n                                                    >\n                                                        Youtube link\n                                                    </Link>\n                                                }\n                                            />\n                                        </ListItem>\n                                        <Divider />\n                                    </div>\n                                }\n                            </List>\n                        </Grid>\n                    </TabPanel>\n                    <TabPanel \n                        value={2} \n                        index={curTab2} \n                    >\n                        Events\n                    </TabPanel>\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        return (\n            <Backdrop\n                open={true} \n            >\n                <CircularProgress \n                    color='primary' \n                />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n        posts: state.userPostsReducer.posts,\n    };\n}\n\nexport default connect(mapStateToProps)(ProfilePage);","/Users/simeonikudabo/Downloads/geocities/src/components/Following.js",["183"],"import React, { useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        marginTop: 100,\n    },\n    headerContainer: {\n        margin: 'auto',\n    },\n    paper: {\n        margin: 'auto',\n        maxWidth: 450,\n    },\n}));\n\nfunction Following(props) {\n    const history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        if(props.mainUser === null) {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to view who you are following!',\n                'error',\n            );\n            history.push('/');\n        }\n        else {\n            props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme});//Update theme\n        }\n    }, []);\n\n    if(props.mainUser !== null) {\n        return (\n            <Grid \n                container \n                className={classes.root}\n            >\n                <Grid \n                    item \n                    xs={12} \n                >\n                    <Typography \n                        variant='h6' \n                        component='h6' \n                        align='center' \n                    >\n                        Following\n                    </Typography>\n                </Grid>\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        marginTop: 20,\n                    }}\n                >\n                    <List>\n                        {props.mainUser.following.map((user, index) => (\n                            <div\n                                key={index} \n                                style={{\n                                    marginBottom: 20,\n                                }}\n                            >\n                                <Paper \n                                    key={index} \n                                    elevation={3} \n                                    className={classes.paper}\n                                >\n                                    <ListItem \n                                        alignItems='flex-start' \n                                        button\n                                        onClick={e => history.push(`/geouser/${user.uniqueUserId}`)}\n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar \n                                                src={`http://192.168.0.17:3001/api/get/avatar/by/id/${user.uniqueUserId}`}\n                                                alt={`${user.username}`}\n                                                title={`${user.username}`}\n                                            />\n                                        </ListItemAvatar>\n                                        <ListItemText \n                                            primary={\n                                                <Typography \n                                                    variant='h6' \n                                                    component='h6' \n                                                >\n                                                    {user.username}\n                                                </Typography>\n                                            }\n                                        />\n                                    </ListItem>\n                                </Paper>\n                            </div>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        <Backdrop \n            open={true} \n        >\n            <CircularProgress \n                color='primary' \n            />\n        </Backdrop>\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(Following);","/Users/simeonikudabo/Downloads/geocities/src/components/Signup.js",["184","185","186","187","188"],"import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport TextField from '@material-ui/core/TextField';\nimport FnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@mdi/react';\nimport { mdiTwitter, mdiInstagram, mdiYoutube } from '@mdi/js';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport LockIcon from '@material-ui/icons/Lock';\nimport EmailIcon from '@material-ui/icons/Email';\nimport CameraIcon from '@material-ui/icons/CameraAlt';\nimport ChevronDownIcon from '@material-ui/icons/ExpandMore';\nimport swal from 'sweetalert';\nimport Resizer from 'react-image-file-resizer';\nimport { SwatchesPicker } from 'react-color';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nconst myCities = [\"Abbeville\",\"Aberdeen\",\"Abilene\",\"Abingdon\",\"Abington\",\"Acoma\",\"Ada\",\"Adams\",\"Adrian\",\"Aiken\",\"Ajo\",\"Akron\",\"Alameda\",\"Alamogordo\",\"Alamosa\",\"Albany\",\"Albert Lea\",\"Albuquerque\",\"Alcoa\",\"Alexander City\",\"Alexandria\",\"Alhambra\",\"Aliquippa\",\"Allentown\",\"Alliance\",\"Alma\",\"Alpine\",\"Alta\",\"Alton\",\"Altoona\",\"Altus\",\"Alva\",\"Amana Colonies\",\"Amarillo\",\"Ambridge\",\"American Fork\",\"Americus\",\"Ames\",\"Amesbury\",\"Amherst\",\"Amsterdam\",\"Anaconda\",\"Anacortes\",\"Anadarko\",\"Anaheim\",\"Anchorage\",\"Andalusia\",\"Anderson\",\"Andersonville\",\"Andover\",\"Ann Arbor\",\"Annapolis\",\"Anniston\",\"Ansonia\",\"Antioch\",\"Apalachicola\",\"Appleton\",\"Arcadia\",\"Ardmore\",\"Arkadelphia\",\"Arkansas City\",\"Arkansas Post\",\"Arlington\",\"Arlington Heights\",\"Artesia\",\"Arthur\",\"Asbury Park\",\"Asheboro\",\"Asheville\",\"Ashland\",\"Ashtabula\",\"Aspen\",\"Astoria\",\"Atchison\",\"Athens\",\"Athol\",\"Atlanta\",\"Atlantic City\",\"Atmore\",\"Attleboro\",\"Auburn\",\"Augusta\",\"Aurora\",\"Austin\",\"Avondale\",\"Babylon\",\"Bainbridge\",\"Baker City\",\"Bakersfield\",\"Baltimore\",\"Bangor\",\"Bar Harbor\",\"Baraboo\",\"Barberton\",\"Barbourville\",\"Bardstown\",\"Barnstable\",\"Barre\",\"Barrington\",\"Barstow\",\"Bartlesville\",\"Bartow\",\"Bastrop\",\"Batavia\",\"Batesville\",\"Bath\",\"Baton Rouge\",\"Battle Creek\",\"Bay City\",\"Bay Saint Louis\",\"Bayonne\",\"Baytown\",\"Beacon\",\"Beatrice\",\"Beaufort\",\"Beaumont\",\"Beaverton\",\"Beckley\",\"Bedford\",\"Belen\",\"Belfast\",\"Belle Fourche\",\"Belle Glade\",\"Bellefontaine\",\"Belleville\",\"Bellevue\",\"Bellingham\",\"Bellows Falls\",\"Belmont\",\"Beloit\",\"Belvidere\",\"Bemidji\",\"Bend\",\"Bennington\",\"Benton\",\"Benton Harbor\",\"Berea\",\"Berkeley\",\"Berlin\",\"Bessemer\",\"Bethany\",\"Bethesda-Chevy Chase\",\"Bethlehem\",\"Beverly\",\"Beverly Hills\",\"Biddeford\",\"Big Spring\",\"Billings\",\"Biloxi\",\"Binghamton\",\"Birmingham\",\"Bisbee\",\"Bismarck\",\"Blackfoot\",\"Blairsville\",\"Bloomfield\",\"Bloomfield Hills\",\"Bloomington\",\"Bloomsburg\",\"Bluefield\",\"Blytheville\",\"Boca Raton\",\"Bogalusa\",\"Boise\",\"Bonners Ferry\",\"Boone\",\"Boonesborough\",\"Boonville\",\"Boothbay Harbor\",\"Bordentown\",\"Borger\",\"Bossier City\",\"Boston\",\"Boulder\",\"Boulder City\",\"Bound Brook\",\"Bountiful\",\"Bourne\",\"Bowie\",\"Bowling Green\",\"Boys Town\",\"Bozeman\",\"Bradenton\",\"Bradford\",\"Brainerd\",\"Braintree\",\"Branford\",\"Branson\",\"Brattleboro\",\"Brea\",\"Breckenridge\",\"Bremerton\",\"Bridgeport\",\"Bridgeton\",\"Brigham City\",\"Brighton\",\"Bristol\",\"Brockton\",\"Bronx\",\"Brookfield\",\"Brookings\",\"Brookline\",\"Brooklyn\",\"Brownsville\",\"Brunswick\",\"Bryan\",\"Buckhannon\",\"Buena Park\",\"Buffalo\",\"Burbank\",\"Burlington\",\"Burns\",\"Butte\",\"Cadillac\",\"Cahokia\",\"Cairo\",\"Calais\",\"Caldwell\",\"Calexico\",\"Calhoun\",\"Calistoga\",\"Calumet City\",\"Cambridge\",\"Camden\",\"Campbellsville\",\"Canon City\",\"Canton\",\"Canyon\",\"Cape Coral\",\"Cape Girardeau\",\"Cape May\",\"Carbondale\",\"Caribou\",\"Carlinville\",\"Carlisle\",\"Carlsbad\",\"Carmel\",\"Carrollton\",\"Carson City\",\"Carthage\",\"Casa Grande\",\"Casper\",\"Castine\",\"Catonsville\",\"Cedar City\",\"Cedar Falls\",\"Cedar Rapids\",\"Central City\",\"Central Falls\",\"Centralia\",\"Chadron\",\"Chambersburg\",\"Champaign\",\"Chandler\",\"Chanute\",\"Chapel Hill\",\"Charles City\",\"Charles Town\",\"Charleston\",\"Charlestown\",\"Charlevoix\",\"Charlotte\",\"Charlottesville\",\"Chattanooga\",\"Chautauqua\",\"Cheboygan\",\"Cheektowaga\",\"Chelmsford\",\"Chelsea\",\"Cherokee\",\"Chesapeake\",\"Chester\",\"Cheyenne\",\"Chicago\",\"Chicago Heights\",\"Chickasaw\",\"Chickasha\",\"Chico\",\"Chicopee\",\"Chillicothe\",\"Chula Vista\",\"Cicero\",\"Cincinnati\",\"Clanton\",\"Claremont\",\"Claremore\",\"Clarksburg\",\"Clarksdale\",\"Clarksville\",\"Clayton\",\"Clearfield\",\"Clearwater\",\"Cleburne\",\"Cleveland\",\"Cleveland Heights\",\"Clifton\",\"Climax\",\"Clinton\",\"Clovis\",\"Cocoa Beach\",\"Cocoa-Rockledge\",\"Cody\",\"Coeur d’Alene\",\"Coffeyville\",\"Cohasset\",\"Cohoes\",\"College Park\",\"College Station\",\"Collinsville\",\"Colorado Springs\",\"Columbia\",\"Columbus\",\"Compton\",\"Concord\",\"Coney Island\",\"Conneaut\",\"Connersville\",\"Conway\",\"Cookeville\",\"Cooperstown\",\"Coos Bay\",\"Coral Gables\",\"Cordova\",\"Corinth\",\"Corning\",\"Corona\",\"Coronado\",\"Corpus Christi\",\"Cortez\",\"Cortland\",\"Corvallis\",\"Corydon\",\"Costa Mesa\",\"Coulee Dam\",\"Council Bluffs\",\"Council Grove\",\"Coupeville\",\"Coventry\",\"Covington\",\"Cranford\",\"Cranston\",\"Crawfordsville\",\"Cripple Creek\",\"Crookston\",\"Crossett\",\"Crown Point\",\"Crystal City\",\"Cullman\",\"Culver City\",\"Cumberland\",\"Cushing\",\"Custer\",\"Cuyahoga Falls\",\"Dahlonega\",\"Dallas\",\"Dalton\",\"Daly City\",\"Danbury\",\"Danvers\",\"Danville\",\"Darien\",\"Darlington\",\"Dartmouth\",\"Davenport\",\"Davis\",\"Dayton\",\"Daytona Beach\",\"De Land\",\"De Smet\",\"DeKalb\",\"Deadwood\",\"Dearborn\",\"Decatur\",\"Dedham\",\"Deerfield Beach\",\"Defiance\",\"Del Rio\",\"Delaware\",\"Delray Beach\",\"Delta\",\"Deming\",\"Demopolis\",\"Denison\",\"Dennis\",\"Denton\",\"Denver\",\"Derby\",\"Derry\",\"Des Moines\",\"Des Plaines\",\"Detroit\",\"Devils Lake\",\"Dickinson\",\"Dillon\",\"Dixon\",\"Dodge City\",\"Dothan\",\"Douglas\",\"Dover\",\"Downey\",\"Dubuque\",\"Duluth\",\"Duncan\",\"Dunkirk\",\"Durango\",\"Durant\",\"Durham\",\"Duxbury\",\"Eagle Pass\",\"East Aurora\",\"East Chicago\",\"East Cleveland\",\"East Greenwich\",\"East Hampton\",\"East Hartford\",\"East Haven\",\"East Lansing\",\"East Liverpool\",\"East Moline\",\"East Orange\",\"East Point\",\"East Providence\",\"East Saint Louis\",\"Eastchester\",\"Eastham\",\"Easton\",\"Eastpointe\",\"Eastport\",\"Eau Claire\",\"Ecorse\",\"Edenton\",\"Edgartown\",\"Edinburg\",\"Edison\",\"Edmond\",\"Effingham\",\"El Centro\",\"El Cerrito\",\"El Dorado\",\"El Monte\",\"El Paso\",\"El Reno\",\"Elgin\",\"Elizabeth\",\"Elizabeth City\",\"Elizabethton\",\"Elizabethtown\",\"Elk City\",\"Elkhart\",\"Elkins\",\"Elko\",\"Elkton\",\"Ellensburg\",\"Ellsworth\",\"Elmhurst\",\"Elmira\",\"Elwood\",\"Ely\",\"Elyria\",\"Emmitsburg\",\"Emporia\",\"Enfield\",\"Englewood\",\"Enid\",\"Enterprise\",\"Ephrata\",\"Erie\",\"Escanaba\",\"Escondido\",\"Essex\",\"Estes Park\",\"Estherville\",\"Euclid\",\"Eufaula\",\"Eugene\",\"Eureka\",\"Evanston\",\"Evansville\",\"Eveleth\",\"Everett\",\"Excelsior Springs\",\"Exeter\",\"Fairbanks\",\"Fairfax\",\"Fairfield\",\"Fairhaven\",\"Fairmont\",\"Fall River\",\"Fallon\",\"Falls Church\",\"Falmouth\",\"Fargo\",\"Faribault\",\"Farmington\",\"Fayetteville\",\"Fergus Falls\",\"Ferguson\",\"Fernandina Beach\",\"Fillmore\",\"Findlay\",\"Fitchburg\",\"Fitzgerald\",\"Flagstaff\",\"Flint\",\"Florence\",\"Florissant\",\"Flushing\",\"Fond du Lac\",\"Fontana\",\"Forest Hills\",\"Forrest City\",\"Fort Benton\",\"Fort Collins\",\"Fort Dodge\",\"Fort Kent\",\"Fort Lauderdale\",\"Fort Lee\",\"Fort Morgan\",\"Fort Myers\",\"Fort Payne\",\"Fort Pierce\",\"Fort Scott\",\"Fort Smith\",\"Fort Valley\",\"Fort Walton Beach\",\"Fort Wayne\",\"Fort Worth\",\"Framingham\",\"Frankfort\",\"Franklin\",\"Frederick\",\"Fredericksburg\",\"Fredonia\",\"Freeport\",\"Fremont\",\"French Lick\",\"Fresno\",\"Fullerton\",\"Fulton\",\"Gadsden\",\"Gaffney\",\"Gainesville\",\"Galena\",\"Galesburg\",\"Gallatin\",\"Gallipolis\",\"Gallup\",\"Galveston\",\"Garden City\",\"Garden Grove\",\"Gardiner\",\"Garland\",\"Gary\",\"Gastonia\",\"Gatlinburg\",\"Geneva\",\"Genoa\",\"Georgetown\",\"Germantown\",\"Gettysburg\",\"Gila Bend\",\"Gillette\",\"Glassboro\",\"Glen Ellyn\",\"Glendale\",\"Glendive\",\"Glens Falls\",\"Glenview\",\"Glenwood Springs\",\"Globe\",\"Gloucester\",\"Gloversville\",\"Golden\",\"Goldfield\",\"Goldsboro\",\"Goliad\",\"Goshen\",\"Grafton\",\"Grand Forks\",\"Grand Haven\",\"Grand Island\",\"Grand Junction\",\"Grand Rapids\",\"Granite City\",\"Grants\",\"Grants Pass\",\"Grayling\",\"Great Barrington\",\"Great Bend\",\"Great Falls\",\"Great Neck\",\"Greeley\",\"Green Bay\",\"Green River\",\"Greenbelt\",\"Greeneville\",\"Greenfield\",\"Greensboro\",\"Greensburg\",\"Greenville\",\"Greenwich\",\"Greenwood\",\"Grenada\",\"Gretna\",\"Grinnell\",\"Grosse Pointe\",\"Groton\",\"Guilford\",\"Gulfport\",\"Gunnison\",\"Guntersville\",\"Guthrie\",\"Guymon\",\"Hackensack\",\"Haddonfield\",\"Hagerstown\",\"Haines\",\"Halifax\",\"Hallandale Beach\",\"Hamden\",\"Hamilton\",\"Hammond\",\"Hammondsport\",\"Hampton\",\"Hanalei\",\"Hancock\",\"Hannibal\",\"Hanover\",\"Harlan\",\"Harlem\",\"Harlingen\",\"Harmony\",\"Harpers Ferry\",\"Harrisburg\",\"Harrison\",\"Harrodsburg\",\"Hartford\",\"Hartsville\",\"Harwich\",\"Hastings\",\"Hattiesburg\",\"Haverhill\",\"Havre\",\"Hays\",\"Hayward\",\"Hazard\",\"Hazleton\",\"Heber City\",\"Helena\",\"Hempstead\",\"Henderson\",\"Herkimer\",\"Herrin\",\"Hershey\",\"Hialeah\",\"Hibbing\",\"Hickory\",\"High Point\",\"Highland Park\",\"Hillsboro\",\"Hillsborough\",\"Hilo\",\"Hingham\",\"Hinton\",\"Hobart\",\"Hobbs\",\"Hoboken\",\"Hodgenville\",\"Holdenville\",\"Holland\",\"Holly Springs\",\"Hollywood\",\"Holyoke\",\"Homer\",\"Homestead\",\"Honaunau\",\"Honesdale\",\"Honolulu\",\"Hood River\",\"Hope\",\"Hopewell\",\"Hopkinsville\",\"Hoquiam\",\"Hot Springs\",\"Houghton\",\"Houlton\",\"Houma\",\"Houston\",\"Hudson\",\"Hugo\",\"Huntington\",\"Huntington Beach\",\"Huntsville\",\"Huron\",\"Hutchinson\",\"Hyannis\",\"Hyattsville\",\"Hyde Park\",\"Idaho City\",\"Idaho Falls\",\"Ilion\",\"Independence\",\"Indiana\",\"Indianapolis\",\"Indianola\",\"Indio\",\"Inglewood\",\"Interlochen\",\"International Falls\",\"Iowa City\",\"Ipswich\",\"Iron Mountain\",\"Ironwood\",\"Irvine\",\"Irving\",\"Irvington\",\"Ishpeming\",\"Ithaca\",\"Jackson\",\"Jacksonville\",\"Jamestown\",\"Janesville\",\"Jasper\",\"Jeannette\",\"Jefferson City\",\"Jeffersonville\",\"Jersey City\",\"Jim Thorpe\",\"John Day\",\"Johnson City\",\"Johnstown\",\"Joliet\",\"Jonesboro\",\"Jonesborough\",\"Joplin\",\"Junction City\",\"Juneau\",\"Kahului\",\"Kalamazoo\",\"Kalispell\",\"Kanab\",\"Kaneohe\",\"Kankakee\",\"Kansas City\",\"Kapaa\",\"Kaskaskia\",\"Kawaihae\",\"Kearney\",\"Keene\",\"Kellogg\",\"Kelso\",\"Kennebunkport\",\"Kennewick\",\"Kenosha\",\"Kent\",\"Keokuk\",\"Ketchikan\",\"Kettering\",\"Kewanee\",\"Key West\",\"Keyser\",\"Kilgore\",\"Killeen\",\"Kingman\",\"Kingsport\",\"Kingston\",\"Kingsville\",\"Kinston\",\"Kirksville\",\"Kittery\",\"Kitty Hawk\",\"Klamath Falls\",\"Knoxville\",\"Kodiak\",\"Kokomo\",\"Kotzebue\",\"La Crosse\",\"La Grande\",\"La Grange\",\"La Habra\",\"La Junta\",\"La Salle\",\"Lackawanna\",\"Laconia\",\"Lafayette\",\"Laguna Beach\",\"Lahaina\",\"Laie\",\"Lake Charles\",\"Lake City\",\"Lake Forest\",\"Lake Geneva\",\"Lake Havasu City\",\"Lake Oswego\",\"Lake Placid\",\"Lake Wales\",\"Lakehurst\",\"Lakeland\",\"Lakeview\",\"Lakewood\",\"Lamar\",\"Lancaster\",\"Lander\",\"Lansing\",\"Laramie\",\"Laredo\",\"Largo\",\"Las Cruces\",\"Las Vegas\",\"Laurel\",\"Lawrence\",\"Lawton\",\"Layton\",\"Lead\",\"Leadville\",\"Leavenworth\",\"Lebanon\",\"Lehi\",\"Lenox\",\"Leominster\",\"Levittown\",\"Lewes\",\"Lewisburg\",\"Lewiston\",\"Lewistown\",\"Lexington\",\"Liberal\",\"Libertyville\",\"Lima\",\"Lincoln\",\"Lisle\",\"Litchfield\",\"Little Falls\",\"Little Rock\",\"Littleton\",\"Livermore\",\"Livingston\",\"Livonia\",\"Lock Haven\",\"Lockport\",\"Lodi\",\"Logan\",\"Lombard\",\"Lompoc\",\"Long Beach\",\"Long Branch\",\"Longmont\",\"Longview\",\"Lorain\",\"Los Alamos\",\"Los Angeles\",\"Louisville\",\"Loveland\",\"Lovington\",\"Lowell\",\"Lower Southampton\",\"Lubbock\",\"Lubec\",\"Ludington\",\"Ludlow\",\"Lufkin\",\"Lumberton\",\"Lynchburg\",\"Lynn\",\"Machias\",\"Mackinaw City\",\"Macomb\",\"Macon\",\"Madison\",\"Magnolia\",\"Malden\",\"Malibu\",\"Mamaroneck\",\"Manassas\",\"Manchester\",\"Mandan\",\"Manhattan\",\"Manistee\",\"Manitowoc\",\"Mankato\",\"Mansfield\",\"Manti\",\"Marblehead\",\"Marietta\",\"Marinette\",\"Marion\",\"Marlborough\",\"Marquette\",\"Marshall\",\"Martinez\",\"Martins Ferry\",\"Martinsburg\",\"Martinsville\",\"Marysville\",\"Maryville\",\"Mason City\",\"Massena\",\"Massillon\",\"Mattoon\",\"Mayfield\",\"Maysville\",\"McAlester\",\"McAllen\",\"McCook\",\"McKeesport\",\"McKinney\",\"McMinnville\",\"McPherson\",\"Meadville\",\"Medford\",\"Medicine Lodge\",\"Melbourne\",\"Memphis\",\"Menasha\",\"Menlo Park\",\"Menominee\",\"Mentor\",\"Merced\",\"Meriden\",\"Meridian\",\"Mesa\",\"Mesquite\",\"Mexico\",\"Miami\",\"Miami Beach\",\"Michigan City\",\"Middlebury\",\"Middlesboro\",\"Middletown\",\"Midland\",\"Midwest City\",\"Milan\",\"Milbank\",\"Miles City\",\"Milford\",\"Millburn\",\"Milledgeville\",\"Millville\",\"Milton\",\"Milwaukee\",\"Minden\",\"Mineola\",\"Minneapolis\",\"Minot\",\"Mishawaka\",\"Mission\",\"Missoula\",\"Mitchell\",\"Moab\",\"Mobile\",\"Mobridge\",\"Modesto\",\"Moline\",\"Monett\",\"Monmouth\",\"Monroe\",\"Monroeville\",\"Montclair\",\"Monterey\",\"Montgomery\",\"Monticello\",\"Montpelier\",\"Montrose\",\"Moore\",\"Moorhead\",\"Morehead City\",\"Morgan City\",\"Morganton\",\"Morgantown\",\"Morrilton\",\"Morristown\",\"Moscow\",\"Moses Lake\",\"Moundsville\",\"Mount Clemens\",\"Mount Holly\",\"Mount Pleasant\",\"Mount Vernon\",\"Mountain View\",\"Muncie\",\"Mundelein\",\"Murfreesboro\",\"Murray\",\"Muscatine\",\"Muskegon\",\"Muskogee\",\"Myrtle Beach\",\"Mystic\",\"Nacogdoches\",\"Nags Head\",\"Nahant\",\"Nampa\",\"Nanticoke\",\"Naperville\",\"Naples\",\"Nappanee\",\"Narragansett\",\"Nashua\",\"Nashville\",\"Natchez\",\"Natchitoches\",\"Natick\",\"Naugatuck\",\"Nauvoo\",\"Nebraska City\",\"Needles\",\"Neenah\",\"Neosho\",\"Nephi\",\"New Albany\",\"New Bedford\",\"New Bern\",\"New Braunfels\",\"New Britain\",\"New Brunswick\",\"New Castle\",\"New Glarus\",\"New Harmony\",\"New Haven\",\"New Hope\",\"New Iberia\",\"New Kensington\",\"New London\",\"New Madrid\",\"New Market\",\"New Martinsville\",\"New Milford\",\"New Orleans\",\"New Paltz\",\"New Philadelphia\",\"New Rochelle\",\"New Smyrna Beach\",\"New Ulm\",\"New Windsor\",\"New York City\",\"Newark\",\"Newberg\",\"Newburgh\",\"Newburyport\",\"Newcastle\",\"Newport\",\"Newport Beach\",\"Newport News\",\"Newton\",\"Niagara Falls\",\"Niles\",\"Nogales\",\"Nome\",\"Norfolk\",\"Normal\",\"Norman\",\"Norris\",\"Norristown\",\"North Adams\",\"North Chicago\",\"North College Hill\",\"North Haven\",\"North Hempstead\",\"North Kingstown\",\"North Las Vegas\",\"North Little Rock\",\"North Platte\",\"Northampton\",\"Northfield\",\"Norton\",\"Norwalk\",\"Norwich\",\"Norwood\",\"Novato\",\"Nyack\",\"Oak Harbor\",\"Oak Park\",\"Oak Ridge\",\"Oakland\",\"Oberlin\",\"Ocala\",\"Ocean City\",\"Ocean Springs\",\"Oceanside\",\"Oconto\",\"Odessa\",\"Ogden\",\"Ogdensburg\",\"Oil City\",\"Ojai\",\"Oklahoma City\",\"Okmulgee\",\"Olathe\",\"Old Saybrook\",\"Olean\",\"Olympia\",\"Omaha\",\"Oneida\",\"Oneonta\",\"Ontario\",\"Opelika\",\"Opelousas\",\"Oraibi\",\"Orange\",\"Orangeburg\",\"Orderville\",\"Oregon\",\"Oregon City\",\"Orem\",\"Orlando\",\"Ormond Beach\",\"Orono\",\"Oroville\",\"Osawatomie\",\"Osceola\",\"Oshkosh\",\"Oskaloosa\",\"Ossining\",\"Oswego\",\"Ottawa\",\"Ottumwa\",\"Ouray\",\"Overland Park\",\"Owatonna\",\"Owensboro\",\"Oxford\",\"Oxnard\",\"Oyster Bay\",\"Ozark\",\"Pacific Grove\",\"Paducah\",\"Pagosa Springs\",\"Painesville\",\"Palatine\",\"Palatka\",\"Palm Bay\",\"Palm Beach\",\"Palm Springs\",\"Palmdale\",\"Palmer\",\"Palmyra\",\"Palo Alto\",\"Pampa\",\"Panama City\",\"Panguitch\",\"Paris\",\"Park City\",\"Park Forest\",\"Park Ridge\",\"Parkersburg\",\"Parma\",\"Parsippany–Troy Hills\",\"Pasadena\",\"Pascagoula\",\"Pasco\",\"Pass Christian\",\"Passaic\",\"Paterson\",\"Pauls Valley\",\"Pawhuska\",\"Pawtucket\",\"Payson\",\"Peabody\",\"Pecos\",\"Peekskill\",\"Pekin\",\"Pendleton\",\"Pensacola\",\"Peoria\",\"Perry\",\"Perth Amboy\",\"Peru\",\"Peshtigo\",\"Petaluma\",\"Peterborough\",\"Petersburg\",\"Petoskey\",\"Pharr\",\"Phenix City\",\"Philadelphia\",\"Philippi\",\"Phoenix\",\"Phoenixville\",\"Pierre\",\"Pine Bluff\",\"Pinehurst\",\"Pipestone\",\"Piqua\",\"Pittsburg\",\"Pittsburgh\",\"Pittsfield\",\"Plainfield\",\"Plains\",\"Plainview\",\"Plano\",\"Plattsburgh\",\"Plattsmouth\",\"Plymouth\",\"Pocatello\",\"Point Pleasant\",\"Point Roberts\",\"Pomona\",\"Pompano Beach\",\"Ponca City\",\"Pontiac\",\"Port Angeles\",\"Port Arthur\",\"Port Gibson\",\"Port Hueneme\",\"Port Huron\",\"Port Lavaca\",\"Port Orford\",\"Port Washington\",\"Portage\",\"Portales\",\"Portland\",\"Portsmouth\",\"Potsdam\",\"Pottstown\",\"Pottsville\",\"Poughkeepsie\",\"Powell\",\"Prairie du Chien\",\"Prescott\",\"Presque Isle\",\"Price\",\"Prichard\",\"Priest River\",\"Princeton\",\"Prineville\",\"Providence\",\"Provincetown\",\"Provo\",\"Pryor\",\"Pueblo\",\"Pullman\",\"Put-in-Bay\",\"Puyallup\",\"Queens\",\"Quincy\",\"Racine\",\"Raleigh\",\"Rancho Cucamonga\",\"Randolph\",\"Rantoul\",\"Rapid City\",\"Raton\",\"Rawlins\",\"Reading\",\"Red Bluff\",\"Red Cloud\",\"Red Wing\",\"Redding\",\"Redlands\",\"Redmond\",\"Redondo Beach\",\"Redwood City\",\"Reedsport\",\"Reno\",\"Rensselaer\",\"Renton\",\"Reston\",\"Revere\",\"Rexburg\",\"Rhinelander\",\"Richardson\",\"Richland\",\"Richmond\",\"Ridgewood\",\"Ripon\",\"River Forest\",\"Riverside\",\"Riverton\",\"Roanoke\",\"Rochester\",\"Rock Hill\",\"Rock Island\",\"Rock Springs\",\"Rockford\",\"Rockland\",\"Rockville\",\"Rocky Mount\",\"Rogers\",\"Rolla\",\"Rome\",\"Romney\",\"Roseburg\",\"Roselle\",\"Roseville\",\"Roswell\",\"Rotterdam\",\"Royal Oak\",\"Rugby\",\"Rumford\",\"Ruston\",\"Rutherford\",\"Rutland\",\"Rye\",\"Saco\",\"Sacramento\",\"Sag Harbor\",\"Saginaw\",\"Saint Albans\",\"Saint Augustine\",\"Saint Charles\",\"Saint Cloud\",\"Saint George\",\"Saint Ignace\",\"Saint Johnsbury\",\"Saint Joseph\",\"Saint Louis\",\"Saint Martinville\",\"Saint Marys City\",\"Saint Paul\",\"Saint Petersburg\",\"Sainte Genevieve\",\"Salem\",\"Salina\",\"Salinas\",\"Salisbury\",\"Sallisaw\",\"Salt Lake City\",\"San Angelo\",\"San Antonio\",\"San Bernardino\",\"San Clemente\",\"San Diego\",\"San Felipe\",\"San Fernando\",\"San Francisco\",\"San Gabriel\",\"San Jose\",\"San Juan Capistrano\",\"San Leandro\",\"San Luis Obispo\",\"San Marcos\",\"San Marino\",\"San Mateo\",\"San Pedro\",\"San Rafael\",\"San Simeon\",\"Sand Springs\",\"Sandusky\",\"Sandwich\",\"Sanford\",\"Santa Ana\",\"Santa Barbara\",\"Santa Clara\",\"Santa Clarita\",\"Santa Claus\",\"Santa Cruz\",\"Santa Fe\",\"Santa Monica\",\"Santa Rosa\",\"Sapulpa\",\"Saranac Lake\",\"Sarasota\",\"Saratoga Springs\",\"Saugus\",\"Sauk Centre\",\"Sault Sainte Marie\",\"Sausalito\",\"Savannah\",\"Scarborough\",\"Scarsdale\",\"Schenectady\",\"Scottsboro\",\"Scottsdale\",\"Scranton\",\"Searcy\",\"Seaside\",\"Seattle\",\"Sebring\",\"Sedalia\",\"Selma\",\"Seminole\",\"Seneca Falls\",\"Seward\",\"Seymour\",\"Shaker Heights\",\"Shamokin\",\"Sharon\",\"Shawnee\",\"Shawneetown\",\"Sheboygan\",\"Sheffield\",\"Shelby\",\"Shelbyville\",\"Shelton\",\"Shepherdstown\",\"Sheridan\",\"Sherman\",\"Shiprock\",\"Shreveport\",\"Sidney\",\"Sierra Vista\",\"Silver City\",\"Silver Spring\",\"Silverton\",\"Simi Valley\",\"Simsbury\",\"Sioux City\",\"Sioux Falls\",\"Sitka\",\"Skagway\",\"Skokie\",\"Smith Center\",\"Smyrna\",\"Socorro\",\"Somersworth\",\"Somerville\",\"Sonoma\",\"South Bend\",\"South Charleston\",\"South Hadley\",\"South Holland\",\"South Kingstown\",\"South Orange Village\",\"South Saint Paul\",\"South San Francisco\",\"Southampton\",\"Southington\",\"Spanish Fork\",\"Sparks\",\"Spartanburg\",\"Spearfish\",\"Spokane\",\"Spring Green\",\"Springfield\",\"Springville\",\"Stamford\",\"Starkville\",\"State College\",\"Staten Island\",\"Staunton\",\"Steamboat Springs\",\"Sterling\",\"Steubenville\",\"Stevens Point\",\"Stillwater\",\"Stockbridge\",\"Stockton\",\"Stonington\",\"Stony Brook\",\"Stony Point\",\"Stoughton\",\"Stratford\",\"Streator\",\"Stroudsburg\",\"Sturbridge\",\"Sturgeon Bay\",\"Sturgis\",\"Stuttgart\",\"Sudbury\",\"Suffolk\",\"Summersville\",\"Summit\",\"Sumter\",\"Sun Valley\",\"Sunbury\",\"Sunnyvale\",\"Superior\",\"Susanville\",\"Swarthmore\",\"Sweetwater\",\"Sylacauga\",\"Syracuse\",\"Tacoma\",\"Tahlequah\",\"Takoma Park\",\"Talladega\",\"Tallahassee\",\"Tamaqua\",\"Tampa\",\"Taos\",\"Tarpon Springs\",\"Tarrytown\",\"Taunton\",\"Telluride\",\"Tempe\",\"Temple\",\"Ten Sleep\",\"Terre Haute\",\"Tewksbury\",\"Texarkana\",\"Texas City\",\"The Dalles\",\"The Village\",\"Thermopolis\",\"Thibodaux\",\"Thousand Oaks\",\"Ticonderoga\",\"Tiffin\",\"Tillamook\",\"Titusville\",\"Tiverton\",\"Toccoa\",\"Toledo\",\"Tombstone\",\"Tonawanda\",\"Tooele\",\"Topeka\",\"Torrance\",\"Torrington\",\"Totowa\",\"Towson\",\"Traverse City\",\"Trenton\",\"Trinidad\",\"Troy\",\"Truro\",\"Truth or Consequences\",\"Tucson\",\"Tucumcari\",\"Tullahoma\",\"Tulsa\",\"Tupelo\",\"Turlock\",\"Tuscaloosa\",\"Tuscumbia\",\"Tuskegee\",\"Twin Falls\",\"Tyler\",\"Ukiah\",\"Union\",\"Union City\",\"Uniontown\",\"Urbana\",\"Utica\",\"Uvalde\",\"Vail\",\"Valdez\",\"Valdosta\",\"Vallejo\",\"Valley City\",\"Valparaiso\",\"Van Buren\",\"Vancouver\",\"Vandalia\",\"Venice\",\"Ventura\",\"Vermillion\",\"Vernal\",\"Vicksburg\",\"Victoria\",\"Victorville\",\"Vincennes\",\"Vineland\",\"Vinita\",\"Virden\",\"Virginia\",\"Virginia Beach\",\"Virginia City\",\"Visalia\",\"Wabash\",\"Waco\",\"Wahiawa\",\"Wahpeton\",\"Wailuku\",\"Waimea\",\"Walla Walla\",\"Wallingford\",\"Walnut Creek\",\"Walpi\",\"Walsenburg\",\"Warm Springs\",\"Warner Robins\",\"Warren\",\"Warrensburg\",\"Warwick\",\"Washington\",\"Waterbury\",\"Waterford\",\"Waterloo\",\"Watertown\",\"Waterville\",\"Watervliet\",\"Watkins Glen\",\"Watts\",\"Waukegan\",\"Waukesha\",\"Wausau\",\"Wauwatosa\",\"Waycross\",\"Wayne\",\"Waynesboro\",\"Weatherford\",\"Webster\",\"Webster City\",\"Weehawken\",\"Weirton\",\"Welch\",\"Wellesley\",\"Wellfleet\",\"Wellsburg\",\"Wenatchee\",\"West Allis\",\"West Bend\",\"West Bridgewater\",\"West Chester\",\"West Covina\",\"West Des Moines\",\"West Hartford\",\"West Haven\",\"West Lafayette\",\"West Memphis\",\"West New York\",\"West Orange\",\"West Palm Beach\",\"West Plains\",\"West Point\",\"West Seneca\",\"West Springfield\",\"Westerly\",\"Westfield\",\"Westminster\",\"Weston\",\"Westport\",\"Wethersfield\",\"Wewoka\",\"Weymouth\",\"Wheaton\",\"Wheeling\",\"White Plains\",\"White Springs\",\"White Sulphur Springs\",\"Whitman\",\"Whittier\",\"Wichita\",\"Wichita Falls\",\"Wickford\",\"Wilkes-Barre\",\"Williamsburg\",\"Williamson\",\"Williamsport\",\"Williamstown\",\"Willimantic\",\"Willingboro\",\"Williston\",\"Willmar\",\"Wilmette\",\"Wilmington\",\"Wilson\",\"Winchester\",\"Windham\",\"Window Rock\",\"Windsor\",\"Windsor Locks\",\"Winnemucca\",\"Winnetka\",\"Winona\",\"Winooski\",\"Winslow\",\"Winsted\",\"Winston-Salem\",\"Winter Haven\",\"Winter Park\",\"Wisconsin Dells\",\"Woburn\",\"Wood River\",\"Woodbridge\",\"Woodland\",\"Woods Hole\",\"Woodstock\",\"Woodward\",\"Woonsocket\",\"Wooster\",\"Worcester\",\"Worland\",\"Worthington\",\"Wyandotte\",\"Xenia\",\"Yakima\",\"Yankton\",\"Yazoo City\",\"Yellow Springs\",\"Yonkers\",\"Yorba Linda\",\"York\",\"Youngstown\",\"Ypsilanti\",\"Ysleta\",\"Yuba City\",\"Yuma\",\"Zanesville\",\"Zion\"];\n\nconst myStates = [\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\n\nconst myColleges = [\"None\",\"Abilene Christian University\",\"Adelphi University\",\"Agnes Scott College\",\"Air Force Institute of Technology\",\"Alabama A&M University\",\"Alabama State University\",\"Alaska Pacific University\",\"Albertson College of Idaho\",\"Albion College\",\"Alderson-Broaddus College\",\"Alfred University\",\"Allegheny College\",\"Allentown College of Saint Francis de Sales\",\"Alma College\",\"Alverno College\",\"Ambassador University\",\"American Coastline University\",\"American Graduate School of International Management\",\"American International College\",\"American University\",\"Amherst College\",\"Andrews University\",\"Angelo State University\",\"Antioch College\",\"Antioch New England\",\"Antioch University-Los Angeles\",\"Antioch University-Seattle\",\"Appalachian State University\",\"Aquinas College\",\"Arizona State University\",\"Arizona State University East\",\"Arizona State University West\",\"Arizona Western College\",\"Arkansas State University, Jonesboro\",\"Arkansas Tech University\",\"Armstrong State College\",\"Ashland University\",\"Assumption College\",\"Athens State College\",\"Auburn University\",\"Auburn University - Montgomery\",\"Augsburg College\",\"Augustana College (IL)\",\"Augustana College (SD)\",\"Aurora University\",\"Austin College\",\"Austin Peay State University\",\"Averett College\",\"Avila College\",\"Azusa Pacific University\", \"Babson College\",\"Baldwin-Wallace College\",\"Ball State University\",\"Baker University\",\"Baptist Bible College\",\"Bard College\",\"Barry University\",\"Bastyr University\",\"Bates College\",\"Baylor College of Medicine\",\"Baylor University\",\"Beaver College\",\"Belmont University\",\"Beloit College\",\"Bemidji State University\",\"Benedictine College\",\"Bennington College\",\"Bentley College\",\"Berea College\",\"Berklee College of Music\",\"Bethany College (CA)\",\"Bethany College (WV)\",\"Bethel College (KS)\",\"Bethel College and Seminary (MN)\",\"Biola University\",\"Birmingham-Southern College\",\"Black Hills State University\",\"Bloomsburg University of Pennsylvania\",\"Bluffton College\",\"Bob Jones University\",\"Boise State University\",\"Boston College\",\"Boston Graduate School of Psychoanalysis\",\"Boston University\",\"Bowdoin College\",\"Bowie State University\",\"Bowling Green State University\",\"Bradley University\",\"Brandeis University\",\"Brenau University\",\"Briar Cliff College\",\"Bridgewater College\",\"Brigham Young University\",\"Brigham Young University Hawaii\",\"Brown University\",\"Bryant College\",\"Bryn Mawr College\",\"Bucknell University\",\"Buena Vista University\",\"Butler University\",\"California Coast University\",\"California Institute of Technology\",\"California Lutheran University\",\"California Maritime Academy\",\"California National University\",\"California Pacific University\",\"California Polytechnic State University, San Luis Obispo\",\"California School of Professional Psychology\",\"California State Polytechnic University, Pomona\",\"California State University System\",\"California State University, Bakersfield\",\"California State University, Chico\",\"California State University, Dominguez Hills\",\"California State University, Fresno\",\"California State University, Fullerton\",\"California State University, Hayward\",\"California State University, Long Beach\",\"California State University, Los Angeles\",\"California State University, Monterey Bay\",\"California State University, Northridge\",\"California State University, Sacramento\",\"California State University, San Bernardino\",\"California State University, San Jose\",\"California State University, San Marcos\",\"California State University, Sacramento\",\"California State University, Stanislaus\",\"California University of Pennsylvania\",\"Calvin College\",\"Campbell University\",\"Campbellsville College\",\"Cameron University\",\"Canisius College\",\"Carleton College\",\"Carlow College\",\"Carnegie Mellon University\",\"Carroll College (MT)\",\"Carroll College (WI)\",\"Carson-Newman College\",\"Carthage College\",\"Case Western Reserve University\",\"Castleton State University\",\"The Catholic University of America\",\"Cedarville College\",\"Centenary College of Louisiana\",\"Central College\",\"Central Connecticut State University\",\"Central Methodist College\",\"Central Michigan University\",\"Central Missouri State University\",\"Central Washington University\",\"Centre College\",\"Chadron State College\",\"Champlain College\",\"Chapman University\",\"Chatham College\",\"Chesapeake College\",\"Cheyney University\",\"The Chicago School of Professional Psychology\",\"Christian Brothers University\",\"Christian Theological Seminary\",\"Christopher Newport University\",\"The Citadel\",\"City University\",\"City University of New York\",\"Claremont Graduate School\",\"Claremont McKenna College\",\"Clarion University of Pennsylvania\",\"Clark University\",\"Clarke College\",\"Clarkson University\",\"Clayton State College\",\"Clemson University\",\"Cleveland State University\",\"Clinch Valley College\",\"Coastal Carolina University\",\"Coe College\",\"Coker College\",\"Colby College\",\"Colgate University\",\"College of the Atlantic\",\"College of Charleston\",\"College of Eastern Utah\",\"College of the Holy Cross\",\"College of Saint Benedict\",\"College of Saint Catherine\",\"College of St. Francis\",\"College of Saint Rose\",\"College of St. Scholastica\",\"College of William and Mary\",\"The College of Wooster\",\"Colorado Christian University\",\"Colorado College\",\"Colorado School of Mines\",\"Colorado State University\",\"Columbia College Chicago\",\"Columbia Southern University\",\"Columbia Union College\",\"Columbia University\",\"Concordia College-Ann Arbor\",\"Concordia College-Moorhead\",\"Concordia College-St. Paul\",\"Concordia College-Seward\",\"Concordia University River Forest, Illinois\",\"Connecticut College\",\"The Cooper Union for the Advancement of Science and Art\",\"Coppin State College\",\"Cornell College\",\"Cornell University\",\"Cornerstone College\",\"Creighton University\",\"Curry College\", \"Daemen College\",\"Dakota State University\",\"Dakota Wesleyan University\",\"Dallas Baptist University\",\"Dana College\",\"Daniel Webster College\",\"Dartmouth College\",\"Davenport College Detroit College of Business\",\"Davidson College\",\"Davis & Elkins College\",\"Delaware State University\",\"Delta State University\",\"Denison University\",\"DePaul University\",\"DePauw University\",\"DeVry Institute of Technology\",\"DeVry Institute of Technology-Dallas\",\"DeVry Institute of Technology-Phoenix\",\"Dickinson College\",\"Dickinson State University\",\"Dillard University\",\"Dominican College\",\"Dordt College\",\"Dowling College\",\"Drake University\",\"Drew University\",\"Drexel University\",\"Drury College\",\"Duke University\",\"Duquesne University\",\"Earlham College\",\"East Carolina University\",\"East Central University\",\"East Stroudsburg State University of Pennsylvania\",\"East Tennessee State University\",\"East Texas State University\",\"Eastern Connecticut State University\",\"Eastern Illinois University\",\"Eastern Kentucky University\",\"Eastern Mennonite University\",\"Eastern Michigan University\",\"Eastern Nazarene College\",\"Eastern New Mexico University\",\"Eastern Oregon State College\",\"Eastern Washington University\",\"Edgewood College\",\"Edinboro University of Pennsylvania\",\"Elizabeth City State University\",\"Elizabethtown College\",\"Elmhurst College\",\"Elon College\",\"Embry-Riddle Aeronautical University, Arizona\",\"Embry-Riddle Aeronautical University, Florida\",\"Emerson College\",\"Emmanuel College\",\"Emmaus Bible College\",\"Emporia State University\",\"Emory & Henry College\",\"Emory University\",\"Evergreen State College\",\"Fairfield University\",\"Fairleigh Dickinson University\",\"Fairmont State College\",\"Fayetteville State University\",\"Ferris State University\",\"Fielding Institute\",\"Fisk University\",\"Fitchburg State College\",\"Florida Agricultural and Mechanical University\",\"Florida Atlantic University\",\"Florida Gulf Coast University\",\"Florida Institute of Technology\",\"Florida International University\",\"Florida State University\",\"Fontbonne College\",\"Fordham University\",\"Fort Hays State University\",\"Fort Lewis College\",\"Franciscan University\",\"Franklin and Marshall College\",\"Franklin Pierce Law Center\",\"Franklin University\",\"Fresno Pacific University\",\"Friends University\",\"Frostburg State University\",\"Fuller Theological Seminary\",\"Furman University\",\"Gallaudet University\",\"Gannon University\",\"Geneva College\",\"George Fox College\",\"George Mason University\",\"George Washington University\",\"Georgetown University\",\"Georgia College\",\"Georgia Institute of Technology\",\"Georgia Southern University\",\"Georgia Southwestern College\",\"Georgia State University\",\"Georgian Court College\",\"Gettysburg College\",\"GMI Engineering and Management Institute\",\"Golden Gate University\",\"Goldey-Beacom College\",\"Gonzaga University\",\"Goshen College\",\"Goucher College\",\"Governors State University\",\"Grace College\",\"Graceland College\",\"Grand Valley State University\",\"Greenleaf University\",\"Grinnell College\",\"Guilford College\",\"Gustavus Adolphus College\",\"Gutenberg College\",\"Hamilton College\",\"Hamline University\",\"Hampden-Sydney College\",\"Hampshire College\",\"Hampton University\",\"Hanover College\",\"Harding University\",\"Hartwick College\",\"Harvard University\",\"Harvey Mudd College\",\"Haskell Indian Nations University\",\"Hastings College\",\"Haverford College in Pennsylvania\",\"Hawaii Pacific University\",\"Heidelberg College\",\"Hendrix College\",\"Hesston College\",\"High Point University\",\"Hillsdale College\",\"Hiram College\",\"Hobart and William Smith Colleges\",\"Hofstra University\",\"Hollins College\",\"Holy Cross College\",\"Hood College\",\"Hope College\",\"Howard University\",\"Humboldt State University\",\"Hunter College\",\"Huntingdon College\",\"Huntington College\",\"ICI University\",\"Idaho State University\",\"Illinois Benedictine College\",\"Illinois Institute of Technology\",\"Illinois State University\",\"Incarnate Word College\",\"Indiana Institute of Technology\",\"Indiana State University\",\"Indiana University System\",\"Indiana University/Purdue University at Columbus\",\"Indiana University/Purdue University at Fort Wayne\",\"Indiana University/Purdue University at Indianapolis\",\"Indiana University at Bloomington\",\"Indiana University at South Bend\",\"Indiana University of Pennsylvania\",\"Indiana University Southeast at New Albany\",\"Indiana Wesleyan University, Marion\",\"Inter American University of Puerto Rico Metropolitan Campus\",\"Iona College\",\"Iowa State University\",\"Ithaca College\",\"Jackson State University\",\"Jacksonville University\",\"Jacksonville State University\",\"James Madison University\",\"Jamestown College\",\"The Jewish Theological Seminary\",\"John Brown University\",\"John F. Kennedy University\",\"Johns Hopkins University\",\"Johnson Bible College\",\"Johnson C. Smith University\",\"Johnson & Wales University\",\"Johnson & Wales University-Charleston\",\"Jones College\",\"Judson College\",\"Juniata College\",\"Kalamazoo College\",\"Kansas State University\",\"Kansas Wesleyan University\",\"Kean College\",\"Keene State College\",\"Kent State University\",\"Kenyon College\",\"King's College\",\"Knox College\",\"Kutztown University of Pennsylvania\",\"La Sierra University\",\"LaGrange College\",\"Lafayette College\",\"Lake Forest College\",\"Lake Superior State University\",\"Lamar University\",\"Langston University\",\"LaSalle University\",\"Lawrence University\",\"Lawrence Technological University\",\"Lebanon Valley College\",\"Lehigh Univervsity\",\"Le Moyne College\",\"Lenoir-Rhyne College\",\"LeTourneau University\",\"Lewis & Clark College\",\"Lewis-Clark State College\",\"Lewis University\",\"Liberty University\",\"Lincoln University\",\"Linfield College\",\"Lock Haven University of Pennsylvania\",\"Loma Linda University\",\"Long Island University\",\"Longwood College\",\"Loras College\",\"Louisiana College\",\"Louisiana State University\",\"Louisiana State University at Alexandria\",\"Louisiana State University at Shreveport\",\"Louisiana Tech University\",\"Loyola College\",\"Loyola Marymount University\",\"Loyola University Chicago\",\"Luther College\",\"Luther Seminary\",\"Lycoming College\",\"Lynchburg College\",\"Lyndon State College\",\"Lyon College\",\"Macalester College\",\"Maharishi University of Management\",\"Maine Maritime Academy\",\"Malone College\",\"Manhattan College\",\"Mankato State University\",\"Mansfield University of Pennsylvania\",\"Marietta College\",\"Marist College\",\"Marlboro College\",\"Marquette University\",\"Marshall University\",\"Mary Baldwin College\",\"Marymount College\",\"Marymount University\",\"Mary Washington College\",\"Massachusetts Institute of Technology\",\"McMurry University\",\"McNeese State University\",\"Medical College of Georgia\",\"Medical College of Wisconsin\",\"Mercer University\",\"Mercyhurst College\",\"Meredith College\",\"Messiah College\",\"Metropolitan State College of Denver\",\"Metropolitan State University\",\"Miami Christian University\",\"Michigan State University\",\"Michigan Technological University\",\"Mid-America Nazarene College\",\"Middlebury College\",\"Middle Georgia College\",\"Middle Tennessee State University\",\"Midwestern State University\",\"Millersville University of Pennsylvania\",\"Milligan College\",\"Millikin University\",\"Millsaps College\",\"Milwaukee School of Engineering\",\"Minot State University\",\"Minneapolis College of Art and Design\",\"Mississippi College\",\"Mississippi State University\",\"Mississippi University for Women\",\"Missouri Southern State College\",\"Missouri Western State College\",\"Molloy College\",\"Monmouth College\",\"Monmouth University\",\"Montana State University-Billings\",\"Montana State University-Bozeman\",\"Montana State University-Northern\",\"Montana Tech\",\"Montclair State University\",\"Montreat College\",\"Moravian College\",\"Moorhead State University\",\"Morehouse College\",\"Morgan State University\",\"Mount Senario College\",\"Mount Holyoke College\",\"Mount Saint Joseph College\",\"Mount Saint Mary College\",\"Mount Union College\",\"Murray State University\",\"Muskingum College\",\"National Defense University\",\"National-Louis University\",\"National Technological University\",\"National University\",\"Naval Postgraduate School\",\"Nazareth College\",\"Newberry College\",\"New England Institute of Technology\",\"New College of California\",\"New Hampshire College\",\"New Jersey Institute of Technology\",\"New Mexico Highlands University\",\"New Mexico Institute of Mining & Technology\",\"New Mexico State University\",\"New York Institute of Technology\",\"New York University\",\"Niagara University\",\"Nicholls State University\",\"Norfolk State University\",\"North Adams State College\",\"North Carolina Central University\",\"North Carolina A&T State University\",\"North Carolina State University\",\"North Carolina Wesleyan College\",\"North Central Bible College\",\"North Dakota State University\",\"Northland College\",\"North Park College and Theological Seminary\",\"Northeastern Illinois University\",\"Northeastern Louisiana University\",\"Northeastern State University\",\"Northeastern University\",\"Northern Arizona University\",\"Northern Illinois University\",\"Northern Kentucky University\",\"Northern Michigan University\",\"Northern State University\",\"Northwest Missouri State University\",\"Northwest Nazarene College\",\"Northwestern College of Iowa\",\"Northwestern State University\",\"Northwestern University\",\"Norwich University\",\"Nova Southeastern University\",\"Oakland University\",\"Oberlin College\",\"Occidental College\",\"Ohio Dominican College\",\"Ohio Northern University\",\"Ohio State University, Columbus\",\"Ohio State University, Marion\",\"Ohio Wesleyan University\",\"Ohio University, Athens\",\"Oklahoma Baptist University\",\"Oklahoma City University\",\"Oklahoma State University\",\"Old Dominion University\",\"Olivet Nazarene University\",\"Oral Roberts University\",\"Oregon Graduate Institute of Science and Technology\",\"Oregon Health Sciences University\",\"Oregon Institute of Technology\",\"Oregon State University\",\"Otterbein College\",\"Our Lady of the Lake University\",\"Pace University\",\"Pacific Lutheran University\",\"Pacific Union College\",\"Pacific University\",\"Pacific Western University\",\"Palm Beach Atlantic College\",\"Peace College\",\"Pembroke State University\",\"Pennsylvania State System of Higher Education\",\"Pennsylvania State University\",\"Pennsylvania State University-Schuylkill Campus\",\"Pensacola Christian College\",\"Pepperdine University\",\"Peru State College\",\"Philadelphia College of Textiles and Science\",\"Phillips University\",\"Pittsburg State University\",\"Pitzer College\",\"Platt College\",\"Plymouth State College\",\"Point Loma Nazarene College\",\"Polytechnic University of New York\",\"Polytechnic University of Puerto Rico\",\"Pomona College\",\"Portland State University\",\"Prairie View A&M University\",\"Pratt Institute\",\"Prescott College\",\"Princeton University\",\"Presbyterian College\",\"Providence College\",\"Purdue University\",\"Purdue University Calumet\",\"Purdue University North Central\",\"Quincy University\",\"Quinnipiac College\",\"Radford University\",\"Ramapo College\",\"Randolph-Macon College\",\"Randolph-Macon Woman's College\",\"Reed College\",\"Regent University\",\"Regis University\",\"Rensselaer Polytechnic Institute\",\"Rhode Island College\",\"Rhodes College\",\"Rice University\",\"Richard Stockton College of New Jersey\",\"Rider University\",\"Ripon College\",\"Rivier College\",\"Roanoke College\",\"Rochester Institute of Technology\",\"The Rockefeller University\",\"Rockford College\",\"Rockhurst College\",\"Rocky Mountain College\",\"Roger Williams University\",\"Rollins College\",\"Rosary College\",\"Rose-Hulman Institute of Technology\",\"Rowan College\",\"Rutgers University\",\"Rutgers University, Camden\",\"Rutgers University, Newark\",\"The Sage Colleges\",\"Sacred Heart University (CT)\",\"Sacred Heart University (PR)\",\"Saginaw Valley State University\",\"St. Ambrose University\",\"St. Andrews Presbyterian College\",\"Saint Anselm College\",\"St. Bonaventure University\",\"Saint Cloud State University\",\"Saint Edward's University\",\"Saint Francis College\",\"St. John's College-Annapolis\",\"St. John's College-Santa Fe\",\"Saint John's University (MN)\",\"Saint John's University (NY)\",\"St. Joseph College (CT)\",\"Saint Joseph's College (IN)\",\"St. Joseph's College (ME)\",\"Saint Joseph's University\",\"St. Lawrence University\",\"St. Louis College of Pharmacy\",\"Saint Louis University\",\"St. Martin's College\",\"Saint Mary College\",\"Saint Mary's College (IN)\",\"Saint Mary's College of California\",\"Saint Mary's University of Minnesota\",\"Saint Michael's College\",\"Saint Olaf College\",\"St. Thomas University (FL)\",\"Saint Vincent College\",\"Saint Xavier University\",\"Salisbury State University\",\"Salish Kootenai College\",\"Sam Houston State University\",\"Samford University\",\"San Diego State University\",\"San Francisco State University\",\"San Jose State University\",\"Santa Clara University\",\"Sarah Lawrence College\",\"School of the Art Institute of Chicago\",\"Seattle Pacific University\",\"Seattle University\",\"Seton Hall University\",\"Sewanee, University of the South\",\"Shawnee State University\",\"Shenandoah University\",\"Shippensburg University of Pennsylvania\",\"Shorter College\",\"Simmons College\",\"Simon's Rock College\",\"Simpson College\",\"Skidmore College\",\"Slippery Rock University of Pennsylvania\",\"Smith College\",\"Sonoma State University\",\"South Dakota School of Mines and Technology\",\"South Dakota State University\",\"Southeast Missouri State University\",\"Southeastern Louisiana University\",\"Southern College\",\"Southern College of Technology\",\"Southern Connecticut State University\",\"Southern Illinois University\",\"Southern Illinois University-Carbondale\",\"Southern Illinois University-Edwardsville\",\"Southern Methodist University\",\"Southern Nazarene University\",\"Southern Oregon State College\",\"Southern University\",\"Southern Utah University\",\"Southampton College\",\"South Texas College of Law\",\"Southwest Baptist University\",\"Southwest Missouri State University\",\"Southwest State University\",\"Southwest Texas State University\",\"Southwestern Adventist College\",\"Southwestern University\",\"Spelman College\",\"Spring Arbor College\",\"Spring Hill College\",\"Stanford University\",\"State University of New York System\",\"State University of New York at Albany\",\"State University of New York College of Technology at Alfred\",\"State University of New York at Binghamton\",\"State University of New York College at Brockport\",\"State University of New York at Buffalo\",\"State University of New York College at Buffalo (Buffalo State College)\",\"State University of New York College of Agriculture and Technology at Cobleskill\",\"State University of New York College at Cortland\",\"State University of New York College of Environmental Science and Forestry\",\"State University of New York at Farmingdale\",\"State University of New York at Fredonia\",\"State University of New York College at Geneseo\",\"State University of New York College at New Paltz\",\"State University of New York College at Oneonta\",\"State University of New York at Oswego\",\"State University of New York at Plattsburgh\",\"State University of New York College at Potsdam\",\"State University of New York at Stony Brook\",\"State University of New York Institute of Technology at Utica/Rome\",\"Stephen F. Austin State University\",\"Stephens College\",\"Stetson University\",\"Stevens Institute of Technology\",\"Strayer College\",\"Suffolk University\",\"Sul Ross State University\",\"Summit University of Louisiana\",\"Susquehanna University\",\"Swarthmore College\",\"Sweet Briar College\",\"Syracuse University\",\"Tabor College\",\"Tarleton State University\",\"Taylor University\",\"Teachers College, Columbia University\",\"Teikyo Marycrest University\",\"Temple University\",\"Tennessee State University\",\"Tennessee Technological University\",\"Texas A&M International University\",\"Texas A&M University-College Station\",\"Texas A&M University-Corpus Christi\",\"Texas A&M University-Kingsville\",\"Texas Christian University\",\"Texas Southern University\",\"Texas Tech University\",\"Texas Tech University-Health Sciences Center\",\"Texas Woman's University\",\"Thomas College\",\"Thomas Edison State College\",\"Thomas Jefferson University\",\"Thomas More College\",\"Towson State University\",\"Transylvania University\",\"Trenton State College\",\"Trinity College (CT)\",\"Trinity College (DC)\",\"Trinity University\",\"Troy State University\",\"Truman State University\",\"Tucson University\",\"Tufts University\",\"Tulane University\",\"Tuskegee University\",\"Union College\",\"The Union Institute\",\"Union University\",\"United States Air Force Academy\",\"United States International University\",\"United States Merchant Marine Academy\",\"United States Military Academy\",\"United States Naval Academy\",\"The Uniformed Services University of the Health Sciences\",\"Ursinus College\",\"Ursuline College\",\"UA-B\",\"University of Akron\",\"University of Alabama at Birmingham\",\"University of Alabama at Huntsville\",\"University of Alabama at Tuscaloosa\",\"University of Alaska\",\"University of Alaska-Anchorage\",\"University of Alaska-Fairbanks\",\"University of Alaska-Southeast\",\"University of Arizona\",\"University of Arkansas - Fayetteville\",\"University of Arkansas - Little Rock\",\"University of Arkansas for Medical Sciences\",\"University of Arkansas - Monticello\",\"University of Baltimore\",\"University of Bridgeport\",\"UC\",\"University of California, Berkeley\",\"University of California, Davis\",\"University of California, Irvine\",\"University of California, Los Angeles\",\"University of California, Riverside\",\"University of California, San Diego\",\"University of California, San Francisco\",\"University of California, Santa Barbara\",\"University of California, Santa Cruz\",\"University of Central Arkansas\",\"University of Central Florida\",\"University of Central Texas\",\"University of Charleston\",\"University of Chicago\",\"University of Cincinnati\",\"University of Colorado at Boulder\",\"University of Colorado at Colorado Springs\",\"University of Colorado at Denver\",\"University of Colorado Health Sciences Center\",\"University of Connecticut\",\"UD-H\",\"University of Dallas\",\"University of Dayton\",\"University of Delaware\",\"University of Denver\",\"University of the District of Columbia\",\"University of Detroit Mercy\",\"University of Dubuque\",\"University of Evansville\",\"University of Florida\",\"University of Georgia\",\"University of Great Falls\",\"University of Guam\",\"University of Hartford\",\"University of Hawaii at Hilo Physics and Astronomy\",\"University of Hawaii at Manoa\",\"University of Houston\",\"UI-L\",\"University of Idaho\",\"University of Illinois at Chicago\",\"University of Illinois at Springfield\",\"University of Ilinois at Urbana-Champaign\",\"University of Indianapolis\",\"University of Iowa\",\"University of Kansas\",\"University of Kansas School of Medicine\",\"University of Kentucky\",\"University of La Verne\",\"University of Louisville\",\"UM\",\"University of Maine System\",\"University of Maine\",\"University of Maine at Farmington\",\"University of Maine at Fort Kent\",\"University of Maine at Machias\",\"University of Maine at Presque Island\",\"University of Maryland at Baltimore\",\"University of Maryland at Baltimore County\",\"University of Maryland at College Park\",\"University of Maryland - University College\",\"University of Massachusetts System\",\"University of Massachusetts at Amherst\",\"University of Massachusetts at Dartmouth\",\"University of Massachusetts at Lowell\",\"University of Memphis\",\"University of Miami\",\"University of Michigan-Ann Arbor\",\"University of Michigan-Dearborn\",\"University of Minnesota\",\"University of Minnesota-Crookston\",\"University of Minnesota-Duluth\",\"University of Minnesota-Morris\",\"University of Minnesota-Twin Cities\",\"University of Mississippi\",\"University of Mississippi Medical Center\",\"University of Missouri System\",\"University of Missouri-Columbia\",\"University of Missouri-Kansas City\",\"University of Missouri-Rolla\",\"University of Missouri-Saint Louis\",\"University of Montana\",\"UN\",\"University of Nebraska, Kearney\",\"University of Nebraska, Lincoln\",\"University of Nebraska, Omaha\",\"University of Nevada, Las Vegas\",\"University of Nevada, Reno\",\"University of New England\",\"University of New Hampshire, Durham\",\"University of New Haven\",\"University of New Mexico\",\"University of New Orleans\",\"University of North Carolina at Asheville\",\"University of North Carolina at Chapel Hill\",\"University of North Carolina at Charlotte\",\"University of North Carolina at Greensboro\",\"University of North Carolina System\",\"University of North Carolina at Wilmington\",\"University of North Dakota\",\"University of North Florida\",\"University of North Texas\",\"University of North Texas Health Science Center\",\"University of Northern Colorado\",\"University of Northern Iowa\",\"University of Notre Dame\",\"UO-S\",\"University of Oklahoma\",\"University of Oregon\",\"University of the Ozarks\",\"University of the Pacific\",\"University of Pennsylvania\",\"University of Phoenix\",\"University of Pittsburgh\",\"University of Pittsburgh at Johnstown\",\"University of Portland\",\"University of Puerto Rico\",\"University of Puget Sound\",\"University of Redlands\",\"University of Rhode Island\",\"University of Richmond\",\"University of Rochester\",\"University of San Diego\",\"University of San Francisco\",\"University of Sarasota\",\"University of Science & Arts of Oklahoma\",\"University of Scranton\",\"University of Sioux Falls\",\"University of Southern California\",\"University of South Carolina\",\"University of South Carolina - Aiken\",\"University of South Dakota\",\"University of South Florida\",\"University of Southern Maine\",\"University of Southern Mississippi\",\"University of Southwestern Louisiana\",\"University of Saint Thomas\",\"University of Saint Thomas (MN)\",\"University of South Alabama\",\"University of Southern Colorado\",\"University of Southern Indiana\",\"UT\",\"University of Tampa\",\"University of Tennessee, Knoxville\",\"University of Tennessee, Martin\",\"University of Texas System\",\"University of Texas at Arlington\",\"University of Texas at Austin\",\"University of Texas at Brownsville\",\"University of Texas at Dallas\",\"University of Texas at El Paso\",\"University of Texas-Pan American\",\"University of Texas at San Antonio\",\"University of Texas Health Science Center at Houston\",\"University of Texas Health Science Center at San Antonio\",\"University of Texas at Tyler\",\"University of Texas Health Center at Tyler\",\"University of Texas M.D. Anderson Cancer Center\",\"University of Texas Medical Branch\",\"University of Texas Southwestern Medical Center at Dallas\",\"University of Toledo\",\"University of Tulsa\",\"UU-W\",\"University of Utah\",\"University of Vermont\",\"University of the Virgin Islands\",\"University of Virginia, Charlottesville\",\"University of Washington\",\"University of West Alabama\",\"University of West Florida\",\"University of Wisconsin System\",\"University of Wisconsin-Eau Claire\",\"University of Wisconsin-Green Bay\",\"University of Wisconsin-LaCrosse\",\"University of Wisconsin-Madison\",\"University of Wisconsin-Milwaukee\",\"University of Wisconsin-Oshkosh\",\"University of Wisconsin-Parkside\",\"University of Wisconsin-Platteville\",\"University of Wisconsin-River Falls\",\"University of Wisconsin-Stevens Point\",\"University of Wisconsin-Stout\",\"University of Wisconsin-Superior\",\"University of Wisconsin-Whitewater\",\"University of Wyoming\",\"Upper Iowa University\",\"Utah State University\",\"Utah Valley State College\",\"Valley City State University\",\"Valdosta State University\",\"Valparaiso University\",\"Vanderbilt University\",\"Vassar College\",\"Vermont Technical College\",\"Villa Julie College\",\"Villanova University\",\"Virginia Commonwealth University\",\"Virginia Intermont College\",\"Virginia Military Institute\",\"Virginia Polytechnic Institute and State University\",\"Virginia State University\",\"Virginia Wesleyan College\",\"Wabash College\",\"Wake Forest University\",\"Walden University\",\"Walla Walla College\",\"Warren Wilson College\",\"Wartburg College\",\"Washburn University\",\"Washington Bible College/Capital Bible Seminary\",\"Washington & Lee University\",\"Washington College\",\"Washington State University\",\"Washington State University at Tri-Cities\",\"Washington State University at Vancouver\",\"Washington University, Saint Louis\",\"Wayne State University\",\"Waynesburg College\",\"Webster University\",\"Wellesley College\",\"Wells College\",\"Wentworth Institute of Technology\",\"Wesley College\",\"Wesleyan University\",\"West Chester University of Pennsylvania\",\"West Coast University\",\"West Georgia College\",\"West Liberty State College\",\"West Texas A&M University\",\"West Virginia University\",\"West Virginia University at Parkersburg\",\"Western Carolina University\",\"Western Connecticut State University\",\"Western Illinois University\",\"Western Kentucky University\",\"Western Maryland College\",\"Western Michigan University\",\"Western Montana College\",\"Western New England College\",\"Western New Mexico University\",\"Western State College\",\"Western Washington University\",\"Westfield State College\",\"Westminster College\",\"Westminster College\",\"Westminster College of Salt Lake City\",\"Westminster Theological Seminary\",\"Westmont College\",\"Wheaton College\",\"Wheaton College, Norton MA\",\"Wheeling Jesuit College\",\"Whitman College\",\"Whittier College\",\"Whitworth College\",\"Wichita State University\",\"Widener University\",\"Wilberforce University\",\"Wilkes University\",\"Willamette University\",\"William Howard Taft University\",\"William Jewell College\",\"William Mitchell College of Law\",\"William Penn College\",\"William Paterson College\",\"William Woods University\",\"Williams College\",\"Wilmington College\",\"Winona State University\",\"Winthrop University\",\"Wittenberg University\",\"Wofford College\",\"Woodbury University\",\"Worcester Polytechnic Institute\",\"Wright State University\",\"Xavier University of Louisiana\",\"Yale University\",\"Yeshiva University\",\"York College of Pennsylvania\",\"Youngstown State University\"];\n\nconst interestsList = [\n    'Accounting', 'Activism', 'Animals And Pets', 'Art', 'Astrology', 'Athletes', 'Aviation', 'Bars', 'Baseball', 'Beauty And Makeup', 'Biking', 'Black Lives Matter', 'Brands/Products', 'Business', 'Careers', 'Cars And Motor Vehicles', \n    'Celebrity', 'College Baseball', 'College Basketball', 'College Football', 'Computer Science', 'Crafts And DYI', 'Crossfit', 'Crypto', 'Culture Race And Ethnicity', 'Dancing', 'Day Trading', 'Documentaries','Economics',\n    'Education', 'Electronics', 'Entertainment', 'Ethics And Philosophy', 'Family And Relationships', 'Fashion', 'Filming', 'Fitness And Nutrition', 'Food And Drink', 'Funny/Humor',\n    'Gaming', 'Gender', 'GeoCities', 'Greek Life', 'Hair', 'Health', 'History', 'Hobbies', 'Hockey', 'Home And Garden', 'Investing', 'International Culture', 'Internet Culture', 'Intramural Sports', 'Latin Culture', 'Marijuna', 'Marketplace And Deals',\n    'Mature Themes And Adult Content', 'Medical And Mental Health', 'Meditation', \"Men's Health\", 'Military', 'Movies', 'Music', 'NBA', 'NFL', 'NHL', 'Nursing', 'Only Fans',\n    'Outdoors And Nature', 'Partying', 'People', 'Personal Connections', 'Photography', 'Podcasts And Streamers', 'Politics', 'Pop Culture', 'Programming', 'Public Policy', 'Reading Writing And Literature', \n    'Religion And Spirituality', 'Robinhood Trading', 'Rowing', 'Running', 'Science', 'Sexual Health And Orientation', 'Side Hustle', 'Sports', 'Soccer', 'Social Justice', 'Software Engineering', 'Streaming', 'Tabletop Games', 'Television', 'Television Personalities', 'Theatre', 'Track & Field', 'Volleyball',\n    \"Women's Health\", 'World News', 'Working Out/Gym', 'Work/Labor',\n];\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n    card: {\n        margin: 'auto',\n        maxWidth: 450,\n    },\n    topField: {\n        marginTop: 20,\n    },\n    topMarg: {\n        marginTop: 30,\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nfunction Signup(props) {\n    let facebookName; //This variable will store the users first and last name from Facebook\n    const classes = useStyles(); //Styles for the component.\n    const history = useHistory(); //Browser window history for routing. \n    const [open, setOpen] = useState(false); //Open variable for the backdrop when the form sent to the server.\n    const formRef = useRef(null); //Ref for the ValidatorForm component.\n    const [username, setUsername] = useState(''); //Username for the user.\n    const [password, setPasssword] = useState(''); //Password for the user.\n    const [firstName, setFirstname] = useState(''); //First name of the user.\n    const [lastName, setLastname] = useState(''); //Last name of the user.\n    const [email, setEmail] = useState(''); //Email of the user. Will need some regex rules.\n    const [town, setTown] = useState(myCities[0]); //The users hometown will come from a list of towns.\n    const [userState, setUserState] = useState(myStates[0]); //This will be the home state that the user is from.\n    const [college, setCollege] = useState(myColleges[0]); //This will be the college the user attended. \"None\" if they didn't attend one. \n    const [birthdate, setBirthDate] = useState(new Date(1989, 0, 1)); //The user must select a birthdate. \n    const [interests, setInterests] = useState([]); //An empty array that will store the interests for a user.\n    const [twitterHandle, setTwitterHandle] = useState(''); //The twitter handle for the user. \n    const [instaHandle, setInstaHandle] = useState(''); //Sets the Instagram handle for the user. \n    const [youtubeChannel, setYoutubeChannel] = useState(''); //Sets the Youtube channel for the user. \n    const [avatar, setAvatar] = useState(null); //This will store the Avatar for the user. \n    const [profileTheme, setProfileTheme] = useState('#00143C'); //This will set the profile theme color for the user. \n    const [agreeToTerms, setAgreeToTerms] = useState(false); //This will check to see if the user agrees to the terms of service. \n    const [bio, setBio] = useState(''); //This will store the mini bio the user creates for their profile.\n    const [currentLocation, setCurrentLocation] = useState({}); //Object that will store keys for the users current latitude and longitude. \n    const regularExpressions = {\n        usernameExpression: /^\\w+$/,\n        alphaStartRe: /^[A-Za-z]+$/,\n        emailRe: /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/,\n    }; //Regular expressions to make sure username is valid. \n    useEffect(() => {\n        //First, if the user is not null, we need to route them to the profile page of the user. \n        if(props.user) {\n            history.push('/profile'); //For now we will go back, but in the future we will go to the profile page.\n        }\n        props.dispatch({type: 'ThemeChange', payload: 'rgb(0, 20, 60)'}); //Change to the default theme color.\n        //Second we will get the current Geolocation of the user if they've enabled location tracking. \n        if(\"geolocation\" in navigator) {\n            //If the user has enabled geolocation, get the current position and save latitude and longitude for currentLocation.\n            navigator.geolocation.getCurrentPosition(function(position) {\n                console.log(\"Latitude is :\", position.coords.latitude);\n                console.log(\"Longitude is :\", position.coords.longitude);\n                setCurrentLocation({\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude,\n                });\n              }, function(err) {\n                  //Error callback for location tracking. Set currentPosition to null.\n                  console.log(err.message);\n                  setCurrentLocation(null);\n              });\n        }\n        else {\n            //Else, if the user has not enabled Geolocation, set the currentLocation to null. \n            console.log('User has not given Geolocation permissions');\n            setCurrentLocation(null);\n        }\n\n        //This validation rule will ensure that the username follows the proper regex rules. \n        ValidatorForm.addValidationRule('usernameValid', v => {\n            if(!regularExpressions.usernameExpression.test(v)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //This rule will ensure that the username and password is at least 6 characters. \n        ValidatorForm.addValidationRule('enoughCharacters', v => {\n            if(v.length < 6) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //This rule will ensure that a username starts with an Alphanumberic character. \n        ValidatorForm.addValidationRule('validStartChar', v => {\n            if(!regularExpressions.alphaStartRe.test(v.slice(0, 1))) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //This rule will ensure that a username is not more than 24 characters long.\n        ValidatorForm.addValidationRule('tooManyChars', v => {\n            if(v.length > 24) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //This rule will make sure the length of certain fields are valid \n        ValidatorForm.addValidationRule('isFilled', v => {\n            if(v.length < 1) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //This rule will ensure that emails have a valid email format \n        ValidatorForm.addValidationRule('mailValid', v => {\n            if(!regularExpressions.emailRe.test(v)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        ValidatorForm.addValidationRule('minBio', v => {\n            if(v.length < 20) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        ValidatorForm.addValidationRule('maxBio', v => {\n            if(v.length > 300) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n    }, []);\n\n    function preventSpaces(e) {\n        //This function will prevent a user from adding spaces to their username \n        if(e.keyCode === 32) {\n            e.preventDefault();\n            return false;\n        }\n    }\n\n    function handleBirthdateChange(e, newVal) {\n        //Function that will handle birthday change and ensure the user is at least 13 years old \n        let currentTime = Date.now();\n        let utcBirthDateTime = new Date(newVal);\n        if(currentTime - utcBirthDateTime < 410240038000) {\n            swal(\n                'Uh Oh!',\n                'You must be at least 13 years old to sign up for GeoCities!',\n                'error',\n            );\n        }\n        else {\n            setBirthDate(newVal);\n        }\n    }\n\n    function handleInterestsChange(e) {\n        //This function will add interests to the interests state variable \n        if(e.target.checked) {\n            if(interests.length <= 9) {\n                setInterests(interests => [...interests, e.target.value]);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'You can only select up to 10 interests!',\n                    'error',\n                );\n            }\n        }\n        else if(!e.target.checked) {\n            setInterests(interests.filter(interest => interest !== e.target.value));\n        }\n    }\n\n    function resizerFunction(file) {\n        //This is a wrapper for the file resizer \n        return new Promise(resolve => {\n            Resizer.imageFileResizer(\n                file,\n                600,\n                600,\n                'JPEG',\n                100,\n                0,\n                uri => {\n                    resolve(uri);\n                },\n                'blob',\n            );\n        });\n    }\n\n    async function handleAvatarChange(e) {\n        //This function will handle storing an avatar in the avatar state variable and resizing it. \n        let file = e.target.files[0];\n        let resizedAvatar = await resizerFunction(file);\n        setAvatar(resizedAvatar);\n    }\n\n    function handleAgreementChange(e) {\n        if(e.target.checked) {\n            setAgreeToTerms(true);\n        }\n        else if(!e.target.checked) {\n            setAgreeToTerms(false);\n        }\n    }\n\n    function facebookResponse(res) {\n        let userFirstLast = firstName + ' ' + lastName;\n        facebookName = res.name;\n        if(res.name !== userFirstLast) {\n            swal(\n                'Uh Oh!',\n                'Your first and last name much match your first and last name on Facebook!',\n                'error',\n            );\n        }\n        else {\n            swal(\n                'Whoo!',\n                'Your first and last name matches your Facebook first and last name',\n                'info',\n            );\n        }\n    }\n\n    async function formSubmit() {\n        //This function will handle submitting the form to the server \n        setOpen(true);\n        let curDate = Date.now();\n        let bDate = new Date(birthdate).getTime();\n        let validForm = await formRef.current.isFormValid();\n        if(!validForm) {\n            swal(\n                'Uh Oh!',\n                'Make sure you filled out each form field properly, including required fields',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(curDate - bDate < 410240038000) {\n            swal(\n                'Uh Oh!',\n                'You must be at least 13 years old to sign up!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(!town) {\n            swal(\n                'Uh Oh!',\n                'You must enter the city you live in or one that is nearby!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(interests.length < 1) {\n            swal(\n                'Uh Oh!',\n                'You must enter at least one interest!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(interests.length > 10) {\n            swal(\n                'Uh Oh!',\n                'You cannot enter more than 10 interests!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(!avatar) {\n            swal(\n                'Uh Oh!',\n                'You must submit an avatar profile picture!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(agreeToTerms === false) {\n            swal(\n                'Uh Oh!',\n                'You must agree to the terms of service to join GeoCities!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(firstName + ' ' + lastName !== facebookName) {\n            swal(\n                'Uh Oh!',\n                `Your first and last name must match your Facebook first and last name!: ${firstName} ${lastName} ${facebookName}`,\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else {\n            let fd = new FormData();\n            fd.append('username', username);\n            fd.append('password', password);\n            fd.append('firstName', firstName);\n            fd.append('lastName', lastName);\n            fd.append('email', email.trim());\n            fd.append('birthDate', birthdate);\n            fd.append('utcBirthdate', new Date(birthdate).getTime());\n            fd.append('dateCreated', Date.now());\n            fd.append('town', town);\n            fd.append('userState', userState);\n            fd.append('college', college);\n            fd.append('interests', interests);\n            fd.append('twitterHandle', twitterHandle);\n            fd.append('instaHandle', instaHandle);\n            fd.append('youtubeChannel', youtubeChannel);\n            fd.append('bio', bio);\n            fd.append('currentLocation', currentLocation);\n            fd.append('avatar', avatar, 'avatar.jpg');\n            fd.append('profileTheme', profileTheme);\n\n            return axios({\n                method: 'POST',\n                data: fd,\n                url: 'http://192.168.0.17:3001/api/signup',\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.user) {\n                    props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                    props.dispatch({type: 'ThemeChange', payload: response.data.user.profileTheme});\n                    swal(\n                        'Great!',\n                        'You successfully joined GeoCities! Search posts, connect with others, join communities, and have fun!',\n                        'success',\n                    );\n                    setOpen(false);\n                    history.push('/profile');\n                }\n                else if(response.data === 'username taken') {\n                    swal(\n                        'Uh Oh!',\n                        'That username is taken! Please select another one.',\n                        'error',\n                    );\n                    setOpen(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                setOpen(false);\n                swal(\n                    'Uh Oh!',\n                    'There was an error signing you up! Please try again',\n                    'error',\n                );\n            });\n        }\n    }\n\n    return (\n        <Grid \n            container \n            style={{\n                marginTop: 100,\n            }}\n        >\n            <Grid \n                item \n                xs={12} \n            >\n                <Backdrop \n                    open={open} \n                >\n                    <Box \n                        mb={3} \n                    >\n                        <CircularProgress \n                            color='primary' \n                        />\n                    </Box>\n                    <Box>\n                        <Typography \n                            variant='body1' \n                            component='p' \n                        >\n                            Loading...\n                        </Typography>\n                    </Box>\n                </Backdrop>\n                <Card \n                    className={classes.card} \n                    hidden={open}\n                >\n                    <CardContent>\n                        <Typography \n                        variant='h6' \n                        component='h6' \n                        align='center'\n                        >\n                            Sign up today!\n                            <SvgIcon  \n                                style={{\n                                    color: 'rgb(0, 20, 60)',\n                                }}\n                            >\n                                <path d=\"M 10.050781 0.222656 C 9.261719 0.355469 8.6875 0.765625 8.472656 1.363281 C 8.402344 1.558594 8.394531 1.902344 8.449219 2.085938 C 8.621094 2.644531 9.289062 3.136719 9.988281 3.226562 C 10.082031 3.234375 10.347656 3.246094 10.574219 3.242188 C 11.0625 3.238281 11.152344 3.257812 11.332031 3.414062 C 11.5 3.5625 11.566406 3.738281 11.585938 4.046875 C 11.589844 4.179688 11.585938 4.332031 11.574219 4.386719 L 11.550781 4.480469 L 11.214844 4.503906 C 8.734375 4.695312 6.742188 5.953125 5.914062 7.84375 C 5.265625 9.324219 5.53125 11.039062 6.597656 12.300781 C 6.824219 12.570312 7.167969 12.90625 7.351562 13.035156 C 7.410156 13.078125 7.460938 13.117188 7.460938 13.121094 C 7.460938 13.125 7.359375 13.179688 7.230469 13.238281 C 6.515625 13.582031 5.902344 14.085938 5.648438 14.535156 C 5.445312 14.898438 5.371094 15.320312 5.460938 15.632812 C 5.617188 16.203125 6.226562 16.734375 7.144531 17.109375 C 7.308594 17.175781 7.433594 17.230469 7.425781 17.234375 C 7.421875 17.238281 7.292969 17.285156 7.140625 17.339844 C 5.796875 17.804688 4.949219 18.566406 4.664062 19.566406 C 4.582031 19.851562 4.574219 20.457031 4.648438 20.691406 C 4.828125 21.277344 5.1875 21.757812 5.785156 22.230469 C 6.644531 22.902344 7.910156 23.375 9.476562 23.597656 C 10.308594 23.71875 10.734375 23.746094 11.914062 23.746094 C 12.980469 23.746094 13.308594 23.734375 14.046875 23.664062 C 14.910156 23.578125 15.722656 23.4375 16.425781 23.253906 C 18.523438 22.695312 19.863281 21.703125 20.296875 20.386719 C 20.414062 20.035156 20.433594 19.890625 20.433594 19.449219 C 20.433594 19.085938 20.421875 18.996094 20.371094 18.808594 C 20.210938 18.242188 19.941406 17.851562 19.417969 17.445312 C 18.839844 16.992188 18.0625 16.664062 17.011719 16.4375 C 15.882812 16.1875 14.839844 16.105469 12.277344 16.074219 C 10.996094 16.058594 10.128906 16.042969 9.957031 16.03125 C 9.875 16.027344 9.707031 16.019531 9.578125 16.011719 C 8.390625 15.945312 7.71875 15.707031 7.449219 15.261719 C 7.375 15.144531 7.367188 15.101562 7.367188 14.945312 C 7.367188 14.78125 7.375 14.753906 7.464844 14.609375 C 7.519531 14.523438 7.617188 14.40625 7.679688 14.347656 C 7.832031 14.210938 8.136719 14.023438 8.386719 13.914062 L 8.59375 13.824219 L 8.691406 13.871094 C 8.949219 13.996094 9.578125 14.21875 9.902344 14.300781 C 12.304688 14.929688 14.867188 14.4375 16.605469 13.019531 C 18.023438 11.859375 18.652344 10.246094 18.296875 8.664062 C 18.117188 7.855469 17.640625 7.050781 16.949219 6.378906 C 16.722656 6.15625 16.144531 5.714844 15.871094 5.550781 C 15.1875 5.144531 14.410156 4.835938 13.644531 4.660156 C 13.386719 4.601562 12.800781 4.511719 12.683594 4.511719 C 12.628906 4.511719 12.582031 4.503906 12.570312 4.492188 C 12.5625 4.480469 12.578125 4.363281 12.609375 4.234375 C 12.699219 3.8125 12.734375 3.5 12.734375 3.003906 C 12.730469 2.464844 12.691406 2.203125 12.558594 1.796875 C 12.273438 0.953125 11.609375 0.386719 10.734375 0.242188 C 10.574219 0.214844 10.175781 0.203125 10.050781 0.222656 Z M 12.519531 6.125 C 14.375 6.332031 15.828125 7.410156 16.210938 8.871094 C 16.265625 9.058594 16.273438 9.167969 16.273438 9.519531 C 16.273438 9.882812 16.265625 9.972656 16.210938 10.183594 C 15.96875 11.101562 15.3125 11.871094 14.34375 12.378906 C 13.535156 12.804688 12.53125 13.011719 11.59375 12.945312 C 10.949219 12.898438 10.546875 12.8125 9.96875 12.585938 C 8.765625 12.117188 7.933594 11.265625 7.640625 10.203125 C 7.5625 9.90625 7.554688 9.183594 7.632812 8.886719 C 8.003906 7.429688 9.464844 6.335938 11.308594 6.125 C 11.636719 6.089844 12.191406 6.085938 12.519531 6.125 Z M 9.394531 17.675781 C 9.945312 17.738281 10.980469 17.777344 12.8125 17.816406 C 14.164062 17.84375 14.667969 17.863281 15.253906 17.933594 C 15.9375 18.007812 16.398438 18.109375 16.84375 18.269531 C 17.6875 18.574219 18.121094 19.050781 18.121094 19.660156 C 18.121094 20.058594 17.925781 20.394531 17.492188 20.726562 C 16.746094 21.304688 15.425781 21.6875 13.632812 21.855469 C 13.140625 21.902344 11.339844 21.910156 10.894531 21.867188 C 9.703125 21.753906 8.859375 21.570312 8.21875 21.285156 C 7.699219 21.054688 7.308594 20.742188 7.121094 20.414062 C 6.972656 20.148438 6.929688 19.777344 7.015625 19.460938 C 7.191406 18.816406 7.855469 18.191406 8.832031 17.746094 C 8.953125 17.691406 9.066406 17.644531 9.082031 17.644531 C 9.097656 17.644531 9.238281 17.660156 9.394531 17.675781 Z M 9.394531 17.675781\" />\n                                <path d=\"M 11.617188 8.546875 C 11.261719 8.625 10.957031 8.828125 10.792969 9.101562 C 10.691406 9.261719 10.691406 9.269531 10.691406 9.527344 C 10.691406 9.792969 10.691406 9.792969 10.796875 9.960938 C 11.070312 10.394531 11.644531 10.617188 12.242188 10.519531 C 12.75 10.433594 13.160156 10.082031 13.238281 9.667969 C 13.328125 9.171875 12.929688 8.691406 12.320312 8.550781 C 12.144531 8.511719 11.792969 8.507812 11.617188 8.546875 Z M 11.617188 8.546875 \"/>\n                            </SvgIcon>\n                        </Typography>\n                        <ValidatorForm \n                            ref={formRef}\n                            onSubmit={e => e.preventDefault()}\n                        >\n                            <TextValidator \n                                type='text' \n                                label='Username'\n                                placeholder='Username'\n                                value={username}\n                                onChange={e => setUsername(e.target.value)}\n                                onKeyDown={preventSpaces}\n                                color='primary'\n                                variant='outlined'\n                                className={classes.topField}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                aria-label='Username'\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <AccountCircleIcon />\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                helperText='Username must be between 6 and 24 characters, can only contain letters, numbers, and underscores, and must start with a letter!'\n                                validators={['usernameValid', 'enoughCharacters', 'validStartChar', 'tooManyChars']}\n                                errorMessages={['Username can only consist of letters numbers and underscores. Must start with a letter!', 'Username must be at least 6 characters long!', 'Username must start with a letter!', 'Username cannot be more than 24 characters long!']}\n                                fullWidth\n                                required\n                            />\n                            <TextValidator \n                                className={classes.topMarg}\n                                type='password'\n                                label='Password'\n                                placeholder='Password'\n                                value={password}\n                                onChange={e => setPasssword(e.target.value)}\n                                variant='outlined' \n                                color='primary' \n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <LockIcon />\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                aria-label='Password' \n                                helperText='Password must be at least 6 characters long!'\n                                validators={['enoughCharacters']}\n                                errorMessages={['Password must be at least 6 characters long!']}\n                                fullWidth \n                                required \n                            />\n                            <TextValidator \n                                className={classes.topMarg}\n                                type='text' \n                                label='First name'\n                                placeholder='First name' \n                                value={firstName}\n                                onChange={e => setFirstname(e.target.value)} \n                                variant='outlined' \n                                color='primary'\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                aria-label='First name' \n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <AccountCircleIcon />\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                helperText='First name must match the first name used on your Facebook profile!'\n                                validators={['isFilled']}\n                                errorMessages={['First name must match the first name used on your Facebook profile!']}\n                                fullWidth \n                                required \n                            />\n                            <TextValidator \n                                className={classes.topMarg} \n                                type='text'\n                                label='Last name'\n                                placeholder='Last name'\n                                value={lastName}\n                                onChange={e => setLastname(e.target.value)}\n                                variant='outlined'\n                                color='primary' \n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                aria-label='Last name' \n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <AccountCircleIcon />\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                helperText='Last name must match the last name used on your Facebook profile!'\n                                validators={['isFilled']}\n                                errorMessages={['Last name must match the last name used on your Facebook profile!']}\n                                fullWidth \n                                required \n                            />\n                            <TextValidator \n                                className={classes.topMarg}\n                                type='email'\n                                label='Email'\n                                placeholder='Email'\n                                value={email}\n                                onKeyDown={preventSpaces}\n                                onChange={e => setEmail(e.target.value)}\n                                helperText='Must enter a valid email!'\n                                variant='outlined' \n                                color='primary' \n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <EmailIcon />\n                                        </InputAdornment>\n                                    )\n                                }}\n                                aria-label='Email'\n                                validators={['isFilled', 'mailValid']}\n                                errorMessages={['Must enter an email address!', 'Email must be valid!']}\n                                fullWidth \n                                required \n                            />\n                            <Autocomplete \n                                className={classes.topMarg} \n                                value={town}\n                                onChange={(e, newVal) => setTown(newVal)}\n                                options={myCities}\n                                getOptionLabel={option => option}\n                                renderOption={option => (\n                                    <Typography \n                                        variant='body1' \n                                        component='p'\n                                    >\n                                        {option}\n                                    </Typography>\n                                )}\n                                renderInput={params => (\n                                    <TextField \n                                        {...params} \n                                        color='primary' \n                                        variant='outlined'\n                                        label='City' \n                                        placeholder='City' \n                                        helperText='If your city is not in the list, select the nearest city!'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        fullWidth\n                                        required \n                                    />\n                                )}\n                            />\n                            <Typography \n                                className={classes.topMarg} \n                                variant='body1' \n                                component='p' \n                            >\n                                Select your state!\n                            </Typography>\n                            <Select \n                                value={userState} \n                                onChange={e => setUserState(e.target.value)} \n                                variant='outlined' \n                                color='primary' \n                                fullWidth\n                            >\n                                {myStates.map((item, index) => (\n                                    <MenuItem \n                                        key={index.toString()}\n                                        value={item} \n                                    >\n                                        {item}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <Autocomplete \n                                className={classes.topMarg} \n                                value={college}\n                                onChange={(e, newVal) => setCollege(newVal)}\n                                options={myColleges}\n                                getOptionLabel={option => option}\n                                renderOption={option => (\n                                    <Typography \n                                        variant='body1'\n                                        component='p' \n                                    >\n                                        {option}\n                                    </Typography>\n                                )}\n                                renderInput={params => (\n                                    <TextField \n                                        {...params} \n                                        color='primary'\n                                        variant='outlined' \n                                        label='College' \n                                        placeholder='College'\n                                        helperText='Select your college or \"None\" if you did not attend!'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        fullWidth \n                                        required \n                                    />\n                                )}\n                            />\n                            <MuiPickersUtilsProvider \n                                utils={FnsUtils}\n                                className={classes.topMarg} \n                            >\n                                <KeyboardDatePicker \n                                    className={classes.topMarg}\n                                    variant='inline' \n                                    label='Birthdate'\n                                    aria-label='Birthdate selector'\n                                    format='MM/dd/yyyy'\n                                    value={birthdate}\n                                    onChange={handleBirthdateChange}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    helperText='You must be at least 13 years old to sign up for GeoCities!'\n                                />\n                            </MuiPickersUtilsProvider>\n                            <FormControl \n                                className={classes.topMarg} \n                                component='fieldset' \n                            >\n                                <FormLabel \n                                    component='legend' \n                                >\n                                    Select at least 1 interest and up to 10 interests!\n                                </FormLabel>\n                                <FormGroup \n                                    column \n                                >\n                                    {interestsList.map((interest, index) => (\n                                        <FormControlLabel \n                                            key={index.toString()}\n                                            value={interest}\n                                            onChange={handleInterestsChange}\n                                            label={interest}\n                                            labelPlacement='end' \n                                            control={\n                                                <Checkbox \n                                                    color='primary'\n                                                    checked={interests.includes(interest)}\n                                                />\n                                            }\n                                        />\n                                    ))}\n                                </FormGroup>\n                            </FormControl>\n                            <TextField \n                                className={classes.topMarg}\n                                label='Twitter handle'\n                                placeholder='Twitter handle (optional)'\n                                value={twitterHandle}\n                                onChange={e => setTwitterHandle(e.target.value)}\n                                variant='outlined'\n                                color='primary'\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <Icon \n                                                path={mdiTwitter} \n                                                size={1} \n                                            />\n                                        </InputAdornment>\n                                    )\n                                }}\n                                helperText='Add your Twitter handle for people to connect with you.'\n                                fullWidth\n                            />\n                            <TextField \n                                className={classes.topMarg}\n                                label='Instagram handle'\n                                placeholder='Instagram handle (optional)'\n                                value={instaHandle}\n                                onChange={e => setInstaHandle(e.target.value)}\n                                variant='outlined' \n                                color='primary' \n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <Icon \n                                                path={mdiInstagram}\n                                                size={1} \n                                            />\n                                        </InputAdornment>\n                                    )\n                                }}\n                                helperText='Add your instagram handle for people to connect with you.'\n                                fullWidth \n                            />\n                            <TextField \n                                className={classes.topMarg} \n                                label='Youtube channel'\n                                placeholder='Youtube channel url link (optional)'\n                                value={youtubeChannel}\n                                onChange={e => setYoutubeChannel(e.target.value)}\n                                variant='outlined'\n                                color='primary' \n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment \n                                            position='start' \n                                        >\n                                            <Icon \n                                                path={mdiYoutube} \n                                                size={1} \n                                            />\n                                        </InputAdornment>\n                                    )\n                                }}\n                                helperText='Add the url link for your Youtube channel to increase engagement.' \n                                fullWidth \n                            />\n                            <Typography \n                                className={classes.topMarg} \n                                variant='body1' \n                                component='p' \n                            >\n                                You must upload an avatar image for your profile!\n                            </Typography>\n                            <label \n                                className={classes.topMarg} \n                                html-for='avatar' \n                            >\n                                <input \n                                    className={classes.input} \n                                    type='file'\n                                    name='avatar' \n                                    id='avatar' \n                                    accept='image/jpg, image/jpeg, image/png' \n                                    onChange={handleAvatarChange}\n                                    capture\n                                    required \n                                />\n                                <Button \n                                    color='primary' \n                                    variant='contained' \n                                    component='span' \n                                >\n                                    <CameraIcon />\n                                </Button>\n                            </label>\n                            <Typography \n                                className={classes.topMarg} \n                                variant='body1'\n                                component='p' \n                            >\n                                Select a profile theme color!\n                            </Typography>\n                            <SwatchesPicker \n                                color={profileTheme} \n                                onChange={color => setProfileTheme(color.hex)} \n                                colors={[\n                                    ['#00143C', '#2471A3', '#3498DB'],\n                                    ['#641E16', '#C0392B', '#E74C3C'],\n                                    ['#0E6655', '#45B39D', '#58D68D'],\n                                    ['#5B2C6F', '#8E44AD', '#C39BD3'],\n                                    ['#BA4A00', '#DC7633', '#E67E22'],\n                                    ['#000000', '#34495E', '#7F8C8D'],\n                                ]}\n                            />\n                            <Typography \n                                className={classes.topMarg}\n                                variant='subtitle1'\n                                component='p' \n                                color={bio.length > 300 ? 'error' : 'default'}\n                            >\n                                Bio length: {bio.length}/300\n                            </Typography>\n                            <TextValidator \n                                label='Bio'\n                                placeholder='Enter a brief bio about yourself. Must be at least 20 characters long and can only be up to 300 characters.'\n                                helperText='Bio must be at least 20 characters long and can only be up to 300'\n                                value={bio}\n                                onChange={e => setBio(e.target.value)} \n                                validators={['minBio', 'maxBio']}\n                                errorMessages={['Bio must be at least 20 characters!', 'Bio can only be 300 characters long!']}\n                                variant='outlined' \n                                color='primary' \n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                multiline \n                                rows={4}\n                                fullWidth\n                                required \n                            />\n                            <Accordion \n                                className={classes.topMarg}\n                            >\n                                <AccordionSummary\n                                    expandIcon={<ChevronDownIcon />}\n                                >\n                                    <FormControlLabel \n                                        value={agreeToTerms}\n                                        onChange={handleAgreementChange}\n                                        label='Agree to terms of service' \n                                        labelPlacement='start' \n                                        control={\n                                            <Checkbox \n                                                color='primary' \n                                                checked={agreeToTerms}\n                                            />\n                                        }\n                                    />\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Typography \n                                        variant='body1' \n                                        component='p' \n                                    >\n                                        You must be at least 13 years old to join GeoCities. Please agree to be respectful to other users. Debate is okay, but disrespect is not. Disrespect, hate, and violence will not be tolerated on the platform. Any illegal content is not approved by GeoCities and is forbidden from being posted on the platform. Fake accounts are not approved by GeoCities and your real identity must be used. \n                                    </Typography>\n                                </AccordionDetails>\n                            </Accordion>\n                            <FacebookLogin \n                                appId='145621200485572'\n                                autoLoad={false}\n                                fields='name,email,picture'\n                                callback={facebookResponse}\n                                isMobile={false}\n                                render={renderProps => (\n                                    <Button \n                                        variant='contained' \n                                        color='primary' \n                                        onClick={renderProps.onClick} \n                                        className={classes.topMarg}\n                                    >\n                                        Facebook verification\n                                    </Button>\n                                )}\n                            />\n                            <br></br>\n                            <Button \n                                className={classes.topMarg} \n                                color='primary'\n                                variant='contained'\n                                onClick={formSubmit}\n                            >\n                                Finalize Registration\n                            </Button>\n                        </ValidatorForm>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.user,\n        theme: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(Signup);","/Users/simeonikudabo/Downloads/geocities/src/components/GeouserFollowers.js",[],"/Users/simeonikudabo/Downloads/geocities/src/components/BuildCommunity.js",["189"],"import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/CameraAlt';\nimport swal from 'sweetalert';\nimport axios from 'axios'; \nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress'; \nimport Resizer from 'react-image-file-resizer';\nimport { SwatchesPicker } from 'react-color';\nimport { useHistory }  from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        marginTop: 100,\n    },\n    card: {\n        margin: 'auto',\n        maxWidth: 450,\n    },\n    topField: {\n        marginTop: 20,\n    },\n    fieldMarg: {\n        marginTop: 30,\n    },\n    topMarg: {\n        marginTop: 10,\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nconst communityTopics = [\n    'Accounting', 'Activism', 'Animals And Pets', 'Art', 'Astrology', 'Athletes', 'Aviation', 'Bars', 'Baseball', 'Beauty And Makeup', 'Biking', 'Black Lives Matter', 'Brands/Products', 'Business', 'Careers', 'Cars And Motor Vehicles', \n    'Celebrity', 'College Baseball', 'College Basketball', 'College Football', 'Computer Science', 'Crafts And DYI', 'Crossfit', 'Crypto', 'Culture Race And Ethnicity', 'Dancing', 'Day Trading', 'Documentaries','Economics',\n    'Education', 'Electronics', 'Entertainment', 'Ethics And Philosophy', 'Family And Relationships', 'Fashion', 'Filming', 'Fitness And Nutrition', 'Food And Drink', 'Funny/Humor',\n    'Gaming', 'Gender', 'GeoCities', 'Greek Life', 'Hair', 'Health', 'History', 'Hobbies', 'Hockey', 'Home And Garden', 'Investing', 'International Culture', 'Internet Culture', 'Intramural Sports', 'Latin Culture', 'Marijuna', 'Marketplace And Deals',\n    'Mature Themes And Adult Content', 'Medical And Mental Health', 'Meditation', \"Men's Health\", 'Military', 'Movies', 'Music', 'NBA', 'NFL', 'NHL', 'Nursing', 'Only Fans',\n    'Outdoors And Nature', 'Partying', 'People', 'Personal Connections', 'Photography', 'Podcasts And Streamers', 'Politics', 'Pop Culture', 'Programming', 'Public Policy', 'Reading Writing And Literature', \n    'Religion And Spirituality', 'Robinhood Trading', 'Rowing', 'Running', 'Science', 'Sexual Health And Orientation', 'Side Hustle', 'Sports', 'Soccer', 'Social Justice', 'Software Engineering', 'Streaming', 'Tabletop Games', 'Television', 'Television Personalities', 'Theatre', 'Track & Field', 'Volleyball',\n    \"Women's Health\", 'World News', 'Working Out/Gym', 'Work/Labor',\n];\n\nfunction BuildCommunity(props) {\n    const classes = useStyles(); //Custom styles\n    const history = useHistory(); //History API access\n    const formRef = useRef(null); //Form reference\n    const [name, setName] = useState(''); //State for community name. \n    const [title, setTitle] = useState(''); //State for community title (100 character max).\n    const [topics, setTopics] = useState([]); //Community topics.\n    const [communityTheme, setCommunityTheme] = useState('#00143C'); //Community theme color. Default to dark blue.\n    const [avatar, setAvatar] = useState(null); //Community profile image. \n    const [description, setDescription] = useState(''); //Community description string. \n    const [open, setOpen] = useState(false);\n    const regularExpressions = {\n        nameExpression: /^\\w+$/,\n        alphaStartRe: /^[A-Za-z]+$/,\n    }; //Regular expressions for a valid community name with letters, numbers, and underscores, along with another regex for the community name to start with a letter.\n\n    useEffect(() => {\n        //First, check to see if the user is logged into GeoCities. Redirect them to login page if not. \n        if(props.mainUser === null) {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to build a community!',\n                'error',\n            );\n            history.push('/');\n        }\n        else {\n            props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme}); //Update profile theme.\n        }\n\n        //Now add some form validation rules. \n        //Rule that the name (or title) not be empty. \n        ValidatorForm.addValidationRule('nameRequired', v => {\n            if(v.trim() === '') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule that the length of a name for a community be between 6 and 30 characters\n        ValidatorForm.addValidationRule('nameLength', v => {\n            if(v.length < 6) {\n                return false;\n            }\n            else if(v.length > 50) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule that the title of a community be between 10 and 75 characters \n        ValidatorForm.addValidationRule('titleLength', v => {\n            if(v.length < 10) {\n                return false;\n            }\n            else if(v.length > 75) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //The rule below ensures that the name is valid and follows regex rules.\n        ValidatorForm.addValidationRule('nameRe', v => {\n            if(!regularExpressions.nameExpression.test(v)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //The rule below ensures the name starts with an alpha character \n        ValidatorForm.addValidationRule('alphaStart', v => {\n            if(!regularExpressions.alphaStartRe.test(v.slice(0, 1))) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //The rule below ensures that the community description is at least 10 characters and at most 300. \n        ValidatorForm.addValidationRule('descriptionLength', v => {\n            if(v.length < 10) {\n                return false;\n            }\n            else if(v.length > 300) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }, []);\n\n    function preventSpaces(e) {\n        //This function prevents spaces in the community name \n        if(e.keyCode === 32) {\n            e.preventDefault();\n            return false;\n        }\n    }\n\n    function handleTopicsChange(e) {\n        //This function will add topics to the topics array. It will remove the topic if it is unchecked.\n        if(e.target.checked) {\n            if(topics.length <= 9) {\n                setTopics(topics => [...topics, e.target.value]);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'You can only select up to 10 topics!',\n                    'error',\n                );\n            }\n        }\n        else if(!e.target.checked) {\n            setTopics(topics.filter(topic => topic !== e.target.value));\n        }\n    }\n\n    function resizerFunction(file) {\n        //This is a wrapper for the file resizer \n        return new Promise(resolve => {\n            Resizer.imageFileResizer(\n                file,\n                600,\n                600,\n                'JPEG',\n                100,\n                0,\n                uri => {\n                    resolve(uri);\n                },\n                'blob',\n            );\n        });\n    }\n\n    async function handleAvatarChange(e) {\n        //This function will handle storing an avatar in the avatar state variable and resizing it. \n        let file = e.target.files[0];\n        let resizedAvatar = await resizerFunction(file);\n        setAvatar(resizedAvatar);\n    }\n\n    async function buildCommunity() {\n        setOpen(true);\n\n        let formValid = formRef.current.isFormValid();\n\n        if(!formValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure you filled out the community builder form properly!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(avatar === null) {\n            swal(\n                'Uh Oh!',\n                'Make sure you add a community avatar!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(topics.length < 1) {\n            swal(\n                'Uh Oh!',\n                'You must select at least one relevant topic for this community!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else {\n            let fd = new FormData();\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let createdOn = `${month} ${day}, ${year}`;\n            fd.append('createdOn', createdOn);\n            fd.append('username', props.mainUser.username);\n            fd.append('uniqueUserId', props.mainUser.uniqueUserId);\n            fd.append('name', name);\n            fd.append('title', title);\n            fd.append('communityTheme', communityTheme);\n            fd.append('avatar', avatar, 'avatar.jpg');\n            fd.append('description', description);\n            fd.append('topics', topics);\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/build/community',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data !== 'error') {\n                    swal(\n                        'Great!',\n                        'Successfully built new community!',\n                        'success',\n                    );\n                    setOpen(false);\n                    history.push(`/community/${response.data}`);\n                }\n                else if(response.data === 'name taken') {\n                    swal(\n                        'Uh Oh!',\n                        'That community name is taken! Please select another',\n                        'error',\n                    );\n                    setOpen(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error building this community! Please try again.',\n                        'error',\n                    );\n                    setOpen(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error building that community!',\n                    'error',\n                );\n                setOpen(false);\n            });\n        }\n    }\n\n\n    if(props.mainUser !== null) {\n        //Return this layout if the user is signed in. \n        return (\n            <Grid \n                container \n                className={classes.root}\n            >\n                <Card \n                    className={classes.card} \n                >\n                    <CardContent>\n                        <Typography \n                            variant='h6' \n                            component='h6' \n                            align='center' \n                        >\n                            Build a GeoCities community!\n                        </Typography>\n                        <Typography \n                            component='small'\n                            className={classes.topMarg} \n                            align='center' \n                        >\n                            GeoCities allows you to build interactive communities around topics of interest. As the community builder,\n                            you will also be the community moderator. You will have the ability to block or \n                            add users to the community, alter community settings, delete posts and comments, \n                            manage the chatroom, and set community rules. You can also decide if the community \n                            posts should be publicly available or only available to members of the community. \n                            We encourage you to make the community public to enhance engagement amongst community \n                            members. You can NEVER change the name of the community once you select a name.\n                        </Typography>\n                        <ValidatorForm \n                            ref={formRef}\n                            onSubmit={e => e.preventDefault()}\n                        >\n                            <Typography \n                                variant='body1' \n                                component='p' \n                                color={(name.length < 6 || name.length > 50) ? 'error' : 'default'}\n                                style={{\n                                    marginTop: 20,\n                                }}\n                                align='center'\n                            >\n                                {name.length}/50\n                            </Typography>\n                            <TextValidator\n                                label='Community name'\n                                placeholder='Select a community name | e.g. (Colts_Fans_Community)'\n                                helperText='The community name must start with a letter and can only contain letters, numbers, and underscores. Community names must be between 6 and 50 characters long and cannot contain spaces. You can NEVER change the name of a community, so make sure you select the proper name!'\n                                value={name}\n                                onChange={e => setName(e.target.value)}\n                                validators={['nameRequired', 'nameLength', 'nameRe', 'alphaStart']}\n                                errorMessages={['Must enter a community name!', 'Community name must be between 6 and 50 characters long!', 'Name can only contain letters, numbers, and underscores, and it must start with a letter!', 'Community name must start with a letter!']}\n                                onKeyDown={preventSpaces}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant='outlined' \n                                fullWidth\n                                required \n                            />\n                            <Typography \n                                variant='body1' \n                                component='p'\n                                className={classes.toMarg}\n                                align='center'\n                                color={(title.length < 10 || title.length > 75) ? 'error' : 'default'}\n                            >\n                                {title.length}/75\n                            </Typography>\n                            <TextValidator\n                                label='Community title'\n                                placeholder='Select a title for this community (required)'\n                                value={title}\n                                onChange={e => setTitle(e.target.value)}\n                                helperText='The community title will display at the top of your community page. This can be a short description of what the community is about and must be between 10 and 75 characters.'\n                                validators={['nameRequired', 'titleLength']}\n                                errorMessages={['A title for the community is required!', 'The community title must be between 10 and 75 characters!']}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant='outlined'\n                                fullWidth\n                                required\n                            />\n                            <FormControl \n                                className={classes.topMarg} \n                                component='fieldset' \n                            >\n                                <FormLabel \n                                    component='legend' \n                                >\n                                    Select at least 1 community topic. You can choose up to 10 (required)\n                                </FormLabel>\n                                <FormGroup \n                                    column \n                                >\n                                    {communityTopics.map((topic, index) => (\n                                        <FormControlLabel \n                                            key={index.toString()}\n                                            value={topic}\n                                            onChange={handleTopicsChange}\n                                            label={topic}\n                                            labelPlacement='end' \n                                            control={\n                                                <Checkbox \n                                                    color='primary' \n                                                    checked={topics.includes(topic)}\n                                                />\n                                            }\n                                        />\n                                    ))}\n                                </FormGroup>\n                            </FormControl>\n                            <Typography \n                                className={classes.topMarg}\n                                variant='body1'\n                                component='p'\n                                color={(description.length < 10 || description.length > 300) ? 'error' : 'default'}\n                                align='center'\n                            >\n                                {description.length}/300\n                            </Typography>\n                            <TextValidator \n                                className={classes.topMarg}\n                                label='Community description'\n                                placeholder='Write a brief this community (required)'\n                                helperText='The community description states what the community is about. It must be between 10 and 300 characters!'\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                validators={['nameRequired', 'descriptionLength']}\n                                errorMessages={['Must enter a community description!', 'The community description must be between 10 and 300 characters long!']}\n                                value={description}\n                                onChange={e => setDescription(e.target.value)}\n                                variant='outlined'\n                                rows={3}\n                                multiline={true}\n                                required \n                                fullWidth\n                            />\n                            <Typography \n                                className={classes.topMarg} \n                                variant='body1'\n                                component='p' \n                            >\n                                Select a theme color for this community!\n                            </Typography>\n                            <SwatchesPicker \n                                color={communityTheme} \n                                onChange={color => setCommunityTheme(color.hex)} \n                                colors={[\n                                    ['#00143C', '#2471A3', '#3498DB'],\n                                    ['#641E16', '#C0392B', '#E74C3C'],\n                                    ['#0E6655', '#45B39D', '#58D68D'],\n                                    ['#5B2C6F', '#8E44AD', '#C39BD3'],\n                                    ['#BA4A00', '#DC7633', '#E67E22'],\n                                    ['#000000', '#34495E', '#7F8C8D'],\n                                ]}\n                            />\n                            <Typography \n                                className={classes.topMarg} \n                                variant='body1' \n                                component='p'\n                            >\n                                Select a community avatar picture!\n                            </Typography>\n                            <label \n                                className={classes.topMarg}\n                                html-for='avatar' \n                                style={{\n                                    margin: 'auto',\n                                }}\n                            >\n                                <input \n                                    className={classes.input}\n                                    id='avatar'\n                                    name='avatar' \n                                    type='file'\n                                    accept='image/jpeg, image/jpg, image/png'\n                                    onChange={handleAvatarChange}\n                                    required \n                                />\n                                <Button \n                                    component='span'\n                                    color='primary' \n                                    variant='contained' \n                                >\n                                    <CameraIcon />\n                                </Button>\n                            </label>\n                            <div \n                                style={{\n                                    margin: 'auto',\n                                    textAlign: 'center',\n                                    marginTop: 20,\n                                }}\n                            >\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    onClick={buildCommunity} \n                                    disabled={open}\n                                >\n                                    {open ? <CircularProgress color='primary' /> : 'Build community'}\n                                </Button>\n                            </div>\n                        </ValidatorForm>\n                    </CardContent>\n                </Card>\n            </Grid>\n        )\n    }\n    else {\n        //If the mainUser is null, simply return a circular progress until we load the user, or redirect to the log in page. \n        <Backdrop \n            open={true} \n        >\n            <CircularProgress \n                color='primary' \n            />\n        </Backdrop>\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(BuildCommunity);","/Users/simeonikudabo/Downloads/geocities/src/components/NotificationsComponent.js",["190"],"import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiCheckBold, mdiClose } from '@mdi/js';\nimport { connect } from 'react-redux';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport swal from 'sweetalert';\nimport axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Paper from '@material-ui/core/Paper';\nimport GeoIcon from '../site-icons/geoicon2.png';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        marginTop: 100,\n    },\n    item: {\n        margin: 'auto',\n    },\n    list: {\n        margin: 'auto',\n        maxWidth: 700,\n    },\n}));\n\nfunction NotificationsComponent(props) {\n    const [deletingNotification, setDeletingNotification] = useState(false); //Backdrop when we want to delete notification.\n    const history = useHistory();\n    const classes = useStyles();\n    \n    useEffect(() => {\n        if(props.mainUser === null) {\n            history.push('/');\n        }\n        else {\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/grab/user/${props.mainUser.uniqueUserId}`\n            }).then(response => {\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                props.dispatch({type: 'ThemeChange', payload: response.data.user.profileTheme});\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error gathering your notifications! Please try again',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    }, []);\n\n    function utcToDateString(utc) {\n        let date = new Date(utc);\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n        let month = months[date.getMonth()];\n        let day = date.getDate();\n        let year = date.getFullYear();\n        return month + ' ' + day + ', ' + year;\n    }\n\n    function deleteNotification(uniqueNotificationId, link) {\n        setDeletingNotification(true);\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            uniqueNotificationId: uniqueNotificationId,\n            link: link,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/notification',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            setDeletingNotification(false);\n            props.dispatch({type: 'user/updateUser', payload: response.data.user});\n            swal(\n                'Great!',\n                'Notification successfully deleted!',\n                'success',\n            );\n            if(response.data.link !== '') {\n                history.push(response.data.link);\n            }\n        }).catch(err => {\n            setDeletingNotification(false);\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that notification!',\n                'error',\n            );\n        });\n    }\n\n    function acceptRejectFollow(followerUsername, followerUniqueUserId, uniqueNotificationId, accept) {\n        setDeletingNotification(true);\n        let data = JSON.stringify({\n            followerUsername: followerUsername,\n            followerUniqueUserId: followerUniqueUserId,\n            uniqueNotificationId: uniqueNotificationId,\n            accept: accept,\n            username: props.mainUser.username,\n            uniqueUserId: props.mainUser.uniqueUserId,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/follow/request/choice',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            props.dispatch({type: 'user/updateUser', payload: response.data.user});\n            if(response.data.accept === true) {\n                swal(\n                    'Great!',\n                    'Successfully accepted that follow request!',\n                    'success',\n                );\n                setDeletingNotification(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Successfully rejected that follow request!',\n                    'success',\n                );\n                setDeletingNotification(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error accepting or rejecting that follow request!',\n                'error',\n            );\n            setDeletingNotification(false);\n        });\n    }\n\n    function acceptRejectJoinRequest(username, uniqueUserId, community, uniqueNotificationId, acceptReject) {\n        //This function will handle acception or rejecting a community join request. \n        setDeletingNotification(true);\n        let data = JSON.stringify({\n            uniqueUserId: uniqueUserId,\n            username: username,\n            name: community,\n            uniqueNotificationId: uniqueNotificationId,\n            acceptReject: acceptReject,\n            moderatorUniqueUserId: props.mainUser.uniqueUserId,\n            moderatorUsername: props.mainUser.username,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/accept/reject/community/join',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.acceptReject === true) {\n                swal(\n                    'Great!',\n                    'Successfully accepted that community join request!',\n                    'success',\n                );\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                setDeletingNotification(false);\n            }\n            else if(response.data.acceptReject === false) {\n                swal(\n                    'Great!',\n                    'Successfully denied that community join request!',\n                    'success',\n                );\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                setDeletingNotification(false);\n            }\n            else {\n                swal(\n                    'Uh oh!',\n                    'There was an accepting or rejection that community join request!',\n                    'error',\n                );\n                setDeletingNotification(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error accepting or rejection that community join request!',\n                'error',\n            );\n\n            setDeletingNotification(false);\n        });\n    }\n\n    if(props.mainUser !== null) {\n        return (\n            <Grid \n                container \n                className={classes.root}\n            >\n                <Backdrop \n                    open={deletingNotification} \n                >\n                    <CircularProgress \n                        color='primary' \n                    />\n                </Backdrop>\n                {props.mainUser.notifications.length > 0 &&\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <List\n                            className={classes.list} \n                        >\n                            {props.mainUser.notifications.map((notification, index) => (\n                                <div \n                                    key={index.toString()} \n                                >\n                                    {notification.type === 'post comment' &&\n                                        <Paper\n                                            elevation={3}\n                                        >\n                                            <ListItem \n                                                style={{\n                                                    cursor: 'pointer',\n                                                    marginBottom: 20,\n                                                }}\n                                                onClick={e => deleteNotification(notification.uniqueNotificationId, notification.link)}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${notification.uniqueSenderId}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        </Paper>\n                                    }\n                                    {notification.type === 'post like' &&\n                                        <Paper\n                                            elevation={3}\n                                        >\n                                            <ListItem \n                                                style={{\n                                                    cursor: 'pointer',\n                                                    marginBottom: 20,\n                                                }}\n                                                onClick={e => deleteNotification(notification.uniqueNotificationId, notification.link)}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${notification.uniqueSenderId}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        </Paper>\n                                    }\n                                    {notification.type === 'join accepted' &&\n                                        <Paper\n                                            elevation={3}\n                                        >\n                                            <ListItem \n                                                style={{\n                                                    cursor: 'pointer',\n                                                    marginBottom: 20,\n                                                }}\n                                                onClick={e => deleteNotification(notification.uniqueNotificationId, notification.link)}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/community/name/${notification.community}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        </Paper>\n                                    }\n                                    {notification.type === 'new follower' &&\n                                        <Paper\n                                            elevation={3}\n                                        >\n                                            <ListItem \n                                                style={{\n                                                    cursor: 'pointer',\n                                                    marginBottom: 20,\n                                                }}\n                                                onClick={e => deleteNotification(notification.uniqueNotificationId, notification.link)}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${notification.uniqueSenderId}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        </Paper>\n                                    }\n                                    {notification.type === 'comment like' &&\n                                        <Paper\n                                            elevation={3}\n                                        >\n                                            <ListItem \n                                                style={{\n                                                    cursor: 'pointer',\n                                                    marginBottom: 20,\n                                                }}\n                                                onClick={e => deleteNotification(notification.uniqueNotificationId, notification.link)}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${notification.uniqueSenderId}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        </Paper>\n                                    }\n                                    {notification.type === 'follower request' &&\n                                        <Paper\n                                            elevation={3}\n                                            style={{\n                                                marginBottom: 20,\n                                            }}\n                                        >\n                                            <ListItem\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${notification.uniqueSenderId}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                        style={{\n                                                            cursor: 'pointer',\n                                                        }}\n                                                        onClick={e => history.push(`/geouser/${notification.uniqueSenderId}`)}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <IconButton \n                                                style={{\n                                                    color: 'rgb(0, 128, 0)',\n                                                }}\n                                                aria-label='Accept follower request button'\n                                                disabled={deletingNotification}\n                                                onClick={e => acceptRejectFollow(notification.sender, notification.uniqueSenderId, notification.uniqueNotificationId, true)}\n                                            >\n                                                <Icon \n                                                    path={mdiCheckBold} \n                                                    size={1}\n                                                    title=\"Acccept follow request\" \n                                                    aria-label='Follow request accept icon' \n                                                />\n                                            </IconButton>\n                                            <IconButton \n                                                style={{\n                                                    color: 'rgb(255, 0, 0)'\n                                                }}\n                                                aria-label='Deny request button'\n                                                disabled={deletingNotification}\n                                                onClick={e => acceptRejectFollow(notification.sender, notification.uniqueSenderId, notification.uniqueNotificationId, false)}\n                                            >\n                                                <Icon \n                                                    path={mdiClose} \n                                                    size={1}\n                                                    title='Deny request icon'\n                                                    aria-label='Deny request icon' \n                                                />\n                                            </IconButton>\n                                        </Paper>  \n                                    }\n                                    {/* Below is the notification type for a \"community join request\" */}\n                                    {notification.type === 'community join request' &&\n                                        <Paper\n                                            elevation={3}\n                                            style={{\n                                                marginBottom: 20,\n                                            }}\n                                        >\n                                            <ListItem\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${notification.uniqueSenderId}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                        style={{\n                                                            cursor: 'pointer',\n                                                        }}\n                                                        onClick={e => history.push(`/geouser/${notification.uniqueSenderId}`)}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <IconButton \n                                                style={{\n                                                    color: 'rgb(0, 128, 0)',\n                                                }}\n                                                aria-label='Accept communityJoin request button'\n                                                disabled={deletingNotification}\n                                                onClick={e => acceptRejectJoinRequest(notification.sender, notification.uniqueSenderId, notification.community, notification.uniqueNotificationId, true)}\n                                            >\n                                                <Icon \n                                                    path={mdiCheckBold} \n                                                    size={1}\n                                                    title=\"Acccept follow request\" \n                                                    aria-label='Follow request accept icon' \n                                                />\n                                            </IconButton>\n                                            <IconButton \n                                                style={{\n                                                    color: 'rgb(255, 0, 0)'\n                                                }}\n                                                aria-label='Deny request button'\n                                                disabled={deletingNotification}\n                                                onClick={e => acceptRejectJoinRequest(notification.sender, notification.uniqueSenderId, notification.community, notification.uniqueNotificationId, false)}\n                                            >\n                                                <Icon \n                                                    path={mdiClose} \n                                                    size={1}\n                                                    title='Deny request icon'\n                                                    aria-label='Deny request icon' \n                                                />\n                                            </IconButton>\n                                        </Paper> \n                                    }\n                                    {notification.type === 'welcome' && \n                                        <Paper \n                                            elevation={3} \n                                        >\n                                            <ListItem \n                                                style={{\n                                                    cursor: 'pointer',\n                                                    marginBottom: 20,\n                                                }}\n                                                onClick={e => deleteNotification(notification.uniqueNotificationId, notification.link)}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        alt='GeoCities logo'\n                                                        title='GeoCities logo'\n                                                        src={GeoIcon}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p'\n                                                        >\n                                                            Welcome to GeoCities. We hope that you have fun building communites and connecting with others!\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        </Paper>\n                                    }\n                                    {notification.type === 'accept follow request' &&\n                                        <Paper\n                                            elevation={3}\n                                        >\n                                            <ListItem \n                                                style={{\n                                                    cursor: 'pointer',\n                                                    marginBottom: 20,\n                                                }}\n                                                onClick={e => deleteNotification(notification.uniqueNotificationId, notification.link)}\n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${notification.uniqueSenderId}`}\n                                                        alt={`${notification.sender}`}\n                                                        title={`${notification.sender}`}\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText \n                                                    primary={\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                            align='center' \n                                                        >\n                                                            {utcToDateString(notification.date)}\n                                                        </Typography>\n                                                    }\n                                                    secondary={\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                            align='center' \n                                                        >\n                                                            {notification.msg}\n                                                        </Typography>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        </Paper>\n                                    }\n                                </div>\n                            ))}\n                        </List>\n                    </Grid>\n                }\n                {props.mainUser.notifications.length < 1 &&\n                   <Grid \n                        item\n                        xs={12} \n                        style={{\n                            textAlign: 'center',\n                        }}\n                    >\n                         <Typography \n                            variant='h6' \n                            component='h6' \n                            align='center' \n                        >\n                            No Notifications\n                        </Typography>\n                    </Grid>\n                }\n            </Grid>\n        );\n    }\n    else {\n        return (\n            <Backdrop\n                open={true} \n            >\n                <CircularProgress color='primary' />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(NotificationsComponent);","/Users/simeonikudabo/Downloads/geocities/src/components/Community.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210"],"import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Hidden from '@material-ui/core/Hidden';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom'; \nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiClose, mdiCamera, mdiVideo } from '@mdi/js';\nimport PropTypes from 'prop-types';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport CommunityPostsCard from './CommunityPostsCard';\nimport NonUserCommunityPostsCard from './NonUserCommunityPostsCard';\nimport Resizer from 'react-image-file-resizer';\nimport TextField from '@material-ui/core/TextField';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ChevronDownIcon from '@material-ui/icons/ExpandMore';\nimport CameraIcon from '@material-ui/icons/CameraAlt';\nimport { SwatchesPicker } from 'react-color';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\n\nfunction TabPanel(props) {\n    //This component will serve as the panel for each individual tab.\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div \n            role='tabpanel'\n            hidden={index !== value} \n            id={`tabpanel-${index}`}\n            aria-label={`tab-${index}`}\n            aria-labelledby={`tab-${index}`}\n            {...other}\n            style={{\n                marginTop: 100,\n            }}\n        >\n            {value === index &&\n                <Grid \n                    item \n                    xs\n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    {children}\n                </Grid>\n            }\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    index: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    };\n}\n\nconst communityTopics = [\n    'Accounting', 'Activism', 'Animals And Pets', 'Art', 'Astrology', 'Athletes', 'Aviation', 'Bars', 'Baseball', 'Beauty And Makeup', 'Biking', 'Black Lives Matter', 'Brands/Products', 'Business', 'Careers', 'Cars And Motor Vehicles', \n    'Celebrity', 'College Baseball', 'College Basketball', 'College Football', 'Computer Science', 'Crafts And DYI', 'Crossfit', 'Crypto', 'Culture Race And Ethnicity', 'Dancing', 'Day Trading', 'Documentaries','Economics',\n    'Education', 'Electronics', 'Entertainment', 'Ethics And Philosophy', 'Family And Relationships', 'Fashion', 'Filming', 'Fitness And Nutrition', 'Food And Drink', 'Funny/Humor',\n    'Gaming', 'Gender', 'GeoCities', 'Greek Life', 'Hair', 'Health', 'History', 'Hobbies', 'Hockey', 'Home And Garden', 'Investing', 'International Culture', 'Internet Culture', 'Intramural Sports', 'Latin Culture', 'Marijuna', 'Marketplace And Deals',\n    'Mature Themes And Adult Content', 'Medical And Mental Health', 'Meditation', \"Men's Health\", 'Military', 'Movies', 'Music', 'NBA', 'NFL', 'NHL', 'Nursing', 'Only Fans',\n    'Outdoors And Nature', 'Partying', 'People', 'Personal Connections', 'Photography', 'Podcasts And Streamers', 'Politics', 'Pop Culture', 'Programming', 'Public Policy', 'Reading Writing And Literature', \n    'Religion And Spirituality', 'Robinhood Trading', 'Rowing', 'Running', 'Science', 'Sexual Health And Orientation', 'Side Hustle', 'Sports', 'Soccer', 'Social Justice', 'Software Engineering', 'Streaming', 'Tabletop Games', 'Television', 'Television Personalities', 'Theatre', 'Track & Field', 'Volleyball',\n    \"Women's Health\", 'World News', 'Working Out/Gym', 'Work/Labor',\n];\n\nconst userFilterOptions = createFilterOptions({\n    matchFrom: 'any',\n    stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username,\n}); //Filter options to search for users to potentially block. \n\n\nfunction Community(props) {\n    const [community, setCommunity] = useState(null); //This variable and setter will manipulate community.\n    const useStyles = makeStyles(() => ({\n        root: {\n            marginTop: 100,\n        },\n        centerContent: {\n            margin: 'auto',\n            textAlign: 'center',\n        },\n        nameGrid: {\n            margin: 'auto',\n            textAlign: 'center',\n            marginTop: 20,\n        },\n        avatarLg: {\n            height: 168,\n            width: 168,\n            margin: 'auto',\n        },\n        avatarSm: {\n            height: 128,\n            width: 128,\n            margin: 'auto',\n        },\n        paper: {\n            backgroundColor: community !== null ? community.communityTheme : 'rgb(0, 20, 60)',\n        },\n        closeIcon: {\n            color: 'rgb(255, 255, 255)',\n        },\n        input: {\n            display: 'none',\n        },\n    }));\n    const classes = useStyles(); //Custom styles for the component. \n    const history = useHistory(); //Window history API.\n    const params = useParams(); //Access url parameters. \n    const textFormRef = useRef(null); //Ref for validator form when we upload posts.\n    const linkFormRef = useRef(null);\n    const [joinSending, setJoinSending] = useState(false); //Will disable the button while we send a join or request join to the server.\n    const [postDialog, setPostDialog] = useState(false); //Will open and close the dialog to make a post.\n    const [curTab, setTab] = useState(0); //Sets the current tab in post upload dialog. \n    const [curTab2, setTab2] = useState(0); //For the second tab that displays posts, about (and settings if the user is not null and the uniqueUserId matches the mainUser, for moderation)\n    const [textPost, setTextPost] = useState(''); //Value for text post. \n    const [textPostTitle, setTextPostTitle] = useState(''); //Value for title.\n    const [photoPost, setPhotoPost] = useState(null); //Value for photo upload. \n    const [photoPostTitle, setPhotoPostTitle] = useState(''); //Value for photo post title. \n    const [videoPost, setVideoPost] = useState(null); //Value for video post. \n    const [videoPostTitle, setVideoPostTitle] = useState(''); //Video post title. \n    const [linkPost, setLinkPost] = useState(''); //Value for the link in a link post. \n    const [linkPostTitle, setLinkPostTitle] = useState(''); //Value for link post title. \n    const [posting, setPosting] = useState(false); //Will handle disabling buttons and bars when a post is being sent to the server.\n    const [uploadPhoto, setUploadPhoto] = useState(null); //Will control any photo post photo that we upload to the server. \n    const [photoCaption, setPhotoCaption] = useState('');//Variable and setter for a caption for a photo upload. \n    const [photoUploading, setPhotoUploading] = useState(false); //Used to alter functionality when the photo post is being uploaded to the server. \n    const [uploadVideo, setUploadVideo] = useState(null); //Variable and setter for a video to be uploaded \n    const [videoUploading, setVideoUploading] = useState(null); //Variable and setter to disable button while video is uploading. \n    const [videoCaption, setVideoCaption] = useState(null); //Variable and setter for the caption for a video post. \n    const [postLink, setPostLink] = useState(''); //This variable will store the link post link. \n    const [editTitleText, setEditTitleText] = useState(''); //Variable and setter to change the community title in settings. \n    const [editDescriptionText, setEditDescriptionText] = useState(''); //Variable and setter to edit the community description text. \n    const [avatarEdit, setAvatarEdit] = useState(null); //Getter and setter that will alter an avatar when the moderator updaetes it. \n    const [themeEdit, setThemeEdit] = useState('#00143C'); //Variable and setter for the community theme.\n    const [topics, setTopics] = useState([]); //Community topics.\n    const [makingEdit, setMakingEdit] = useState(false); //Will disable buttons when we make an edit. \n    const [allUsers, setAllUsers] = useState([]); //Variable and setter for the users to search when we want to block one. \n    const [selectedUser, setSelectedUser] = useState(null); //Variable and setter for the user we choose to block\n    const [newRule, setNewRule] = useState(''); //This is the variable and setter when a user adds a new rule. \n    const [newReason, setNewReason] = useState(''); //Variable and setter for the new reason for a new rule. \n    const regularExpressions = {\n        urlRegex: /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\n    }; //This will store the regular expressions to make sure link posts have valid url's. \n\n\n    useEffect(() => {\n        //Add validation rules \n        ValidatorForm.addValidationRule('titleLength', v => {\n            if(v.length > 75) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Rule for text or caption to be 3,000 characters or less. \n        ValidatorForm.addValidationRule('textLength', v => {\n            if(v.length > 3000) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule to ensure textPost and linkPost are not empty. \n        ValidatorForm.addValidationRule('requiredText', v => {\n            if(v.trim() === '') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule will ensure links are valid \n        ValidatorForm.addValidationRule('validLink', v => {\n            if(!regularExpressions.urlRegex.test(v)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //First we need to fetch the community with axios. \n        if(true) {\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/fetch/community/${params.communityName}`,\n            }).then(response => {\n                if(response.data.community) {\n                    setCommunity(response.data.community);\n                    //Set allUsers \n                    setAllUsers(response.data.allUsers);\n                    props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Update the theme to match the community theme.\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts}); //Update the posts to match what a visitor viewing these posts will see.\n                    //Now determine if the mainUser is in the blockList, and re-route to the previous page if they are. \n                    if(props.mainUser !== null) {\n                        if(_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n                            swal(\n                                'Uh Oh!',\n                                'You are blocked from this community!',\n                                'error',\n                            );\n                            history.goBack(1);\n                        }\n                    }\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find that community!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error finding that community! Please try again.',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    }, []);\n\n    function publicJoin() {\n        //Function that will enable a member to join a public community. \n        let data = JSON.stringify({\n            username: props.mainUser.username,\n            uniqueUserId: props.mainUser.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/public/join/community',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.result === 'success') {\n                swal(\n                    'Great!',\n                    'Successfully joined community!',\n                    'success',\n                );\n                setJoinSending(false);\n                setCommunity(response.data.community);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error with joining this community! Please try again',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error joining this community! Please try again',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    function privateJoinRequest() {\n        //This function will handle sending a join notification to the moderator. \n        setJoinSending(true);\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            username: props.mainUser.username,\n            moderatorUniqueUserId: community.moderator.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/community/join/request',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data === 'duplicate') {\n                swal(\n                    'Uh Oh!',\n                    'You have already sent a request to join this community!',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Community join request sent!',\n                    'success',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error sending a request to join this community! Please try again.',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    async function sendTextPost() {\n        //Function that will handle uploading a text post to the server. \n        setPosting(true); \n        let isValid = textFormRef.current.isFormValid();\n        if(!isValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure the form is filled out properly',\n                'error',\n            );\n            setPosting(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = JSON.stringify({\n                text: textPost,\n                title: textPostTitle,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                community: community.name,\n                type: 'text',\n                dateString: dateString,\n                uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\n                context: 'community',\n                privacy: community.communityPrivacy,\n                link: postLink ? postLink : '',\n                textType: 'link',\n            });\n\n            return axios({\n                method: 'post',\n                url: 'http://192.168.0.17:3001/api/add/community/text/post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                if(response.data.result === 'success') {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded text post!',\n                        'success',\n                    );\n                    setTextPost('');\n                    setTextPostTitle('');\n                    setPosting(false);\n                    setPostDialog(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error sending that text post!',\n                        'error',\n                    );\n                    setPosting(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that text post! Please try again.',\n                    'error',\n                );\n                setPosting(false);\n            });\n        }\n    }\n\n    function sendLinkPost() {\n        //This function will handle sending a post with a link URL to the server.\n        setPosting(true); \n        let isValid = linkFormRef.current.isFormValid();\n\n        if(!regularExpressions.urlRegex.test(postLink)) {\n            swal(\n                'Uh Oh!',\n                'You must enter a valid URL to create a link post',\n                'error',\n            ); \n            setPosting(false);\n            return false;\n        }\n\n        else if(textPostTitle === '') {\n            swal(\n                'Uh Oh!',\n                'You must enter a title for all link posts.',\n                'error',\n            );\n            setPosting(false);\n            return false;\n        }\n\n        else if(!isValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure the form is filled out properly',\n                'error',\n            );\n            setPosting(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = JSON.stringify({\n                text: '',\n                title: textPostTitle,\n                link: postLink,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                community: community.name,\n                type: 'link',\n                dateString: dateString,\n                uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\n                context: 'community',\n                privacy: community.communityPrivacy,\n            });\n\n            return axios({\n                method: 'post',\n                url: 'http://192.168.0.17:3001/api/add/community/text/post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                if(response.data.result === 'success') {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded link post!',\n                        'success',\n                    );\n                    setTextPost('');\n                    setTextPostTitle('');\n                    setPosting(false);\n                    setPostDialog(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error sending that link post!',\n                        'error',\n                    );\n                    setPosting(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that link post! Please try again.',\n                    'error',\n                );\n                setPosting(false);\n            });\n        }\n    }\n\n    function resizerFunction(file) {\n        //This is a wrapper for the file resizer \n        return new Promise(resolve => {\n            Resizer.imageFileResizer(\n                file,\n                600,\n                600,\n                'JPEG',\n                100,\n                0,\n                uri => {\n                    resolve(uri);\n                },\n                'blob',\n            );\n        });\n    }\n\n    async function handlePhotoChange(e) {\n        //This function will handle passing a photo that is uploaded to the resizer function to rersize the photo\n        let file = e.target.files[0];\n        let resizedPhoto = await resizerFunction(file);\n        setUploadPhoto(resizedPhoto);\n    }\n\n    async function handleAvatarChange(e) {\n        let file = e.target.files[0];\n        let resizedPhoto = await resizerFunction(file);\n        setAvatarEdit(resizedPhoto);\n    }\n\n    function handlePhotoUpload() {\n        //Function that will handle sending an uploaded photo to the server after resizing it.\n        //Might need to make some edits here since the photo will be community-based\n        setPhotoUploading(true);\n\n        if(!uploadPhoto) {\n            swal(\n                'Uh Oh!',\n                'You must select a photo to upload!',\n                'error',\n            );\n            setPhotoUploading(false);\n        }\n        else {\n            let data = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[data.getMonth()];\n            let day = data.getDate();\n            let year = data.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let fd = new FormData();\n            fd.append('photo', uploadPhoto, 'photo.jpg');\n            fd.append('caption', photoCaption);\n            fd.append('uniqueUserId', props.mainUser.uniqueUserId);\n            fd.append('uniquePostId', Date.now() + props.mainUser.username + 'photoupload' + props.mainUser.uniqueUserId);\n            fd.append('username', props.mainUser.username);\n            fd.append('dateString', dateString);\n            fd.append('type', 'photo');\n            fd.append('context', 'community');\n            fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.mainUser.username}photoupload${props.mainUser.uniqueUserId}`);\n            fd.append('community', community.name); //Name of the community that this post belongs to. \n            fd.append('title', '');\n            fd.append('privacy', community.communityPrivacy);\n            fd.append('text', '');\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/upload/photo',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded photo!',\n                        'success',\n                    );\n                    setPhotoCaption('');\n                    setUploadPhoto(null);\n                    setPostDialog(false);\n                    setPhotoUploading(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that photo!',\n                        'error',\n                    );\n                    setPhotoUploading(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that photo!',\n                    'error',\n                );\n                setPhotoUploading(false);\n            });\n        }\n    }\n\n    function handleVideoChange(e) {\n        //This function will handle setting the uploadVideo variable to the valua of the file. \n        setUploadVideo(e.target.files[0]);\n    }\n\n    function handleVideoUpload() {\n        //Function that will handle sending an uploaded video to the server.\n        setVideoUploading(true);\n\n        if(!uploadVideo) {\n            swal(\n                'Uh Oh!',\n                'You must select a video to upload!',\n                'error',\n            );\n            setVideoUploading(false);\n        }\n        else {\n            let data = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[data.getMonth()];\n            let day = data.getDate();\n            let year = data.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let ext = uploadVideo.name.split('.').pop().toString(); //This will get the extension name of the video \n            ext = 'video.' + ext;\n            let fd = new FormData();\n            fd.append('photo', uploadVideo, ext); //Keep the name \"photo\" for the server upload although it is technically a video!\n            fd.append('caption', videoCaption);\n            fd.append('uniqueUserId', props.mainUser.uniqueUserId);\n            fd.append('uniquePostId', Date.now() + props.mainUser.username + 'videoupload' + props.mainUser.uniqueUserId);\n            fd.append('username', props.mainUser.username);\n            fd.append('dateString', dateString);\n            fd.append('type', 'video');\n            fd.append('context', 'community');\n            fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.mainUser.username}videoupload${props.mainUser.uniqueUserId}`);\n            fd.append('community', community.name);\n            fd.append('communityPost', true);\n            fd.append('title', '');\n            fd.append('privacy', community.communityPrivacy);\n            fd.append('text', '');\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/upload/photo',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded video!',\n                        'success',\n                    );\n                    setVideoCaption('');\n                    setUploadVideo(null);\n                    setPostDialog(false);\n                    setVideoUploading(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that video!',\n                        'error',\n                    );\n                    setVideoUploading(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that video!',\n                    'error',\n                );\n                setVideoUploading(false);\n            });\n        }\n    }\n\n    function leaveCommunity() {\n        //This function will remove a member from a community if they are within it. \n        setJoinSending(true);\n        let data = JSON.stringify({\n            username: props.mainUser.username,\n            uniqueUserId: props.mainUser.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/leave/community',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.result === 'success') {\n                swal(\n                    'Great!',\n                    'You have successfully left this community',\n                    'success',\n                );\n                setCommunity(response.data.community);\n                setJoinSending(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error leaving this community! Please try again.',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error leaving this community! Please try again.',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    function updateTitle() {\n        //This function will call the server to update a community title. \n        if(editTitleText.length < 10) {\n            swal(\n                'Uh Oh!',\n                'The title of the community must be at least 10 characters long!',\n                'error',\n            );\n            return false;\n        }\n        else if(editTitleText.length > 75) {\n            swal(\n                'Uh Oh!',\n                'The community title cannot be more than 75 characters long',\n                'error',\n            );\n            return false;\n        }\n        else {\n            let data = {\n                community: community.name,\n                title: editTitleText,\n            };\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/update/community/title',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                setMakingEdit(false);\n                setEditTitleText('');\n                setCommunity(response.data.community);\n                swal(\n                    'Great!',\n                    'Successfully udated community.',\n                    'success',\n                );\n            }).catch(err => {\n                console.log(err.message);\n                setMakingEdit(false);\n                swal(\n                    'Uh Oh!',\n                    'There was an error editing the community title',\n                    'error',\n                );\n            });\n        }\n    }\n\n    function updateDescription() {\n        //This function will handle updating a community description. \n        setMakingEdit(true);\n        \n        if(editDescriptionText.length < 10) {\n            setMakingEdit(false);\n            swal(\n                'Uh Oh!',\n                'The community description must be at least 10 characters long!',\n                'error',\n            ); \n            return false;\n        }\n        else if(editDescriptionText.length > 300) {\n            setMakingEdit(false);\n            swal(\n                'Uh Oh!',\n                'The community description can only be up to 300 characters long',\n                'error',\n            );\n            return false;\n        }\n        else {\n            let data = {\n                description: editDescriptionText,\n                community: community.name,\n            }\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/update/community/description',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                setCommunity(response.data.community);\n                setMakingEdit(false);\n                setEditDescriptionText('');\n                swal(\n                    'Great!',\n                    'Successfully updated the community description!',\n                    'success',\n                );\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error updating the community description!',\n                    'error',\n                );\n                setMakingEdit(false);\n            });\n        }\n    }\n\n    function updateAvatar() {\n        //This function will handle updating the avatar for the user. \n        setMakingEdit(true);\n\n        if(avatarEdit === null) {\n            swal(\n                'Uh Oh!',\n                'You must select a photo to update the community avatar!',\n                'error',\n            );\n            setMakingEdit(false);\n            return false;\n        }\n        else {\n            let fd = new FormData();\n            fd.append('community', community.name);\n            fd.append('filename', community.avatar);\n            fd.append('avatar', avatarEdit, 'avataredit.jpg');\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/update/community/avatar',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                swal(\n                    'Great!',\n                    'Successfully updated the community avatar photo!',\n                    'success',\n                );\n                setCommunity(response.data.community);\n                setAvatarEdit(null);\n                setMakingEdit(false);\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error updating the avatar for your community!',\n                    'error',\n                );\n                setMakingEdit(false);\n            });\n        }\n    }\n\n    function updateTheme() {\n        //This function will handle updating the theme for a community. \n        setMakingEdit(true);\n\n        let data = {\n            community: community.name,\n            theme: themeEdit,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/update/community/theme',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            setCommunity(response.data.community);\n            props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Update the theme to match the community theme.\n            swal(\n                'Great!',\n                'You successfully udated the community theme color!',\n                'success',\n            );\n            setMakingEdit(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error updating the community theme color!',\n                'error',\n            );\n            setMakingEdit(false);\n        });\n    }\n\n    function updatePrivacy() {\n        setMakingEdit(true);\n        \n        let thisPrivacy;\n        \n        if(community.communityPrivacy === 'public') {\n            thisPrivacy = 'private';\n        }\n        else {\n            thisPrivacy = 'public';\n        }\n\n        let data = {\n            communityPrivacy: thisPrivacy,\n            community: community.name,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/update/community/privacy',\n            data: JSON.stringify(data),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            setCommunity(response.data.community);\n            swal(\n                'Great!',\n                'You successfully updated the community privacy!',\n                'success',\n            );\n            setMakingEdit(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error updating the community privacy',\n                'error',\n            );\n            setMakingEdit(false);\n        });\n    }\n\n    function handleTopicsChange(e) {\n        //This function will add topics to the topics array. It will remove the topic if it is unchecked.\n        if(e.target.checked) {\n            if(topics.length <= 9) {\n                setTopics(topics => [...topics, e.target.value]);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'You can only select up to 10 topics!',\n                    'error',\n                );\n            }\n        }\n        else if(!e.target.checked) {\n            setTopics(topics.filter(topic => topic !== e.target.value));\n        }\n    }\n\n    function updateTopics() {\n        //This function will handle updating the topics within a community. \n        setMakingEdit(true);\n\n        if(topics.length < 1) {\n            swal(\n                'Uh Oh!',\n                'You must select at least one relevant topic for this community!',\n                'error',\n            );\n            setMakingEdit(false);\n            return false;\n        }\n        else {\n            let data = JSON.stringify({\n                topics: topics,\n                community: community.name,\n            });\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/update/community/topics',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                setCommunity(response.data.community);\n                setTopics([]);\n                swal(\n                    'Great!',\n                    'You successfully updated the topics for your community!',\n                    'success',\n                );\n                setMakingEdit(false);\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error updating the community topics!',\n                    'error',\n                );\n                setMakingEdit(false);\n            });\n        }\n    }\n\n    function blockUser(uniqueUserId, username) {\n        //This function will handle blocking a user.\n        if(uniqueUserId === community.moderator.uniqueUserId) {\n            swal(\n                'Uh Oh',\n                'You cannot block yourself from a community you moderate!',\n                'error',\n            );\n            return false;\n        }\n        else {\n            let data = JSON.stringify({\n                username: username,\n                uniqueUserId: uniqueUserId,\n                community: community.name,\n            });\n    \n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/block/community/user',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                swal(\n                    'Great!',\n                    'You successfully blocked this user from your community',\n                    'success',\n                );\n    \n                setCommunity(response.data.community);\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error blocking this user from the community!',\n                    'error',\n                );\n            });\n        }\n    }\n\n    function unBlockUser(uniqueUserId, username) {\n        //This function will handle unblocking a user from the community. TODO: Disable Button while updating.\n        setMakingEdit(true);\n\n        let data = JSON.stringify({\n            uniqueUserId: uniqueUserId,\n            username: username,\n            community: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/unblock/community/user',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            swal(\n                'Great!',\n                'You successfully unblocked that user from your community!',\n                'success',\n            )\n            setCommunity(response.data.community);\n            setMakingEdit(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error trying to unblock that user from your community!',\n                'error',\n            );\n            setMakingEdit(false);\n        });\n    }\n\n    function deleteRule(rule) {\n        //This function will be responsible for deleting a rule. \n        setMakingEdit(true);\n\n        let data = JSON.stringify({\n            rule: rule,\n            community: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/community/rule',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            swal(\n                'Great!',\n                'You successfully deleted that rule from your community!',\n                'success',\n            );\n            setCommunity(response.data.community);\n            setMakingEdit(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that rule from the community!',\n                'error',\n            );\n            setMakingEdit(false);\n        });\n    }\n\n    function addRule() {\n        //This function will handle adding a new rule to the community.\n        setMakingEdit(true);\n\n        if(newRule.trim() === '') {\n            swal(\n                'Uh Oh!',\n                'You must enter a new rule!',\n                'error',\n            );\n            setMakingEdit(false);\n            return false;\n        }\n        else if(newRule.length > 100) {\n            swal(\n                'Uh Oh!',\n                'The rule cannot be longer than 100 characters!',\n                'error',\n            );\n            setMakingEdit(false);\n            return false;\n        }\n        else if(newReason.trim() === '') {\n            swal(\n                'Uh Oh!',\n                'You must enter a reason for your rule!',\n                'error',\n            );\n            setMakingEdit(false);\n            return false;\n        }\n        else if(newReason.length > 300) {\n            swal(\n                'Uh Oh!',\n                'The reason for your rule cannot be greater than 300 characters!',\n                'error',\n            );\n            setMakingEdit(false);\n            return false;\n        }\n        else {\n            let data = JSON.stringify({\n                rule: newRule,\n                reason: newReason,\n                community: community.name,\n            });\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/add/community/rule',\n                data: data, \n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }).then(response => {\n                swal(\n                    'Great!',\n                    'You successfully added a new community rule!',\n                    'success',\n                );\n                setCommunity(response.data.community);\n                setMakingEdit(false);\n                setNewRule('');\n                setNewReason('');\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error adding that new rule to the community!',\n                    'error',\n                );\n                setMakingEdit(false);\n            }); \n        }\n    }\n\n    if(community !== null) {\n        return (\n            <Grid \n                className={classes.root} \n                container \n            >\n                <Grid \n                    item \n                    xs={12} \n                    className={classes.centerContent} \n                >\n                    <Hidden \n                        smDown \n                    >\n                        <Avatar \n                            className={classes.avatarLg} \n                            src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                            alt={`${community.name} avatar`}\n                            title={`${community.name} avatar`}\n                            variant='square'\n                        />\n                    </Hidden>\n                    <Hidden \n                        mdUp \n                    >\n                        <Avatar \n                            src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                            className={classes.avatarSm} \n                            title={`${community.name} avatar`}\n                            alt={`${community.name} avatar`}\n                            variant='square'\n                        />\n                    </Hidden>\n                </Grid>\n                {/* The grid below will store the name of the community */}\n                <Grid \n                    item \n                    xs={12} \n                    className={classes.nameGrid} \n                >\n                    <Typography \n                        variant='h6' \n                        component='h6' \n                        align='center' \n                    >\n                        {community.name}\n                    </Typography>\n                </Grid>\n                {/* End of the grid to display the community name */}\n                {/* Below is the Grid to display the title of the community */}\n                <Grid \n                    item \n                    xs={12}\n                    className={classes.nameGrid} \n                >\n                    <Typography \n                        variant='body1' \n                        component='p'\n                        justify='left' \n                    >\n                        {community.title}\n                    </Typography>\n                </Grid>\n                {/* End of the Grid to display the title of the community */}\n                {/* Now create a button for the user if they are logged in, not a member, and the community is public */}\n                <Grid \n                    item \n                    xs={12}\n                    style={{\n                        margin: 'auto',\n                        textAlign: 'center',\n                        marginTop: 20,\n                    }}\n                >\n                    {/* Button if the user is logged in, not a member, and the community is public */}\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'public' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId) &&\n                        <Button \n                            color='primary' \n                            variant='contained' \n                            onClick={publicJoin}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\n                        </Button>\n                    }\n                    {/* Below is the Button if the user is logged in, not a member, and the community is private */}\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserid) &&\n                        <Button \n                            color='primary' \n                            variant='contained' \n                            onClick={privateJoinRequest}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\n                        </Button>\n                    }\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.moderator.uniqueUserId !==  props.mainUser.uniqueUserId) &&\n                        <Button \n                            color='primary'\n                            variant='outlined' \n                            onClick={leaveCommunity}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'leave'}\n                        </Button>\n                    }\n                    {/* Below, we will add a button to route someone who is not signed up or logged in to the sign up page */}\n                    {props.mainUser === null &&\n                        <Button \n                            color='primary' \n                            onClick={e => history.push('/')}\n                        >\n                            Sign up or log in!\n                        </Button>\n                    }\n                    {(props.mainUser === null && community.communityPrivacy === 'private') &&\n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                This community is private\n                            </Typography>\n                        </Grid>\n                    }\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private') && \n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                This community is private\n                            </Typography>\n                        </Grid>\n                    }\n                    {/*Now I will have two buttons in two grids for members of the community to either chat or post content to the community */}\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\n                        <div>\n                            <Grid \n                                item \n                                xs={12} \n                                style={{\n                                    marginTop: 20,\n                                    marginBottom: 20,\n                                }}\n                            >\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    style={{\n                                        margin: 'auto',\n                                    }}\n                                    onClick={e => history.push(`/community/chat/${community.name}`)}\n                                >\n                                    Chat \n                                </Button>\n                            </Grid>\n                            <Grid \n                                item \n                                xs={12} \n                            >\n                                <Button \n                                    color='primary' \n                                    variant='outlined' \n                                    onClick={e => setPostDialog(true)}\n                                >\n                                    Post \n                                </Button>\n                            </Grid>\n                        </div>\n                    }\n                    {/* This is the end of the two Grids for a the chat Button and the Post button */}\n                    {/*Below create the Dialog that will open when the user tries to make a post. Only show when a user is part of the community */}\n                </Grid>\n                {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <Dialog \n                            open={postDialog} \n                            fullScreen\n                        >\n                            <DialogContent>\n                                <AppBar \n                                    color='primary'\n                                    hidden={posting}\n                                >\n                                    <Icon \n                                        path={mdiClose} \n                                        size={1} \n                                        title='Dialog close' \n                                        style={{\n                                            cursor: 'pointer'\n                                        }}\n                                        onClick={() => setPostDialog(false)}\n                                    />\n                                    <Tabs \n                                        value={curTab}\n                                        onChange={(e, newVal) => setTab(newVal)} \n                                        centered\n                                    >\n                                        <Tab \n                                            {...a11yProps(0)} \n                                            label='Text' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(1)} \n                                            label='Photo' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(2)}\n                                            label='Video' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(3)}\n                                            label='Link'\n                                            disabled={posting} \n                                        />\n                                    </Tabs>\n                                </AppBar>\n                                <TabPanel \n                                    index={0}\n                                    value={curTab}\n                                >\n                                    <ValidatorForm\n                                        ref={textFormRef} \n                                        onSubmit={e => e.preventDefault()}\n                                    >\n                                        <Typography \n                                            variant='body1' \n                                            component='small' \n                                            color={textPostTitle.length > 75 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPostTitle.length}/75\n                                        </Typography>\n                                        <TextValidator \n                                            label='Post title'\n                                            placeholder='Enter a title for your post of 75 characters or less'\n                                            value={textPostTitle}\n                                            onChange={e => setTextPostTitle(e.target.value)}\n                                            helperText='Enter a title for this text post'\n                                            validators={['titleLength']}\n                                            errorMessages={['Title can only be up to 75 characters']}\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary'\n                                            variant='outlined'\n                                            fullWidth\n                                        />\n                                        <Typography \n                                            style={{\n                                                marginTop: 30,\n                                            }}\n                                            variant='body1' \n                                            component='small'\n                                            color={textPost.length > 3000 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPost.length}/3000\n                                        </Typography>\n                                        <TextValidator \n                                            label='Text post'\n                                            placeholder='Share a text post!'\n                                            value={textPost}\n                                            onChange={e => setTextPost(e.target.value)}\n                                            helperText='Enter a text post of up to 3,000 characters long!'\n                                            validators={['requiredText', 'textLength']}\n                                            errorMessages={['Must enter some text!', 'Text post cannot be more than 3,000 characters long!']}\n                                            variant='outlined' \n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary' \n                                            variant='outlined' \n                                            rows={3}\n                                            multiline \n                                            required \n                                            fullWidth \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            onClick={sendTextPost}\n                                            disabled={posting}\n                                        >\n                                            {posting ? <CircularProgress color='primary' /> : 'Upload'}\n                                        </Button>\n                                    </ValidatorForm>\n                                </TabPanel>\n                                <TabPanel \n                                    index={1} \n                                    value={curTab} \n                                >\n                                    <Typography \n                                        variant='h6' \n                                        component='h6' \n                                    >\n                                        Post a photo\n                                    </Typography>\n                                    <label \n                                        html-for='photoPost' \n                                    >\n                                        <input \n                                            className={classes.input}\n                                            type='file'\n                                            accept='image/jpg, image/jpeg, image/png' \n                                            id='photoPost'\n                                            name='photoPost' \n                                            onChange={handlePhotoChange} \n                                            required \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            component='span' \n                                            aria-label='Photo picker button'\n                                        >\n                                            <Icon \n                                                path={mdiCamera} \n                                                size={1} \n                                                title='Photo upload icon' \n                                                aria-label='Photo upload icon' \n                                            />\n                                        </Button>\n                                    </label>\n                                    <br/>\n                                    <TextField \n                                        label='Caption'\n                                        placeholder='Enter a caption for your photo' \n                                        variant='outlined' \n                                        color='primary' \n                                        value={photoCaption} \n                                        onChange={e => setPhotoCaption(e.target.value)} \n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        rows={4}\n                                        multiline\n                                        required\n                                        style={{\n                                            marginTop: 40,\n                                        }}\n                                        fullWidth\n                                    />\n                                    <br/>\n                                    <Button \n                                        style={{\n                                            marginTop: 30,\n                                        }}\n                                        color='primary' \n                                        variant='outlined' \n                                        onClick={handlePhotoUpload}\n                                        disabled={photoUploading}\n                                    >\n                                        {photoUploading ? <CircularProgress color='primary' /> : 'Upload Photo'}\n                                    </Button>\n                                </TabPanel>\n                                <TabPanel \n                                    index={2} \n                                    value={curTab} \n                                >\n                                    <Typography \n                                        variant='h6' \n                                        component='h6' \n                                    >\n                                        Post a video\n                                    </Typography>\n                                    <label \n                                        html-for='videoPost' \n                                    >\n                                        <input \n                                            className={classes.input}\n                                            type='file'\n                                            accept='video/mp4, video/mov'\n                                            id='videoPost'\n                                            name='videoPost' \n                                            onChange={handleVideoChange} \n                                            required \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            component='span' \n                                            aria-label='Video picker button'\n                                        >\n                                            <Icon \n                                                path={mdiVideo} \n                                                size={1} \n                                                title='Video upload icon' \n                                                aria-label='Video upload icon' \n                                            />\n                                        </Button>\n                                    </label>\n                                    <br/>\n                                    <TextField \n                                        label='Caption'\n                                        placeholder='Enter a caption for your video' \n                                        variant='outlined' \n                                        color='primary' \n                                        value={videoCaption} \n                                        onChange={e => setVideoCaption(e.target.value)} \n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        rows={4}\n                                        multiline\n                                        required\n                                        style={{\n                                            marginTop: 40,\n                                        }}\n                                        fullWidth\n                                    />\n                                    <br/>\n                                    <Button \n                                        style={{\n                                            marginTop: 30,\n                                        }}\n                                        color='primary' \n                                        variant='outlined' \n                                        onClick={handleVideoUpload}\n                                        disabled={videoUploading}\n                                    >\n                                        {videoUploading ? <CircularProgress color='primary' /> : 'Upload Video'}\n                                    </Button>\n                                </TabPanel>\n                                <TabPanel \n                                    index={3}\n                                    value={curTab}\n                                >\n                                    <ValidatorForm\n                                        ref={linkFormRef} \n                                        onSubmit={e => e.preventDefault()}\n                                    >\n                                        <Typography \n                                            variant='body1' \n                                            component='small' \n                                            color={textPostTitle.length > 75 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPostTitle.length}/75\n                                        </Typography>\n                                        <TextValidator \n                                            label='Post title'\n                                            placeholder='Enter a title for your post of 75 characters or less'\n                                            value={textPostTitle}\n                                            onChange={e => setTextPostTitle(e.target.value)}\n                                            helperText='Enter a title for this text post'\n                                            validators={['requiredText', 'titleLength']}\n                                            errorMessages={['Must enter a title for all link posts', 'Title can only be up to 75 characters']}\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary'\n                                            variant='outlined'\n                                            fullWidth\n                                        />\n                                        <br></br>\n                                        <TextValidator \n                                            label='Link'\n                                            placeholder='Share a valid link!'\n                                            value={postLink}\n                                            onChange={e => setPostLink(e.target.value)}\n                                            helperText='Enter a valid url link.'\n                                            validators={['requiredText', 'validLink']}\n                                            errorMessages={['Must enter a link!', 'The link that you enter must be formatted properly!']}\n                                            variant='outlined' \n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary' \n                                            variant='outlined'\n                                            required \n                                            fullWidth \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            onClick={sendLinkPost}\n                                            disabled={posting}\n                                        >\n                                            {posting ? <CircularProgress color='primary' /> : 'Upload'}\n                                        </Button>\n                                    </ValidatorForm>\n                                </TabPanel>\n                            </DialogContent>\n                        </Dialog>\n                    </Grid>\n                }\n                {/*End of the Grid for the dialog box for posts if the user is logged in and a member of the community */}\n                {/* Below add the tabpanel for posts, about, and settings (only render settings if moderator is visiting page) */}\n                {(community.communityPrivacy === 'public' || (props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId))) &&\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <Paper \n                            className={classes.paper}\n                            style={{\n                                marginTop: 10,\n                            }}\n                        >\n                            <Tabs \n                                value={curTab2} \n                                onChange={(e, newVal) => setTab2(newVal)}\n                                centered\n                                style={{\n                                    color: 'rgb(255, 255, 255)',\n                                }}\n                            >\n                                <Tab \n                                    label='Posts' \n                                    {...a11yProps(0)} \n                                />\n                                <Tab \n                                    label='About' \n                                    {...a11yProps(1)} \n                                />\n                                {(props.mainUser !== null && community.moderator.uniqueUserId === props.mainUser.uniqueUserId) &&\n                                    <Tab \n                                        label='Settings' \n                                        {...a11yProps(2)} \n                                    />\n                                }\n                            </Tabs>\n                        </Paper>\n                        {/* Now begin the tab for posts. Have the CommunityPostsCard ONLY for users who are logged in */}\n                        <TabPanel \n                            value={0} \n                            index={curTab2} \n                        >\n                            {props.posts.length < 1 && \n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                    align='center' \n                                >\n                                    No posts \n                                </Typography>\n                            }\n                            {props.posts.length > 0 && \n                                <div>\n                                    {props.posts.map((post, index) => (\n                                        <div \n                                            style={{\n                                                textAlign: 'left',\n                                            }}\n                                            key={index}\n                                        >\n                                            {props.mainUser !== null &&       \n                                                <CommunityPostsCard\n                                                    post={post}\n                                                    id={post.uniquePostId}\n                                                    moderator={props.mainUser.uniqueUserId === community.moderator.uniqueUserId}\n                                                />\n                                            }\n                                            {props.mainUser === null &&\n                                                <NonUserCommunityPostsCard \n                                                    post={post}\n                                                    id={post.uniquePostId}\n                                                />\n                                            }\n                                            {index < props.posts.length - 1 &&\n                                                <div \n                                                    style={{\n                                                        marginBottom: 20,\n                                                    }}\n                                                />\n                                            }\n                                        </div>\n                                    ))}\n                                </div>\n                            }\n                        </TabPanel>\n                        {/* This is the end of the tab for posts. Now, we need a tab for the about section of the community*/}\n                        <TabPanel \n                            value={1}\n                            index={curTab2} \n                        >\n                            <div \n                                style={{\n                                    margin: 'auto',\n                                    maxWidth: 600,\n                                    textAlign: 'center',\n                                }}\n                            >\n                                <List>\n                                    {/* First list item that shows the community moderator */}\n                                    <ListItem\n                                        style={{\n                                            cursor: 'pointer',\n                                        }}\n                                        onClick={e => history.push(`/geouser/${community.moderator.uniqueUserId}`)}\n                                        alignItems='flex-start'\n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar \n                                                src={`http://192.168.0.17:3001/api/get/avatar/by/id/${community.moderator.uniqueUserId}`}\n                                                title={`${community.moderator.username}`}\n                                                alt={`${community.moderator.username}`} \n                                                style={{\n                                                    cursor: 'pointer',\n                                                }}\n                                            />\n                                        </ListItemAvatar>\n                                        <ListItemText \n                                            primary={\n                                                <div>\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                    >\n                                                        Moderator \n                                                    </Typography>\n                                                    <Typography \n                                                        variant='subtitle1' \n                                                        component='span' \n                                                        color='textSecondary'\n                                                    >\n                                                        {community.moderator.username}\n                                                    </Typography>\n                                                </div>\n                                            }\n                                        />\n                                    </ListItem>\n                                    <Divider />\n                                    {/* End of the community moderator list item */}\n                                    {/* Begin the community description section */} \n                                    <ListItem>\n                                        <div>\n                                            <Typography \n                                                variant='h6'\n                                                component='h6' \n                                                align='center' \n                                            >\n                                                Description\n                                            </Typography>\n                                            <br></br>\n                                            <Typography \n                                                variant='body1' \n                                                component='p' \n                                            >\n                                                {community.description}\n                                            </Typography>\n                                        </div>\n                                    </ListItem>\n                                    <Divider />\n                                    {/* End of the section for the community description */}\n                                    {/* Begin the ListItem for the number of members in the community */}\n                                    <ListItem>\n                                        <ListItemText \n                                            primary={\n                                                <div>\n                                                    <Typography \n                                                        variant='body1' \n                                                        component='p'\n                                                        align='center' \n                                                    >\n                                                        {community.members.length} members \n                                                    </Typography>\n                                                </div>\n                                            }\n                                        />\n                                    </ListItem>\n                                    <Divider />\n                                    {/* End of ListItem showing the number of users in a community */}\n                                    {/* Begin the section showing a list of topics within the community */}\n                                    <Typography \n                                        variant='h6' \n                                        component='h6' \n                                        align='center' \n                                    >\n                                        Topics\n                                    </Typography>\n                                    <List>\n                                        {community.topics.map((topic, index) => (\n                                            <ListItem \n                                                key={index.toString()} \n                                                alignItems='flexStart' \n                                            >\n                                                <ListItemText \n                                                    primary={\n                                                        <div>\n                                                            <Typography \n                                                                variant='body1' \n                                                                component='p'\n                                                                align='center' \n                                                            >\n                                                                {topic}\n                                                            </Typography>\n                                                        </div>\n                                                    }\n                                                />\n                                            </ListItem>\n                                        ))}\n                                    </List>\n                                    {/* End of the section for the community topics */}\n                                </List>\n                                {/* End of the list, but add community rules below */}\n                                {community.rules.length > 0 &&\n                                    <div>\n                                        <Divider />\n                                        <Typography \n                                            variant='h6' \n                                            component='h6' \n                                            align='center' \n                                        >\n                                            Rules \n                                        </Typography>\n                                        {community.rules.map((item, index) => (\n                                            <div \n                                                key={index} \n                                            >\n                                                <Accordion\n                                                    style={{\n                                                        marginBottom: index < community.rules.length - 1 ? 20 : 0,\n                                                    }}\n                                                >\n                                                    <AccordionSummary\n                                                        expandIcon={<ChevronDownIcon />}\n                                                    >\n                                                        {item.rule}\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                        >\n                                                            {item.reason}\n                                                        </Typography>\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                            </div>\n                                        ))}\n                                    </div>\n                                }\n                            </div>\n                        </TabPanel>\n                        {/* This is the end of the tab panel for the about section. Now it is time to add the  tab panel for the settings, which only the moderator can see. */}\n                        <TabPanel \n                            value={2} \n                            index={curTab2} \n                        >\n                            <div>\n                                <Typography \n                                    variant='h4' \n                                    component='h4'\n                                    align='center' \n                                >\n                                    Settings \n                                </Typography>\n                            </div>\n                            <Divider />\n                            <div>\n                                <Typography \n                                    variant='subtitle2' \n                                    component='small' \n                                    color={(editTitleText.length < 10 || editTitleText.length > 75) ? 'error' : 'default'}\n                                    align='center'\n                                >\n                                    {editTitleText.length}/75\n                                </Typography>\n                                <TextField \n                                    variant='outlined' \n                                    color='primary' \n                                    label='Community title' \n                                    helperText='Change the community title. Must be between 10 and 75 characters long' \n                                    placeholder={community.title}\n                                    value={editTitleText} \n                                    onChange={e => setEditTitleText(e.target.value)} \n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    fullWidth \n                                />\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    onClick={updateTitle}\n                                    disabled={makingEdit}\n                                >\n                                    {makingEdit ? <CircularProgress /> : 'Update title'}\n                                </Button>\n                            </div>\n                            <Divider />\n                            <div \n                                style={{\n                                    marginTop: 30,\n                                }}\n                            >\n                                <Typography \n                                    variant='subtitle2'\n                                    component='small'\n                                    color={(editDescriptionText.length < 10 || editDescriptionText.length > 300) ? 'error' : 'default'}\n                                    align='center' \n                                >\n                                    {editDescriptionText.length}/300\n                                </Typography>\n                                <TextField \n                                    variant='outlined' \n                                    color='primary' \n                                    label='Community descriptiom' \n                                    helperText='Change the community description. Must be between 10 and 300 characters long' \n                                    placeholder={community.description}\n                                    value={editDescriptionText} \n                                    onChange={e => setEditDescriptionText(e.target.value)} \n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    rows={3}\n                                    multiline\n                                    fullWidth \n                                />\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    onClick={updateDescription}\n                                    disabled={makingEdit}\n                                >\n                                    {makingEdit ? <CircularProgress /> : 'Update title'}\n                                </Button>\n                            </div>\n                            <Divider />\n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                <Typography \n                                className={classes.topMarg} \n                                variant='body1' \n                                component='p'\n                                >\n                                    Update community avatar photo!\n                                </Typography>\n                                <label \n                                    className={classes.topMarg}\n                                    html-for='avatar' \n                                    style={{\n                                        margin: 'auto',\n                                    }}\n                                >\n                                    <input \n                                        className={classes.input}\n                                        id='avatar'\n                                        name='avatar ' \n                                        type='file'\n                                        accept='image/jpeg, image/jpg, image/png'\n                                        onChange={handleAvatarChange}\n                                        required \n                                    />\n                                    <Button \n                                        component='span'\n                                        color='primary' \n                                        variant='contained' \n                                    >\n                                        <CameraIcon />\n                                    </Button>\n                                </label>\n                                <br/>\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    style={{\n                                        marginTop: 15,\n                                    }}\n                                    onClick={updateAvatar}\n                                    disabled={makingEdit}\n                                >\n                                    {makingEdit ? <CircularProgress /> : 'Update Avatar'}\n                                </Button>\n                            </div>\n                            <Divider />\n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                <Typography \n                                    variant='subtitle2'\n                                    component='small' \n                                >\n                                    Select a theme color for this community {themeEdit}!\n                                </Typography>\n                                <SwatchesPicker \n                                    color={themeEdit} \n                                    onChange={color => setThemeEdit(color.hex)} \n                                    colors={[\n                                        ['#00143C', '#2471A3', '#3498DB'],\n                                        ['#641E16', '#C0392B', '#E74C3C'],\n                                        ['#0E6655', '#45B39D', '#58D68D'],\n                                        ['#5B2C6F', '#8E44AD', '#C39BD3'],\n                                        ['#BA4A00', '#DC7633', '#E67E22'],\n                                        ['#000000', '#34495E', '#7F8C8D'],\n                                    ]}\n                                />\n                                <Button \n                                    style={{\n                                        marginTop: 20,\n                                    }}\n                                    variant='contained' \n                                    color='primary' \n                                    disabled={makingEdit} \n                                    onClick={updateTheme}\n                                >\n                                    {makingEdit ? <CircularProgress /> : 'Update Community Theme'} \n                                </Button>\n                            </div>\n                            <Divider /> \n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                <Button \n                                    variant='contained'\n                                    color='primary' \n                                    disabled={makingEdit} \n                                    onClick={updatePrivacy} \n                                >\n                                    {community.communityPrivacy === 'public' ? 'Make community private' : 'Make community public'}\n                                </Button>\n                            </div>\n                            <Divider />\n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                <FormControl\n                                    component='fieldset' \n                                >\n                                    <FormLabel \n                                        component='legend' \n                                    >\n                                        Select at least 1 community topic. You can choose up to 10 (required)\n                                    </FormLabel>\n                                    <FormGroup \n                                        column \n                                    >\n                                        {communityTopics.map((topic, index) => (\n                                            <FormControlLabel \n                                                key={index.toString()}\n                                                value={topic}\n                                                onChange={handleTopicsChange}\n                                                label={topic}\n                                                labelPlacement='end' \n                                                control={\n                                                    <Checkbox \n                                                        color='primary' \n                                                        checked={topics.includes(topic)}\n                                                    />\n                                                }\n                                            />\n                                        ))}\n                                    </FormGroup>\n                                </FormControl>\n                                <br />\n                                <Button \n                                    style={{\n                                        marginTop: 20,\n                                    }}\n                                    variant='contained' \n                                    color='primary' \n                                    onClick={updateTopics} \n                                    disabled={makingEdit} \n                                >\n                                    {makingEdit ? <CircularProgress /> : 'Update community topics'}\n                                </Button>\n                            </div>\n                            <Divider />\n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                    align='center' \n                                >\n                                    Block User\n                                </Typography>\n                                <Autocomplete \n                                    value={selectedUser}\n                                    filterOptions={userFilterOptions}\n                                    options={allUsers}\n                                    getOptionLabel={option => option.firstName + ' ' + option.lastName}\n                                    renderOption={option => (\n                                        <ListItem \n                                            alignItems='flex-start' \n                                            onClick={() => blockUser(option.uniqueUserId, option.username)}\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://192.168.0.17:3001/api/get-photo/${option.avatar}`}\n                                                    alt={`${option.username}`}\n                                                    title={`${option.username}`} \n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                    >\n                                                        {option.username}\n                                                    </Typography>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        component='small'\n                                                        color='textSecondary' \n                                                    >\n                                                        {option.firstName} {option.lastName}\n                                                    </Typography>\n                                                }\n                                            />\n                                        </ListItem>\n                                    )}\n                                    renderInput={params => (\n                                        <TextField \n                                            {...params} \n                                            color='primary'\n                                            variant='outlined' \n                                            label='Block user' \n                                            placeholder='Search users'\n                                            helperText='Search for a GeoCities user to block'\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            fullWidth \n                                            required \n                                        />\n                                    )}\n                                />\n                            </div>\n                            <Divider />\n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                {community.blockList.length > 0 &&\n                                    <List>\n                                        {community.blockList.map((user, index) => (\n                                            <ListItem \n                                                key={index}\n                                                alignItems='flexStart' \n                                            >\n                                                <ListItemAvatar>\n                                                    <Avatar \n                                                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${user.uniqueUserId}`}\n                                                        title={`${user.username}`}\n                                                        alt={`${user.username}`} \n                                                    />\n                                                </ListItemAvatar>\n                                                <Button \n                                                    variant='contained' \n                                                    color='primary' \n                                                    onClick={e => unBlockUser(user.uniqueUserId, user.username)}\n                                                    disabled={makingEdit}\n                                                >\n                                                    {makingEdit ? <CircularProgress /> : 'Unblock user'}\n                                                </Button>\n                                            </ListItem>\n                                        ))}\n                                    </List>\n                                }\n                            </div>\n                            <Divider />\n                            {/* End of the section for unblocking a user. Now we need a section that can help us delete rules */}\n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                    align='center' \n                                >\n                                    Delete rules \n                                </Typography>\n                                {community.rules.length > 0 &&\n                                    <List>\n                                        {community.rules.map((item, index) => (\n                                            <div>\n                                                <ListItem \n                                                    key={index} \n                                                    alignItems='flex-start' \n                                                    style={{\n                                                        marginBottom: index < community.rules.length - 1 ? 15 : 0,\n                                                    }}\n                                                >\n                                                    <ListItemText \n                                                        secondary={\n                                                            <Typography \n                                                                variant='subtitle1' \n                                                                color='textSecondary' \n                                                                component='span' \n                                                            >\n                                                                {item.rule}\n                                                            </Typography>\n                                                        }\n                                                    />\n                                                    <Button \n                                                        color='primary' \n                                                        onClick={e => deleteRule(item.rule)}\n                                                        disabled={makingEdit}\n                                                    >\n                                                        delete rule \n                                                    </Button>\n                                                </ListItem>\n                                            </div>\n                                        ))}\n                                    </List>\n                                }\n                            </div>\n                            <Divider />\n                            {/* End of the section for deleting rules. Now we need to create the section to ADD rules */}\n                            <div \n                                style={{\n                                    marginTop: 40,\n                                }}\n                            >\n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                    align='center' \n                                >\n                                    Create new rule \n                                </Typography>\n                                <div \n                                    style={{\n                                        marginTop: 20,\n                                    }}\n                                >\n                                    <Typography \n                                        variant='subtitle2' \n                                        component='small' \n                                        color={newRule.length > 100 ? 'error' : 'default'} \n                                        align='center'\n                                    >\n                                        {newRule.length}/100\n                                    </Typography>\n                                    <TextField \n                                        value={newRule}\n                                        onChange={e => setNewRule(e.target.value)}\n                                        label='Add new rule' \n                                        placeholder='Add a new rule for the community'\n                                        helperText='New rule can be a max of 100-characters' \n                                        color='primary' \n                                        variant='outlined' \n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        fullWidth \n                                    />\n                                    <Typography \n                                        variant='subtitle2' \n                                        component='small' \n                                        color={newReason.length > 300 ? 'error' : 'default'} \n                                        align='center' \n                                        style={{\n                                            marginTop: 35,\n                                        }}\n                                    >\n                                        {newReason.length}/300\n                                    </Typography>\n                                    <TextField \n                                        value={newReason} \n                                        onChange={e => setNewReason(e.target.value)} \n                                        label='Add a reason for the rule'\n                                        placeholder='You must enter a reason for this rule' \n                                        helperText='The reason can be up to 300 characters long'\n                                        color='primary' \n                                        variant='outlined' \n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        multiline \n                                        row={4} \n                                        fullWidth \n                                    />\n                                    <br />\n                                    <Button \n                                        style={{\n                                            marginTop: 20,\n                                        }}\n                                        color='primary' \n                                        variant='contained' \n                                        disabled={makingEdit} \n                                        onClick={addRule}\n                                    >\n                                        {makingEdit ? <CircularProgress /> : 'Add rule'}\n                                    </Button>\n                                </div>\n                            </div>\n                        </TabPanel>\n                    </Grid>\n                }\n                {/* End of the Grid for the main sections of the community page */}\n            </Grid>\n        );\n    }\n    else {\n        //If the community is null, simply return a Backdrop with a CircularProgress inside \n        return (\n            <Backdrop \n                open={true} \n            >\n                <CircularProgress \n                    color='primary' \n                />\n            </Backdrop>\n        );\n    }  \n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n        posts: state.visitorPostsReducer.posts,\n    };\n}\n\nexport default connect(mapStateToProps)(Community);","/Users/simeonikudabo/Downloads/geocities/src/components/CommunityPostsCard.js",["211"],"import React, { useState, useRef, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Icon from '@mdi/react';\nimport { mdiThumbUp, mdiThumbUpOutline, mdiComment, mdiCommentOutline, mdiChevronDown, mdiChevronUp, mdiDelete, mdiSend, mdiDotsVertical } from '@mdi/js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Plyr from 'react-plyr';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { useHistory } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        maxWidth: 600,\n        margin: 'auto',\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.background.paper,\n    },\n    media: {\n        height: 0,\n        padding: '56.25%',\n    },\n    image: {\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n}));\n\nfunction GeoUserPostsCard(props) {\n    const classes = useStyles(); //Custom styles for the component\n    const formRef = useRef(null); //Ref for the validator form\n    const [expanded, setExpanded] = useState(false); //This expands the comments. \n    const [comment, setComment] = useState(''); //This variable holds the comment.\n    const [commentSending, setCommentSending] = useState(false); //This variable will disable the comment button.\n    const [likeSending, setLikeSending] = useState(false); //This variable will disable the like button.\n    const [commentDeleting, setCommentDeleting] = useState(false); //This variable and setter will handle disabling the delete button while a comment is being deleted.\n    const [commentLiking, setCommentLiking] = useState(false); //This variable and setter will handle disabling the comment like Button when the comment is being liked or unliked.\n    const [deletingPost, setDeletingPost] = useState(false); //Variable and setter that will disable the delete button on a post while the server is deleting the post.\n    const [anchorEl, setAnchorEl] = useState(null); //The anchor element for a menu item within a Card Post.\n    const history = useHistory();\n\n    useEffect(() => {\n        //Add the validation rule so that a comment is not empty. \n        ValidatorForm.addValidationRule('notEmpty', v => {\n            if(v.length < 1) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }, []);\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function changeAnchorEl(e) {\n        //Function that will handle altering the anchorEl on menu open \n        setAnchorEl(e.currentTarget);\n    }\n\n    function handleMenuClose() {\n        //This will handle closing the share button menu.\n        setAnchorEl(null);\n    }\n\n    function handleLike() {\n        //This function will handle liking a post when a mainUser visits a geoUsers' page. \n        setLikeSending(true);\n        let likeType;\n        if(props.post.likes.includes(props.mainUser.uniqueUserId)) {\n            likeType = 'unlike';\n        }\n        else if(!props.post.likes.includes(props.mainUser.uniqueUserId)) {\n            likeType = 'like';\n        }\n        let data = {\n            uniqueLikerId: props.mainUser.uniqueUserId,\n            uniquePostId: props.post.uniquePostId,\n            uniqueUserId: props.post.uniqueUserId,\n            username: props.mainUser.username,\n            likeType: likeType,\n            communityPost: true,\n            communityName: props.post.community,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/handle/geo/post/like',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts}); //Update the posts. \n            if(response.data.likeType === 'like') {\n                swal(\n                    'Great!',\n                    'Post was successfully liked!',\n                    'success',\n                );\n                setLikeSending(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Post was successfully unliked!',\n                    'success',\n                );\n                setLikeSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error liking or unliking that post!',\n                'error',\n            );\n            setLikeSending(false);\n        });\n    }\n\n    function deletePost() {\n        //This function will handle deleting a post from the database. \n        setDeletingPost(true);\n\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            uniquePostId: props.post.uniquePostId,\n            community: props.post.community,\n            communityPost: true,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/post',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.user) {\n                props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                swal(\n                    'Great!',\n                    'Post succcessfully deleted',\n                    'success',\n                );\n                setDeletingPost(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error deleting that post!',\n                    'error',\n                );\n                setDeletingPost(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that post!',\n                'error',\n            );\n\n            setDeletingPost(false);\n        });\n    }\n\n    function deleteMediaPost() {\n        //This function will handle deleting a post from the database. \n        setDeletingPost(true);\n\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            uniquePostId: props.post.uniquePostId,\n            filename: props.post.src,\n            community: props.post.community,\n            communityPost: true,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/media/post',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.user) {\n                props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                swal(\n                    'Great!',\n                    'Post succcessfully deleted',\n                    'success',\n                );\n                setDeletingPost(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error deleting that post!',\n                    'error',\n                );\n                setDeletingPost(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that post!',\n                'error',\n            );\n\n            setDeletingPost(false);\n        });\n    }\n\n    async function sendComment() {\n        setCommentSending(true);\n        let formValid = await formRef.current.isFormValid();\n        if(!formValid) {\n            swal(\n                'Uh Oh!',\n                'You must enter some text to send that comment!',\n                'error',\n            );\n            setCommentSending(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n\n            let data = {\n                uniqueCommentId: Date.now() + 'comment' + props.mainUser.uniqueUserId + props.mainUser.username + Date.now(),\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                dateString: `${month} ${day}, ${year}`,\n                text: comment,\n                uniquePosterId: props.post.uniqueUserId,\n                uniquePostId: props.post.uniquePostId,\n                communityPost: true,\n                communityName: props.post.community,\n            };\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/add/geo/comment',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }).then(response => {\n                props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                swal(\n                    'Great!',\n                    'Successfully posted comment!',\n                    'success',\n                );\n                setCommentSending(false);\n                setComment('');\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that comment! Please try again.',\n                    'error',\n                );\n                setCommentSending(false);\n            });\n        }\n    }\n\n    function deleteComment(uniqueCommentId) {\n        setCommentDeleting(true); \n\n        let data = {\n            uniquePostId: props.post.uniquePostId,\n            commentId: uniqueCommentId,\n            uniquePosterId: props.post.uniqueUserId,\n            community: props.post.community,\n            communityPost: true,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/comment',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n            swal(\n                'Great!',\n                'Comment successfully deleted!',\n                'success',\n            );\n            setCommentDeleting(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that comment!',\n                'error',\n            );\n            setCommentDeleting(false);\n        });\n    }\n\n    function handleUserPush(uniqueUserId) {\n        //Route that handles pushing to a new user when the avatar is clicked within comments. \n        history.push(`/geouser/${uniqueUserId}`);\n        history.go(0);\n    }\n\n    function handleCommentLike(uniqueCommentId, uniqueCommenterId, isLiked) {\n        setCommentLiking(true); \n        let likeType;\n        if(isLiked) {\n            likeType = 'unlike';\n        }\n        else {\n            likeType = 'like';\n        }\n\n        let data = {\n            likeType: likeType,\n            commentId: uniqueCommentId,\n            uniqueCommenterId: uniqueCommenterId,\n            uniquePostPosterId: props.post.uniqueUserId,\n            uniqueLikerId: props.mainUser.uniqueUserId,\n            username: props.mainUser.username,\n            postType: 'personal',\n            uniquePostId: props.post.uniquePostId,\n            community: props.post.community,\n            communityPost: true,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/handle/geo/comment/like',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            console.log('Here are the posts');\n            console.log(response.data.posts);\n            props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n            if(response.data.likeType === 'like') {\n                swal(\n                    'Great!',\n                    'Comment successfully liked!',\n                    'success',\n                );\n                setCommentLiking(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Comment successfully unliked!',\n                    'success',\n                );\n                setCommentLiking(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error liking or unliking that comment! Please try again.',\n                'error',\n            );\n            setCommentLiking(false);\n        });\n    }\n\n    return (\n        <Card \n            className={classes.card}\n            id={`${props.post.uniquePostId}`}\n        >\n            <CardHeader \n                title={\n                    <Grid \n                        item \n                        xs={12}\n                        zeroMinWidth \n                    >\n                        <Typography \n                            variant='subtitle1'\n                            component='small'\n                            noWrap\n                            style={{\n                                fontWeight: 'bold',\n                                fontSize: 12,\n                            }}\n                        >\n                            {props.post.community}\n                        </Typography>\n                    </Grid>\n                }\n                subheader={\n                    <React.Fragment>\n                        <Typography \n                            variant='subtitle1'\n                            component='span'\n                            color='textSecondary' \n                        >\n                            {timeDifference(props.post.utcTime, props.post.dateString)}\n                        </Typography>\n                        <br />\n                        <Typography \n                            variant='subtitle2' \n                            component='small' \n                            color='textSecondary'  \n                            style={{\n                                cursor: 'pointer',\n                            }}\n                            onClick={e => history.push(`/geouser/${props.post.uniqueUserId}`)}\n                        >\n                            {props.post.username}\n                        </Typography>\n                    </React.Fragment>\n                }\n                avatar={\n                    <Avatar \n                        src={`http://192.168.0.17:3001/api/get/avatar/by/community/name/${props.post.community}`}\n                        title={`${props.post.username}`}\n                        alt={`${props.post.username}`}\n                    />\n                }\n                action={\n                    <div>\n                        <IconButton>\n                            <Icon \n                                path={mdiDotsVertical} \n                                size={1} \n                                title='Share button' \n                                aria-label='Share button' \n                                onClick={changeAnchorEl}\n                            />\n                        </IconButton>\n                        <Menu \n                            open={Boolean(anchorEl)}\n                            anchorEl={anchorEl}\n                            keepMounted \n                            onClose={handleMenuClose}\n                        >\n                            <MenuItem>\n                                <TextField \n                                    label='Post link' \n                                    color='primary' \n                                    value={`http://192.168.0.9:3000/community/${props.post.community}#${props.post.uniquePostId}`}\n                                    readonly \n                                />\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                }\n            />\n            <div>\n                {props.post.type === 'photo' &&\n                    <CardMedia \n                        className={classes.media}\n                        image={`http://192.168.0.17:3001/api/get-photo/${props.post.src}`}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities photo post'\n                    />\n                }\n                {props.post.type === 'link' && \n                    <CardMedia\n                        image={props.post.linkImage}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities link post'\n                        className={classes.media}\n                    />\n                }\n            </div>\n            <div>\n                {props.post.type === 'video' &&\n                    <CardContent>\n                        <Plyr \n                            playsinline={true}\n                            playsInline\n                            type='video'\n                            sources={[\n                                {\n                                    src: `http://192.168.0.17:3001/api/get-video/${props.post.src}`,\n                                }\n                            ]}\n                            fullscreen={{\n                                enable: true,\n                                fallback: true,\n                                iosNative: false,\n                            }}\n                        />\n                    </CardContent>\n                }\n            </div>\n            <CardContent>\n                <div>\n                    {props.post.title &&\n                        <Typography \n                            variant='h3' \n                            component='h3' \n                            align='center'\n                        >\n                            {props.post.title}\n                        </Typography>\n                    }\n                    {props.post.type === 'text' &&\n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.text}\n                        </Typography>\n                    }\n                    {props.post.type === 'link' &&\n                        <div>\n                            <a \n                                href={props.post.link} \n                                style={{\n                                    textAlign: 'center',\n                                }}\n                            >\n                                Link\n                            </a>\n                            <Typography \n                                variant='body2' \n                                component='p' \n                            >\n                                {props.post.linkDescription}\n                            </Typography>\n\n                        </div>\n                    }   \n                </div>\n                <div>\n                    {(props.post.type === 'photo' || props.post.type === 'video') && \n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.caption}\n                        </Typography>\n                    }\n                </div>\n            </CardContent>\n            <CardActions>\n                <IconButton \n                    color='primary'\n                    disabled={likeSending}\n                >\n                    <Icon  \n                        path={props.post.likes.includes(props.mainUser.uniqueUserId) ? mdiThumbUp : mdiThumbUpOutline}\n                        size={1} \n                        title='Post like button'\n                        aria-label='Post like button'\n                        onClick={handleLike}\n                    />\n                    <div>\n                        {props.post.likes.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.likes.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    color='primary'\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={_.find(props.post.comments, comment => comment.uniqueUserId === props.mainUser.uniqueUserId) ? mdiComment : mdiCommentOutline} \n                        size={1}\n                        title='Comment button' \n                        aria-label='Comment button' \n                    />\n                    <div>\n                        {props.post.comments.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.comments.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <div>\n                    {(props.post.uniqueUserId === props.mainUser.uniqueUserId || props.moderator === true) && (props.post.type === 'text' || props.post.type === 'link') &&\n                        <IconButton \n                            color='primary' \n                            onClick={deletePost}\n                            disabled={deletingPost}\n                        >\n                            {deletingPost ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Post delete button' aria-label='Post delete button' />}\n                        </IconButton>\n                    }\n                    {(props.post.uniqueUserId === props.mainUser.uniqueUserId || props.moderator === true) && (props.post.type === 'photo' || props.post.type === 'video') &&\n                        <IconButton \n                        color='primary' \n                        onClick={deleteMediaPost}\n                        disabled={deletingPost}\n                        >\n                            {deletingPost ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Post delete button' aria-label='Post delete button' />}\n                        </IconButton>\n                    }\n                </div>\n                <IconButton \n                    style={{\n                        marginLeft: 'auto' \n                    }}\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={expanded ? mdiChevronUp : mdiChevronDown} \n                        size={1}\n                        title={expanded ? 'Expand less' : 'Expand more'} \n                        aria-label={expanded ? 'Expand less' : 'Expand more'} \n                    />\n                </IconButton>\n            </CardActions>\n            <Collapse \n                in={expanded} \n            >\n                <Divider />\n                <CardContent>\n                    <ValidatorForm \n                        ref={formRef} \n                        onSubmit={e => e.preventDefault()} \n                    >\n                        <TextValidator \n                            label='Comment' \n                            placeholder='Add a comment...' \n                            variant='outlined' \n                            color='primary' \n                            helperText='Add a comment' \n                            value={comment} \n                            onChange={e => setComment(e.target.value)} \n                            validators={['notEmpty']}\n                            errorMessages={['You must enter some text to send a comment!']}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            rows={4}\n                            multiline \n                            fullWidth \n                        />\n                        <Button \n                            color='primary' \n                            variant='outlined' \n                            startIcon={\n                                <Icon \n                                    path={mdiSend} \n                                    size={1} \n                                    title='Send icon' \n                                />\n                            }\n                            aria-label='Send comment button' \n                            disabled={commentSending}\n                            onClick={sendComment}\n                        >\n                            {commentSending ? <CircularProgress color='primary' /> : 'Send'}\n                        </Button>\n                    </ValidatorForm>\n                    <Divider />\n                    <div \n                        style={{\n                            marginTop: 10,\n                        }}\n                    >\n                        {props.post.comments.length > 0 &&\n                            <div>\n                                {props.post.comments.map((comment, index) => (\n                                    <div\n                                        key={index} \n                                    >\n                                        <ListItem \n                                            id={`${comment.uniqueCommentId}`}\n                                            alignItems='flex-start'\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://192.168.0.17:3001/api/get/avatar/by/id/${comment.uniqueUserId}`}\n                                                    title={`${comment.username}`}\n                                                    alt={`${comment.username}`} \n                                                    onClick={e => handleUserPush(comment.uniqueUserId)}\n                                                    style={{\n                                                        cursor: 'pointer',\n                                                    }}\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <div>\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                        >\n                                                            {comment.username}\n                                                        </Typography>\n                                                        <Typography \n                                                            variant='subtitle1' \n                                                            component='span' \n                                                            color='textSecondary'\n                                                        >\n                                                            {timeDifference(comment.utcTime, comment.dateString)}\n                                                        </Typography>\n                                                    </div>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        variant='body2' \n                                                        component='p' \n                                                    >\n                                                        {comment.text}\n                                                    </Typography>\n                                                }\n                                            />\n                                            <div>\n                                                {(props.mainUser.uniqueUserId === comment.uniqueUserId || props.moderator === true) &&\n                                                    <IconButton \n                                                        color='primary'\n                                                        onClick={() => deleteComment(comment.uniqueCommentId)}\n                                                        disabled={commentDeleting}\n                                                    >\n                                                        {commentDeleting ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Delete comment button' aria-label='Delete comment button' />}\n                                                    </IconButton>\n                                                }\n                                            </div>\n                                            <div>\n                                                {props.mainUser !== null &&\n                                                    <IconButton \n                                                        color='primary' \n                                                        disabled={commentLiking}\n                                                        onClick={() => handleCommentLike(comment.uniqueCommentId, comment.uniqueUserId, comment.likes.includes(props.mainUser.uniqueUserId))}\n                                                    >\n                                                        {!comment.likes.includes(props.mainUser.uniqueUserId) ? <Icon path={mdiThumbUpOutline} size={1}  title='Comment like button' aria-label='Comment like button' /> : <Icon path={mdiThumbUp} size={1} title='Comment like button' aria-label='Comment like button' />}\n                                                        {comment.likes.length > 0 &&\n                                                            <Typography \n                                                                variant='body1' \n                                                                component='p' \n                                                            >\n                                                                {comment.likes.length}\n                                                            </Typography>\n                                                        }\n                                                    </IconButton>\n                                                }\n                                            </div>\n                                        </ListItem>\n                                        {index < props.post.comments.length - 1 &&\n                                            <Divider />\n                                        }\n                                    </div>\n                                ))}\n                            </div>\n                        }\n                    </div>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        posts: state.visitorPostsReducer.posts,\n    };\n}\n\nexport default connect(mapStateToProps)(GeoUserPostsCard);","/Users/simeonikudabo/Downloads/geocities/src/components/NonUserPostsCard.js",["212","213","214","215","216","217","218","219","220","221","222","223","224","225","226"],"import React, { useState, useRef, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Icon from '@mdi/react';\nimport { mdiThumbUp, mdiThumbUpOutline, mdiComment, mdiCommentOutline, mdiChevronDown, mdiChevronUp, mdiDelete, mdiSend, mdiDotsVertical } from '@mdi/js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Plyr from 'react-plyr';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        maxWidth: 600,\n        margin: 'auto',\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.background.paper,\n    },\n    media: {\n        height: 0,\n        padding: '56.25%',\n    },\n    image: {\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n}));\n\nexport default function NonUserPostsCard(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [expanded, setExpanded] = useState(false); //Variable and setter for comments section to display.\n    const [anchorEl, setAnchorEl] = useState(null); //Anchor element for menu with the link to the Card post.\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function changeAnchorEl(e) {\n        //Function that will handle altering the anchorEl on menu open \n        setAnchorEl(e.currentTarget);\n    }\n\n    function handleMenuClose() {\n        //This will handle closing the share button menu.\n        setAnchorEl(null);\n    }\n\n    function handleUserPush(uniqueUserId) {\n        //Route that handles pushing to a new user when the avatar is clicked within comments. \n        history.push(`/geouser/${uniqueUserId}`);\n        history.go(0);\n    }\n\n    return (\n        <Card \n            className={classes.card}\n            id={`${props.post.uniquePostId}`}\n        >\n            <CardHeader \n                title={\n                    <Typography \n                        variant='h6' \n                        component='h6'\n                    >\n                        {props.post.username}\n                    </Typography>\n                }\n                subheader={\n                    <Typography \n                        variant='subtitle1'\n                        component='span'\n                        color='textSecondary' \n                    >\n                        {timeDifference(props.post.utcTime, props.post.dateString)}\n                    </Typography>\n                }\n                avatar={\n                    <Avatar \n                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${props.post.uniqueUserId}`}\n                        title={`${props.post.username}`}\n                        alt={`${props.post.username}`}\n                    />\n                }\n                action={\n                    <div>\n                        <IconButton>\n                            <Icon \n                                path={mdiDotsVertical} \n                                size={1} \n                                title='Share button' \n                                aria-label='Share button' \n                                onClick={changeAnchorEl}\n                            />\n                        </IconButton>\n                        <Menu \n                            open={Boolean(anchorEl)}\n                            anchorEl={anchorEl}\n                            keepMounted \n                            onClose={handleMenuClose}\n                        >\n                            <MenuItem>\n                                <TextField \n                                    label='Post link' \n                                    color='primary' \n                                    value={`localhost:3000/geouser/${props.post.uniqueUserId}#${props.post.uniquePostId}`}\n                                    readonly \n                                />\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                }\n            />\n            <div>\n                {props.post.type === 'photo' &&\n                    <CardMedia \n                        component='img'\n                        src={`http://192.168.0.17:3001/api/get-photo/${props.post.src}`}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities photo post'\n                    />\n                }\n            </div>\n            <div>\n                {props.post.type === 'video' &&\n                    <CardContent>\n                        <Plyr \n                            playsinline={true}\n                            playsInline\n                            type='video'\n                            sources={[\n                                {\n                                    src: `http://192.168.0.17:3001/api/get-video/${props.post.src}`,\n                                }\n                            ]}\n                            fullscreen={{\n                                enable: true,\n                                fallback: true,\n                                iosNative: false,\n                            }}\n                        />\n                    </CardContent>\n                }\n            </div>\n            <CardContent>\n                <div>\n                    {props.post.type === 'text' &&\n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.text}\n                        </Typography>\n                    }\n                </div>\n                <div>\n                    {(props.post.type === 'photo' || props.post.type === 'video') && \n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.caption}\n                        </Typography>\n                    }\n                </div>\n            </CardContent>\n            <CardActions>\n                <IconButton \n                    color='primary'\n                >\n                    <Icon  \n                        path={mdiThumbUpOutline}\n                        size={1} \n                        title='Post like button'\n                        aria-label='Post like button'\n                    />\n                    <div>\n                        {props.post.likes.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.likes.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    color='primary'\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={mdiCommentOutline} \n                        size={1}\n                        title='Comment button' \n                        aria-label='Comment button' \n                    />\n                    <div>\n                        {props.post.comments.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.comments.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    style={{\n                        marginLeft: 'auto' \n                    }}\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={expanded ? mdiChevronUp : mdiChevronDown} \n                        size={1}\n                        title={expanded ? 'Expand less' : 'Expand more'} \n                        aria-label={expanded ? 'Expand less' : 'Expand more'} \n                    />\n                </IconButton>\n            </CardActions>\n            <Collapse \n                in={expanded} \n            >\n                <Divider />\n                <CardContent>\n                    <div \n                        style={{\n                            marginTop: 10,\n                        }}\n                    >\n                        {props.post.comments.length > 0 &&\n                            <div>\n                                {props.post.comments.map((comment, index) => (\n                                    <div\n                                        key={index} \n                                    >\n                                        <ListItem \n                                            id={`${comment.uniqueCommentId}`}\n                                            alignItems='flex-start'\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://192.168.0.17:3001/api/get/avatar/by/id/${comment.uniqueUserId}`}\n                                                    title={`${comment.username}`}\n                                                    alt={`${comment.username}`} \n                                                    onClick={e => handleUserPush(comment.uniqueUserId)}\n                                                    style={{\n                                                        cursor: 'pointer',\n                                                    }}\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <div>\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                        >\n                                                            {comment.username}\n                                                        </Typography>\n                                                        <Typography \n                                                            variant='subtitle1' \n                                                            component='span' \n                                                            color='textSecondary'\n                                                        >\n                                                            {timeDifference(comment.utcTime, comment.dateString)}\n                                                        </Typography>\n                                                    </div>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        variant='body2' \n                                                        component='p' \n                                                    >\n                                                        {comment.text}\n                                                    </Typography>\n                                                }\n                                            />\n                                            <div>\n                                                <IconButton \n                                                    color='primary'\n                                                >\n                                                    <Icon \n                                                        path={mdiThumbUpOutline} \n                                                        size={1}  \n                                                        title='Comment like button' \n                                                        aria-label='Comment like button' \n                                                    /> \n                                                    {comment.likes.length > 0 &&\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                        >\n                                                            {comment.likes.length}\n                                                        </Typography>\n                                                    }\n                                                </IconButton>\n                                            </div>\n                                        </ListItem>\n                                        {index < props.post.comments.length - 1 &&\n                                            <Divider />\n                                        }\n                                    </div>\n                                ))}\n                            </div>\n                        }\n                    </div>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}","/Users/simeonikudabo/Downloads/geocities/src/components/UserPostsCard.js",["227","228"],"import React, { useState, useRef, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Icon from '@mdi/react';\nimport { mdiThumbUp, mdiThumbUpOutline, mdiComment, mdiCommentOutline, mdiChevronDown, mdiChevronUp, mdiDelete, mdiSend, mdiDotsVertical } from '@mdi/js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Plyr from 'react-plyr';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        maxWidth: 600,\n        margin: 'auto',\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.background.paper,\n    },\n    media: {\n        height: 0,\n        padding: '56.25%',\n    },\n    image: {\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n}));\n\nfunction UserPostsCard(props) {\n    const classes = useStyles(); //Custom styles for the component\n    const formRef = useRef(null); //Ref for the validator form\n    const history = useHistory(); //Access browser history.\n    const [expanded, setExpanded] = useState(false); //This expands the validator form\n    const [comment, setComment] = useState('');\n    const [commentSending, setCommentSending] = useState(false);\n    const [likeSending, setLikeSending] = useState(false);\n    const [commentDeleting, setCommentDeleting] = useState(false); //This variable and setter will handle disabling the delete button while a comment is being deleted.\n    const [commentLiking, setCommentLiking] = useState(false); //This variable and setter will handle disabling the comment like Button when the comment is being liked or unliked.\n    const [deletingPost, setDeletingPost] = useState(false); //Variable and setter that will disable the delete button on a post while the server is deleting the post.\n    const [anchorEl, setAnchorEl] = useState(null); //The anchor element for a menu item within a Card Post.\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule('notEmpty', v => {\n            if(v.length < 1) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }, []);\n\n    async function sendComment() {\n        //This function will handle sending a new comment to the server \n        setCommentSending(true);\n        if(comment === '') {\n            swal(\n                'Uh Oh!',\n                'You must enter a comment',\n                'error',\n            );\n            setCommentSending(false);\n            return false;\n        }\n        let formValid = await formRef.current.isFormValid();\n        if(!formValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure you filled out the comment form correctly!',\n                'error',\n            );\n            setCommentSending(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let month = date.getMonth();\n            let dateString = `${months[month]} ${day}, ${year}`;\n\n            let data = {\n                uniqueCommentId: Date.now() + 'comment' + props.mainUser.uniqueUserId + props.post.uniqueUserId,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                dateString: dateString,\n                text: comment,\n                uniquePosterId: props.post.uniqueUserId,\n                uniquePostId: props.post.uniquePostId,\n            }\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/add/comment',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                    props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                    setCommentSending(false);\n                    setComment('');\n                    swal(\n                        'Great!',\n                        'Comment successfully sent!',\n                        'success',\n                    );\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error sending that comment! Please try again.',\n                        'error',\n                    );\n                    setCommentSending(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that comment! Please try again.',\n                    'error',\n                );\n                setCommentSending(false);\n            });\n        }\n    }\n\n    function handleLike() {\n        //This function will handle what happens when a user likes a post. \n        setLikeSending(true);\n        let likeType;\n        if(props.post.likes.includes(props.mainUser.uniqueUserId)) {\n            likeType = 'unlike'\n        }\n        else {\n            likeType = 'like';\n        }\n\n        let data = JSON.stringify({\n            uniquePostId: props.post.uniquePostId,\n            uniquePosterId: props.post.uniqueUserId,\n            uniqueLikerId: props.mainUser.uniqueUserId,\n            likeType: likeType,\n            username: props.mainUser.username,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/handle/post/like',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.posts) {\n                props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                if(response.data.likeType === 'like') {\n                    swal(\n                        'Great!',\n                        'Post was successfully liked!',\n                        'success',\n                    );\n                    setLikeSending(false);\n                }\n                else {\n                    swal(\n                        'Great!',\n                        'Post was successfully unliked!',\n                        'success',\n                    );\n                    setLikeSending(false);\n                }\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error liking that post!',\n                    'error',\n                );\n                setLikeSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error liking that post!',\n                'error',\n            );\n            setLikeSending(false);\n        });\n    }\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function deleteComment(uniqueCommentId) {\n        //This function will be responsible for deleting a comment from a post. \n        setCommentDeleting(true);\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            uniquePostId: props.post.uniquePostId,\n            commentId: uniqueCommentId,\n            uniquePosterId: props.post.uniqueUserId,\n        });\n\n        return axios({\n            method: 'POST',\n            url: `http://192.168.0.17:3001/api/delete/comment`,\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            if(response.data.posts) {\n                swal(\n                    'Great!',\n                    'Comment successfully deleted!',\n                    'success',\n                );\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                setCommentDeleting(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error deleting that comment!',\n                    'error',\n                );\n                setCommentDeleting(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that comment!',\n                'error',\n            );\n            setCommentDeleting(false);\n        });\n\n    }\n\n    function handleCommentLike(uniqueCommentId, uniqueCommenterId, isLiked) {\n        setCommentLiking(true); \n        let likeType;\n        if(isLiked === true) {\n            likeType = 'unlike';\n        }\n        else {\n            likeType = 'like';\n        }\n\n        let data = JSON.stringify({\n            uniquePostId: props.post.uniquePostId,\n            commentId: uniqueCommentId,\n            uniqueLikerId: props.mainUser.uniqueUserId,\n            uniquePostPosterId: props.post.uniqueUserId,\n            uniqueCommenterId: uniqueCommenterId,\n            likeType: likeType,\n            username: props.mainUser.username,\n            postType: 'personal',\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/handle/comment/like',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.posts) {\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                if(response.data.likeType === 'unlike') {\n                    swal(\n                        'Great!',\n                        'You successfully unliked that comment!',\n                        'success',\n                    );\n                    setCommentLiking(false);\n                }\n                else {\n                    swal(\n                        'Great!',\n                        'You successfully liked that comment!',\n                        'success',\n                    );\n                    setCommentLiking(false);\n                }\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error liking that comment!',\n                    'error',\n                );\n                setCommentLiking(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh',\n                'There was an error liking that comment!',\n                'error',\n            );\n            setCommentLiking(false);\n        });\n    }\n\n    function deletePost() {\n        //This function will handle deleting a post from the database. \n        setDeletingPost(true);\n\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            uniquePostId: props.post.uniquePostId,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/post',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.user) {\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                swal(\n                    'Great!',\n                    'Post succcessfully deleted',\n                    'success',\n                );\n                setDeletingPost(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error deleting that post!',\n                    'error',\n                );\n                setDeletingPost(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that post!',\n                'error',\n            );\n\n            setDeletingPost(false);\n        });\n    }\n\n    function deleteMediaPost() {\n        //This function will handle deleting a post from the database. \n        setDeletingPost(true);\n\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            uniquePostId: props.post.uniquePostId,\n            filename: props.post.src,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/media/post',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.user) {\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                swal(\n                    'Great!',\n                    'Post succcessfully deleted',\n                    'success',\n                );\n                setDeletingPost(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error deleting that post!',\n                    'error',\n                );\n                setDeletingPost(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that post!',\n                'error',\n            );\n\n            setDeletingPost(false);\n        });\n    }\n\n    function changeAnchorEl(e) {\n        //Function that will handle altering the anchorEl on menu open \n        setAnchorEl(e.currentTarget);\n    }\n\n    function handleMenuClose() {\n        //This will handle closing the share button menu.\n        setAnchorEl(null);\n    }\n\n    function linkClick() {\n        //This function will handle switching to the URL of the link that is clicked if the post is a link post. \n        history.push(props.post.link); //We will use the link attribute of the post to switch to that location. \n    }\n\n    return (\n        <Card \n            className={classes.card} \n            id={`${props.post.uniquePostId}`}\n        >\n            <CardHeader \n                title={\n                    <Typography \n                        variant='h6' \n                        component='h6' \n                    >\n                        {props.post.username}\n                    </Typography>\n                }\n                subheader={\n                    <Typography \n                        variant='subtitle1' \n                        component='span' \n                        color='textSecondary' \n                    >\n                        {timeDifference(props.post.utcTime, props.post.dateString)}\n                    </Typography>\n                }\n                avatar={\n                    <Avatar \n                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${props.post.uniqueUserId}`}\n                        alt={`${props.post.username}`}\n                        title={`${props.post.username}`} \n                    />\n                }\n                action={\n                    <div>\n                        <IconButton>\n                            <Icon \n                                path={mdiDotsVertical} \n                                size={1} \n                                title='Share button' \n                                aria-label='Share button' \n                                onClick={changeAnchorEl}\n                            />\n                        </IconButton>\n                        <Menu \n                            open={Boolean(anchorEl)}\n                            anchorEl={anchorEl}\n                            keepMounted \n                            onClose={handleMenuClose}\n                        >\n                            <MenuItem>\n                                <TextField \n                                    label='Post link' \n                                    color='primary' \n                                    value={`http://192.168.0.9:3000/geouser/${props.post.uniqueUserId}#${props.post.uniquePostId}`}\n                                    readonly \n                                />\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                }\n            />\n            <div>\n                {props.post.type === 'photo' &&\n                    <CardMedia \n                        component='img'\n                        src={`http://192.168.0.17:3001/api/get-photo/${props.post.src}`}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities photo post'\n                    />\n                }\n            </div>\n            <div>\n                {props.post.type === 'link' && \n                    <CardMedia \n                        component='img'\n                        src={props.post.linkImage}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities link post'\n                    />\n                }\n            </div>\n            <div>\n                {props.post.type === 'video' &&\n                    <CardContent>\n                        <Plyr \n                            playsinline={true}\n                            playsInline\n                            type='video'\n                            sources={[\n                                {\n                                    src: `http://192.168.0.17:3001/api/get-video/${props.post.src}`,\n                                }\n                            ]}\n                            fullscreen={{\n                                enable: true,\n                                fallback: true,\n                                iosNative: false,\n                            }}\n                        />\n                    </CardContent>\n                }\n            </div>\n            <CardContent>\n                <div>\n                    {props.post.type === 'text' &&\n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.text}\n                        </Typography>\n                    }\n                </div>\n                <div>\n                    {(props.post.type === 'photo' || props.post.type === 'video') && \n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.caption}\n                        </Typography>\n                    }\n                </div>\n            </CardContent>\n            <CardActions>\n                <IconButton \n                    color='primary'\n                    disabled={likeSending}\n                >\n                    <Icon  \n                        path={props.post.likes.includes(props.mainUser.uniqueUserId) ? mdiThumbUp : mdiThumbUpOutline}\n                        size={1} \n                        title='Post like button'\n                        aria-label='Post like button' \n                        onClick={handleLike}\n                    />\n                    <div>\n                        {props.post.likes.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.likes.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    color='primary'\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={_.find(props.post.comments, comment => comment.uniqueUserId === props.mainUser.uniqueUserId) ? mdiComment : mdiCommentOutline} \n                        size={1}\n                        title='Comment button' \n                        aria-label='Comment button' \n                    />\n                    <div>\n                        {props.post.comments.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.comments.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <div>\n                    {props.post.uniqueUserId === props.mainUser.uniqueUserId && (props.post.type === 'text' || props.post.type === 'link') &&\n                        <IconButton \n                            color='primary' \n                            onClick={deletePost}\n                            disabled={deletingPost}\n                        >\n                            {deletingPost ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Post delete button' aria-label='Post delete button' />}\n                        </IconButton>\n                    }\n                    {props.post.uniqueUserId === props.mainUser.uniqueUserId && (props.post.type === 'photo' || props.post.type === 'video') &&\n                        <IconButton \n                        color='primary' \n                        onClick={deleteMediaPost}\n                        disabled={deletingPost}\n                        >\n                            {deletingPost ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Post delete button' aria-label='Post delete button' />}\n                        </IconButton>\n                    }\n                </div>\n                <IconButton \n                    style={{\n                        marginLeft: 'auto' \n                    }}\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={expanded ? mdiChevronUp : mdiChevronDown} \n                        size={1}\n                        title={expanded ? 'Expand less' : 'Expand more'} \n                        aria-label={expanded ? 'Expand less' : 'Expand more'} \n                    />\n                </IconButton>\n            </CardActions>\n            <Collapse \n                in={expanded} \n            >\n                <Divider />\n                <CardContent>\n                    <ValidatorForm \n                        ref={formRef} \n                        onSubmit={e => e.preventDefault()} \n                    >\n                        <TextValidator \n                            label='Comment' \n                            placeholder='Add a comment...' \n                            variant='outlined' \n                            color='primary' \n                            helperText='Add a comment' \n                            value={comment} \n                            onChange={e => setComment(e.target.value)} \n                            validators={['notEmpty']}\n                            errorMessages={['You must enter some text to send a comment!']}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            rows={4}\n                            multiline \n                            fullWidth \n                        />\n                        <Button \n                            color='primary' \n                            variant='outlined' \n                            startIcon={\n                                <Icon \n                                    path={mdiSend} \n                                    size={1} \n                                    title='Send icon' \n                                />\n                            }\n                            aria-label='Send comment button' \n                            disabled={commentSending}\n                            onClick={sendComment}\n                        >\n                            {commentSending ? <CircularProgress color='primary' /> : 'Send'}\n                        </Button>\n                    </ValidatorForm>\n                    <Divider />\n                    <div \n                        style={{\n                            marginTop: 10,\n                        }}\n                    >\n                        {props.post.comments.length > 0 &&\n                            <div>\n                                {props.post.comments.map((comment, index) => (\n                                    <div\n                                        key={index} \n                                    >\n                                        <ListItem \n                                            id={`${comment.uniqueCommentId}`}\n                                            alignItems='flex-start'\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://192.168.0.17:3001/api/get/avatar/by/id/${comment.uniqueUserId}`}\n                                                    title={`${comment.username}`}\n                                                    alt={`${comment.username}`} \n                                                    style={{\n                                                        cursor: 'pointer',\n                                                    }}\n                                                    onClick={e => history.push(`/geouser/${comment.uniqueUserId}`)}\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <div>\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                        >\n                                                            {comment.username}\n                                                        </Typography>\n                                                        <Typography \n                                                            variant='subtitle1' \n                                                            component='span' \n                                                            color='textSecondary'\n                                                        >\n                                                            {timeDifference(comment.utcTime, comment.dateString)}\n                                                        </Typography>\n                                                    </div>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        variant='body2' \n                                                        component='p' \n                                                    >\n                                                        {comment.text}\n                                                    </Typography>\n                                                }\n                                            />\n                                            <div>\n                                                {(props.post.uniqueUserId === comment.uniqueUserId || comment.uniqueUserId === props.mainUser.uniqueUserId || props.mainUser.uniqueUserId === props.post.uniqueUserId) &&\n                                                    <IconButton \n                                                        color='primary'\n                                                        onClick={() => deleteComment(comment.uniqueCommentId)}\n                                                        disabled={commentDeleting}\n                                                    >\n                                                        {commentDeleting ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Delete comment button' aria-label='Delete comment button' />}\n                                                    </IconButton>\n                                                }\n                                            </div>\n                                            <div>\n                                                {props.mainUser !== null &&\n                                                    <IconButton \n                                                        color='primary' \n                                                        disabled={commentLiking}\n                                                        onClick={() => handleCommentLike(comment.uniqueCommentId, comment.uniqueUserId, comment.likes.includes(props.mainUser.uniqueUserId))}\n                                                    >\n                                                        {!comment.likes.includes(props.mainUser.uniqueUserId) ? <Icon path={mdiThumbUpOutline} size={1}  title='Comment like button' aria-label='Comment like button' /> : <Icon path={mdiThumbUp} size={1} title='Comment like button' aria-label='Comment like button' />}\n                                                        {comment.likes.length > 0 &&\n                                                            <Typography \n                                                                variant='body1' \n                                                                component='p' \n                                                            >\n                                                                {comment.likes.length}\n                                                            </Typography>\n                                                        }\n                                                    </IconButton>\n                                                }\n                                            </div>\n                                        </ListItem>\n                                        {index < props.post.comments.length - 1 &&\n                                            <Divider />\n                                        }\n                                    </div>\n                                ))}\n                            </div>\n                        }\n                    </div>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        posts: state.userPostsReducer.posts,\n    };\n}\n\nexport default connect(mapStateToProps)(UserPostsCard);","/Users/simeonikudabo/Downloads/geocities/src/components/GeoUserPostsCard.js",["229","230","231"],"import React, { useState, useRef, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Icon from '@mdi/react';\nimport { mdiThumbUp, mdiThumbUpOutline, mdiComment, mdiCommentOutline, mdiChevronDown, mdiChevronUp, mdiDelete, mdiSend, mdiDotsVertical } from '@mdi/js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Plyr from 'react-plyr';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        maxWidth: 600,\n        margin: 'auto',\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.background.paper,\n    },\n    media: {\n        height: 0,\n        padding: '56.25%',\n    },\n    image: {\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n}));\n\nfunction GeoUserPostsCard(props) {\n    const classes = useStyles(); //Custom styles for the component\n    const formRef = useRef(null); //Ref for the validator form\n    const [expanded, setExpanded] = useState(false); //This expands the comments. \n    const [comment, setComment] = useState(''); //This variable holds the comment.\n    const [commentSending, setCommentSending] = useState(false); //This variable will disable the comment button.\n    const [likeSending, setLikeSending] = useState(false); //This variable will disable the like button.\n    const [commentDeleting, setCommentDeleting] = useState(false); //This variable and setter will handle disabling the delete button while a comment is being deleted.\n    const [commentLiking, setCommentLiking] = useState(false); //This variable and setter will handle disabling the comment like Button when the comment is being liked or unliked.\n    const [deletingPost, setDeletingPost] = useState(false); //Variable and setter that will disable the delete button on a post while the server is deleting the post.\n    const [anchorEl, setAnchorEl] = useState(null); //The anchor element for a menu item within a Card Post.\n    const history = useHistory();\n\n    useEffect(() => {\n        //Add the validation rule so that a comment is not empty. \n        ValidatorForm.addValidationRule('notEmpty', v => {\n            if(v.length < 1) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }, []);\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function changeAnchorEl(e) {\n        //Function that will handle altering the anchorEl on menu open \n        setAnchorEl(e.currentTarget);\n    }\n\n    function handleMenuClose() {\n        //This will handle closing the share button menu.\n        setAnchorEl(null);\n    }\n\n    function handleLike() {\n        //This function will handle liking a post when a mainUser visits a geoUsers' page. \n        setLikeSending(true);\n        let likeType;\n        if(props.post.likes.includes(props.mainUser.uniqueUserId)) {\n            likeType = 'unlike';\n        }\n        else if(!props.post.likes.includes(props.mainUser.uniqueUserId)) {\n            likeType = 'like';\n        }\n        let data = {\n            uniqueLikerId: props.mainUser.uniqueUserId,\n            uniquePostId: props.post.uniquePostId,\n            uniqueUserId: props.post.uniqueUserId,\n            username: props.mainUser.username,\n            likeType: likeType,\n            communityPost: false,\n            communityName: '',\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/handle/geo/post/like',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts}); //Update the posts. \n            props.setter(response.data.geoUser); //Update the geoUser with the state setter method.\n            if(response.data.likeType === 'like') {\n                swal(\n                    'Great!',\n                    'Post was successfully liked!',\n                    'success',\n                );\n                setLikeSending(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Post was successfully unliked!',\n                    'success',\n                );\n                setLikeSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error liking or unliking that post!',\n                'error',\n            );\n            setLikeSending(false);\n        });\n    }\n\n    async function sendComment() {\n        setCommentSending(true);\n        let formValid = await formRef.current.isFormValid();\n        if(!formValid) {\n            swal(\n                'Uh Oh!',\n                'You must enter some text to send that comment!',\n                'error',\n            );\n            setCommentSending(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n\n            let data = {\n                uniqueCommentId: Date.now() + 'comment' + props.mainUser.uniqueUserId + props.mainUser.username + Date.now(),\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                dateString: `${month} ${day}, ${year}`,\n                text: comment,\n                uniquePosterId: props.post.uniqueUserId,\n                uniquePostId: props.post.uniquePostId,\n            };\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/add/geo/comment',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }).then(response => {\n                props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                swal(\n                    'Great!',\n                    'Successfully posted comment!',\n                    'success',\n                );\n                setCommentSending(false);\n                setComment('');\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that comment! Please try again.',\n                    'error',\n                );\n                setCommentSending(false);\n            });\n        }\n    }\n\n    function deleteComment(uniqueCommentId) {\n        setCommentDeleting(true); \n\n        let data = {\n            uniquePostId: props.post.uniquePostId,\n            commentId: uniqueCommentId,\n            uniquePosterId: props.post.uniqueUserId,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/comment',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n            swal(\n                'Great!',\n                'Comment successfully deleted!',\n                'success',\n            );\n            setCommentDeleting(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that comment!',\n                'error',\n            );\n            setCommentDeleting(false);\n        });\n    }\n\n    function handleUserPush(uniqueUserId) {\n        //Route that handles pushing to a new user when the avatar is clicked within comments. \n        history.push(`/geouser/${uniqueUserId}`);\n        history.go(0);\n    }\n\n    function handleCommentLike(uniqueCommentId, uniqueCommenterId, isLiked) {\n        setCommentLiking(true); \n        let likeType;\n        if(isLiked) {\n            likeType = 'unlike';\n        }\n        else {\n            likeType = 'like';\n        }\n\n        let data = {\n            likeType: likeType,\n            commentId: uniqueCommentId,\n            uniqueCommenterId: uniqueCommenterId,\n            uniquePostPosterId: props.post.uniqueUserId,\n            uniqueLikerId: props.mainUser.uniqueUserId,\n            username: props.mainUser.username,\n            postType: 'personal',\n            uniquePostId: props.post.uniquePostId,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/handle/geo/comment/like',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n            props.setter(response.data.geoUser);\n            if(response.data.likeType === 'like') {\n                swal(\n                    'Great!',\n                    'Comment successfully liked!',\n                    'success',\n                );\n                setCommentLiking(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Comment successfully unliked!',\n                    'success',\n                );\n                setCommentLiking(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error liking or unliking that comment! Please try again.',\n                'error',\n            );\n            setCommentLiking(false);\n        });\n    }\n\n    return (\n        <Card \n            className={classes.card}\n            id={`${props.post.uniquePostId}`}\n        >\n            <CardHeader \n                title={\n                    <Typography \n                        variant='h6' \n                        component='h6'\n                    >\n                        {props.post.username}\n                    </Typography>\n                }\n                subheader={\n                    <Typography \n                        variant='subtitle1'\n                        component='span'\n                        color='textSecondary' \n                    >\n                        {timeDifference(props.post.utcTime, props.post.dateString)}\n                    </Typography>\n                }\n                avatar={\n                    <Avatar \n                        src={`http://192.168.0.17:3001/api/get/avatar/by/id/${props.post.uniqueUserId}`}\n                        title={`${props.post.username}`}\n                        alt={`${props.post.username}`}\n                    />\n                }\n                action={\n                    <div>\n                        <IconButton>\n                            <Icon \n                                path={mdiDotsVertical} \n                                size={1} \n                                title='Share button' \n                                aria-label='Share button' \n                                onClick={changeAnchorEl}\n                            />\n                        </IconButton>\n                        <Menu \n                            open={Boolean(anchorEl)}\n                            anchorEl={anchorEl}\n                            keepMounted \n                            onClose={handleMenuClose}\n                        >\n                            <MenuItem>\n                                <TextField \n                                    label='Post link' \n                                    color='primary' \n                                    value={`http://192.168.0.9:3000/geouser/${props.post.uniqueUserId}#${props.post.uniquePostId}`}\n                                    readonly \n                                />\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                }\n            />\n            <div>\n                {props.post.type === 'photo' &&\n                    <CardMedia \n                        component='img'\n                        src={`http://192.168.0.17:3001/api/get-photo/${props.post.src}`}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities photo post'\n                    />\n                }\n            </div>\n            <div>\n                {props.post.type === 'video' &&\n                    <CardContent>\n                        <Plyr \n                            playsinline={true}\n                            playsInline\n                            type='video'\n                            sources={[\n                                {\n                                    src: `http://192.168.0.17:3001/api/get-video/${props.post.src}`,\n                                }\n                            ]}\n                            fullscreen={{\n                                enable: true,\n                                fallback: true,\n                                iosNative: false,\n                            }}\n                        />\n                    </CardContent>\n                }\n            </div>\n            <CardContent>\n                <div>\n                    {props.post.type === 'text' &&\n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.text}\n                        </Typography>\n                    }\n                </div>\n                <div>\n                    {(props.post.type === 'photo' || props.post.type === 'video') && \n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.caption}\n                        </Typography>\n                    }\n                </div>\n            </CardContent>\n            <CardActions>\n                <IconButton \n                    color='primary'\n                    disabled={likeSending}\n                >\n                    <Icon  \n                        path={props.post.likes.includes(props.mainUser.uniqueUserId) ? mdiThumbUp : mdiThumbUpOutline}\n                        size={1} \n                        title='Post like button'\n                        aria-label='Post like button' \n                        onClick={handleLike}\n                    />\n                    <div>\n                        {props.post.likes.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.likes.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    color='primary'\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={_.find(props.post.comments, comment => comment.uniqueUserId === props.mainUser.uniqueUserId) ? mdiComment : mdiCommentOutline} \n                        size={1}\n                        title='Comment button' \n                        aria-label='Comment button' \n                    />\n                    <div>\n                        {props.post.comments.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.comments.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    style={{\n                        marginLeft: 'auto' \n                    }}\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={expanded ? mdiChevronUp : mdiChevronDown} \n                        size={1}\n                        title={expanded ? 'Expand less' : 'Expand more'} \n                        aria-label={expanded ? 'Expand less' : 'Expand more'} \n                    />\n                </IconButton>\n            </CardActions>\n            <Collapse \n                in={expanded} \n            >\n                <Divider />\n                <CardContent>\n                    <ValidatorForm \n                        ref={formRef} \n                        onSubmit={e => e.preventDefault()} \n                    >\n                        <TextValidator \n                            label='Comment' \n                            placeholder='Add a comment...' \n                            variant='outlined' \n                            color='primary' \n                            helperText='Add a comment' \n                            value={comment} \n                            onChange={e => setComment(e.target.value)} \n                            validators={['notEmpty']}\n                            errorMessages={['You must enter some text to send a comment!']}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            rows={4}\n                            multiline \n                            fullWidth \n                        />\n                        <Button \n                            color='primary' \n                            variant='outlined' \n                            startIcon={\n                                <Icon \n                                    path={mdiSend} \n                                    size={1} \n                                    title='Send icon' \n                                />\n                            }\n                            aria-label='Send comment button' \n                            disabled={commentSending}\n                            onClick={sendComment}\n                        >\n                            {commentSending ? <CircularProgress color='primary' /> : 'Send'}\n                        </Button>\n                    </ValidatorForm>\n                    <Divider />\n                    <div \n                        style={{\n                            marginTop: 10,\n                        }}\n                    >\n                        {props.post.comments.length > 0 &&\n                            <div>\n                                {props.post.comments.map((comment, index) => (\n                                    <div\n                                        key={index} \n                                    >\n                                        <ListItem \n                                            id={`${comment.uniqueCommentId}`}\n                                            alignItems='flex-start'\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://192.168.0.17:3001/api/get/avatar/by/id/${comment.uniqueUserId}`}\n                                                    title={`${comment.username}`}\n                                                    alt={`${comment.username}`} \n                                                    onClick={e => handleUserPush(comment.uniqueUserId)}\n                                                    style={{\n                                                        cursor: 'pointer',\n                                                    }}\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <div>\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                        >\n                                                            {comment.username}\n                                                        </Typography>\n                                                        <Typography \n                                                            variant='subtitle1' \n                                                            component='span' \n                                                            color='textSecondary'\n                                                        >\n                                                            {timeDifference(comment.utcTime, comment.dateString)}\n                                                        </Typography>\n                                                    </div>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        variant='body2' \n                                                        component='p' \n                                                    >\n                                                        {comment.text}\n                                                    </Typography>\n                                                }\n                                            />\n                                            <div>\n                                                {(props.mainUser.uniqueUserId === comment.uniqueUserId) &&\n                                                    <IconButton \n                                                        color='primary'\n                                                        onClick={() => deleteComment(comment.uniqueCommentId)}\n                                                        disabled={commentDeleting}\n                                                    >\n                                                        {commentDeleting ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Delete comment button' aria-label='Delete comment button' />}\n                                                    </IconButton>\n                                                }\n                                            </div>\n                                            <div>\n                                                {props.mainUser !== null &&\n                                                    <IconButton \n                                                        color='primary' \n                                                        disabled={commentLiking}\n                                                        onClick={() => handleCommentLike(comment.uniqueCommentId, comment.uniqueUserId, comment.likes.includes(props.mainUser.uniqueUserId))}\n                                                    >\n                                                        {!comment.likes.includes(props.mainUser.uniqueUserId) ? <Icon path={mdiThumbUpOutline} size={1}  title='Comment like button' aria-label='Comment like button' /> : <Icon path={mdiThumbUp} size={1} title='Comment like button' aria-label='Comment like button' />}\n                                                        {comment.likes.length > 0 &&\n                                                            <Typography \n                                                                variant='body1' \n                                                                component='p' \n                                                            >\n                                                                {comment.likes.length}\n                                                            </Typography>\n                                                        }\n                                                    </IconButton>\n                                                }\n                                            </div>\n                                        </ListItem>\n                                        {index < props.post.comments.length - 1 &&\n                                            <Divider />\n                                        }\n                                    </div>\n                                ))}\n                            </div>\n                        }\n                    </div>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        posts: state.visitorPostsReducer.posts,\n    };\n}\n\nexport default connect(mapStateToProps)(GeoUserPostsCard);","/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js",["232","233"],"import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport swal from 'sweetalert';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useSocket from 'use-socket.io-client';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport {NotificationContainer, NotificationManager} from 'react-notifications'; //A module that is more similar to vue-notifications to notify a user when someone has joined or left the chatroom.\nimport './react-notifications/dist/react-notifications.css';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiSend, mdiDelete } from '@mdi/js';\n\nconst useStyles = makeStyles(() => ({\n    listItem: {\n        maxWidth: 600,\n        margin: 'auto',\n    },\n    list: {\n        maxWidth: 600,\n        margin: 'auto',\n    },\n    avatarLg: {\n        height: 168,\n        width: 168,\n        margin: 'auto',\n    },\n}));\n\nfunction CommunityChat(props) {\n    const classes = useStyles(); //Custom component classes. \n    const [community, setCommunity]= useState(null); //Variable and setter for the community we are in.\n    const [socket] = useSocket('http://192.168.0.17:3001/'); //useSocket hook to maintain a connection.\n    const [chatMsg, setChatMsg] = useState(''); //The message that could be sent to the server for another chat. \n    const params = useParams();\n    const history = useHistory();\n    const gridRef = useRef(null);\n    const [msgDeleting, setMsgDeleting] = useState(false); //Variable and setter to handle when the message is deleting. \n\n    useEffect(() => {\n        if(props.mainUser) {\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/fetch/community/${params.communityName}`,\n            }).then(response => {\n                let inCommunity = _.find(response.data.community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId);\n                if(response.data.community === null) {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find that communities chatroom!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else if(_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n                    swal(\n                        'Uh Oh!',\n                        'You are blocked from this community!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else if(!inCommunity){\n                    swal(\n                        'Uh Oh',\n                        'You must be a member of this community to join the community chatroom',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else {\n                    setCommunity(response.data.community); //Set the community in the local state variable to this community. \n                    props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Change the theme to match the community theme.\n                    \n                    //Below, we must connect the socket. \n                    socket.connect();\n                    \n                    //Below, immediately scroll to the botom of the messages list. \n                    if(gridRef.current) {\n                        window.scrollTo({\n                            behavior: 'smooth',\n                            top: gridRef.current.offsetTop,\n                        });\n                    }\n\n                    //Below we will get the socket to join the room\n                    //We emit the joinRoom action and send the username and room name to the server.\n                    socket.emit('joinRoom', {\n                        username: props.mainUser.username,\n                        room: response.data.community.name,\n                    });\n\n                    //Below add the listener for IF the user joins the room. \n                    socket.on('userJoined', data => {\n                        let message = data.username + ' Joined the chat!';\n                        NotificationManager.info(message, 'New user joined', 5000);\n                    });\n\n                    //Below will handle a new message being sent to the community chatroom. \n                    socket.on('newMsg', data => {\n                        setCommunity(data);\n                        if(gridRef.current) {\n                            window.scrollTo({\n                                behavior: 'smooth',\n                                top: gridRef.current.offsetTop,\n                            });\n                        }\n                    });\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error joining the chatroom!',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n        else {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to join a chatroom!',\n                'error',\n            );\n            history.goBack(1);\n        }\n\n    }, []);\n\n    function handleUserPush(uniqueUserId) {\n        //Route that handles pushing to a new user when the avatar is clicked within the chat messages. \n        history.push(`/geouser/${uniqueUserId}`);\n        history.go(0);\n    }\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function sendMsg() {\n        //This function will be responsible for sending a chat message to the server socket. \n        if(chatMsg.trim() === '') {\n            swal(\n                'Uh Oh!',\n                'You must enter a message to send to the community chatroom!',\n                'error',\n            );\n            return false;\n        }\n        else {\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let date = new Date();\n            let month = months[date.getMonth()];\n            let year = date.getFullYear();\n            let day = date.getDate();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = {\n                username: props.mainUser.username,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                utcTime: new Date().getTime(),\n                dateString: dateString,\n                uniqueMessageId: Date.now() + dateString + props.mainUser.username + props.mainUser.uniqueUserId,\n                community: community.name,\n                room: community.name + 'chatroom',\n                text: chatMsg,\n            };\n\n            socket.emit('sendMsg', data);\n            setChatMsg('');\n        }\n    }\n\n    function deleteMsg(uniqueMessageId) {\n        setMsgDeleting(true); \n        let data = {\n            uniqueMessageId: uniqueMessageId,\n            community: community.name,\n        };\n\n        return axios({\n            method: 'POST',\n            url: 'http://192.168.0.17:3001/api/delete/chat/msg',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            setCommunity(response.data.community);\n            setMsgDeleting(false);\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error deleting that message from the chatroom!',\n                'error',\n            );\n            setMsgDeleting(false);\n        });\n    }\n\n    if(props.mainUser !== null && community !== null) {\n        return (\n            <Grid \n                container \n                style={{\n                    marginTop: 100,\n                }}\n            >\n                <Grid \n                    item \n                    xs={12} \n                >\n                    <NotificationContainer />\n                </Grid>\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    <Avatar \n                        variant='square'\n                        className={classes.avatarLg}\n                        alt={`${community.name} avatar`}\n                        title={`${community.name} avatar`}\n                        src={`http://192.168.0.17:3001/api/get-photo/${community.avatar}`}\n                    />\n                    <Typography \n                        variant='body1'\n                        component='small'\n                        align='center'\n                        style={{\n                            fontWeight: 'bold',\n                            textAlign: 'center',\n                            margin: 'auto',\n                        }}\n                    >\n                        {community.chatRoom.community} chat\n                    </Typography>\n                </Grid>\n                {/* This is where the Grid should be for the messages section. This will be above the Grid for the TextField and Button to send messages */}\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        marginTop: 50,\n                    }}\n                >\n                    {community.chatRoom.messages.length < 1 &&\n                        <div \n                            style={{\n                                textAlign: 'centter',\n                            }}\n                        >\n                            <Typography \n                                variant='h6'\n                                component='h6'\n                                align='center' \n                            >\n                                No messages!\n                            </Typography>\n                        </div>\n                    }\n                    {community.chatRoom.messages.length > 0 &&\n                        <List \n                            className={classes.list}\n                        >\n                            {community.chatRoom.messages.map((msg, index) => (\n                                <div>\n                                    <ListItem \n                                        className={classes.listItem} \n                                        alignItems='flex-start'\n                                        key={index.toString()}\n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar \n                                                src={`http://192.168.0.17:3001/api/get/avatar/by/id/${msg.uniqueUserId}`}\n                                                title={`${msg.username}`}\n                                                alt={`${msg.username}`} \n                                                onClick={e => handleUserPush(msg.uniqueUserId)}\n                                                style={{\n                                                    cursor: 'pointer',\n                                                }}\n                                            />\n                                        </ListItemAvatar>\n                                        <ListItemText \n                                            primary={\n                                                <div>\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                    >\n                                                        {msg.username}\n                                                    </Typography>\n                                                    <Typography \n                                                        variant='subtitle1' \n                                                        component='span' \n                                                        color='textSecondary'\n                                                    >\n                                                        {timeDifference(msg.utcTime, msg.dateString)}\n                                                    </Typography>\n                                                </div>\n                                            }\n                                            secondary={\n                                                <Typography \n                                                    variant='body2' \n                                                    component='p' \n                                                >\n                                                    {msg.text}\n                                                </Typography>\n                                            }\n                                        />\n                                        <div>\n                                            {(props.mainUser.uniqueUserId === msg.uniqueUserId || community.moderator.uniqueUserId === props.mainUser.uniqueUserId) &&\n                                                <IconButton \n                                                    color='primary'\n                                                    onClick={() => deleteMsg(msg.uniqueMessageId)}\n                                                    disabled={msgDeleting}\n                                                >\n                                                    {msgDeleting ? <CircularProgress color='primary' /> : <Icon path={mdiDelete} size={1} title='Delete comment button' aria-label='Delete comment button' />}\n                                                </IconButton>\n                                            }\n                                        </div>\n                                    </ListItem>\n                                    {index < community.chatRoom.messages.length - 1 &&\n                                        <Divider />\n                                    }\n                                </div>\n                            ))}\n                        </List>\n                    }\n                </Grid>\n                {/* This Div will serve as a dummy to scroll to */} \n                <div \n                    ref={gridRef}\n                >\n\n                </div>\n                {/* This is the end of the Grid for the messages section. Now we need a Grid or a div for the TextField and Button to send messages */}\n                <Grid \n                    item\n                    container \n                    xs={12}\n                    style={{\n                        marginTop: 10,\n                    }}\n                    ref={gridRef}\n                >\n                    <Grid \n                        item \n                        xs={12}\n                    >\n                        <TextField \n                            value={chatMsg}\n                            onChange={e => setChatMsg(e.target.value)}\n                            variant='outlined'\n                            color='primary' \n                            label='Chat message'\n                            placeholder='Send a message...'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                endAdornment: (\n                                  <InputAdornment position='end'>\n                                    <IconButton\n                                      aria-label='Message send button'\n                                      color='primary'\n                                      onClick={sendMsg}\n                                    >\n                                        <Icon \n                                            path={mdiSend}\n                                            size={2}\n                                        />\n                                    </IconButton>\n                                  </InputAdornment>\n                                ),\n                              }}\n                            fullWidth\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        return (\n            <Backdrop\n                open={true} \n            >\n                <CircularProgress \n                    color='primary'\n                />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(CommunityChat);","/Users/simeonikudabo/Downloads/geocities/src/components/NonUserCommunityPostsCard.js",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248"],"import React, { useState, useRef, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Icon from '@mdi/react';\nimport { mdiThumbUp, mdiThumbUpOutline, mdiComment, mdiCommentOutline, mdiChevronDown, mdiChevronUp, mdiDelete, mdiSend, mdiDotsVertical } from '@mdi/js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Plyr from 'react-plyr';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        maxWidth: 600,\n        margin: 'auto',\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.background.paper,\n    },\n    media: {\n        height: 0,\n        padding: '56.25%',\n    },\n    image: {\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n}));\n\nexport default function NonUserCommunityPostsCard(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [expanded, setExpanded] = useState(false); //Variable and setter for comments section to display.\n    const [anchorEl, setAnchorEl] = useState(null); //Anchor element for menu with the link to the Card post.\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function changeAnchorEl(e) {\n        //Function that will handle altering the anchorEl on menu open \n        setAnchorEl(e.currentTarget);\n    }\n\n    function handleMenuClose() {\n        //This will handle closing the share button menu.\n        setAnchorEl(null);\n    }\n\n    function handleUserPush(uniqueUserId) {\n        //Route that handles pushing to a new user when the avatar is clicked within comments. \n        history.push(`/geouser/${uniqueUserId}`);\n        history.go(0);\n    }\n\n    return (\n        <Card \n            className={classes.card}\n            id={`${props.post.uniquePostId}`}\n        >\n            <CardHeader \n                title={\n                    <Grid \n                        item \n                        xs={12}\n                        zeroMinWidth \n                    >\n                        <Typography \n                            variant='subtitle1'\n                            component='small'\n                            noWrap\n                            style={{\n                                fontWeight: 'bold',\n                                fontSize: 12,\n                            }}\n                        >\n                            {props.post.community}\n                        </Typography>\n                    </Grid>\n                }\n                subheader={\n                    <React.Fragment>\n                        <Typography \n                            variant='subtitle1'\n                            component='span'\n                            color='textSecondary' \n                        >\n                            {timeDifference(props.post.utcTime, props.post.dateString)}\n                        </Typography>\n                        <br />\n                        <Typography \n                            variant='subtitle2' \n                            component='small' \n                            color='textSecondary'  \n                            style={{\n                                cursor: 'pointer',\n                            }}\n                            onClick={e => history.push(`/geouser/${props.post.uniqueUserId}`)}\n                        >\n                            {props.post.username}\n                        </Typography>\n                    </React.Fragment>\n                }\n                avatar={\n                    <Avatar \n                        src={`http://192.168.0.17:3001/api/get/avatar/by/community/name/${props.post.community}`}\n                        title={`${props.post.username}`}\n                        alt={`${props.post.username}`}\n                    />\n                }\n                action={\n                    <div>\n                        <IconButton>\n                            <Icon \n                                path={mdiDotsVertical} \n                                size={1} \n                                title='Share button' \n                                aria-label='Share button' \n                                onClick={changeAnchorEl}\n                            />\n                        </IconButton>\n                        <Menu \n                            open={Boolean(anchorEl)}\n                            anchorEl={anchorEl}\n                            keepMounted \n                            onClose={handleMenuClose}\n                        >\n                            <MenuItem>\n                                <TextField \n                                    label='Post link' \n                                    color='primary' \n                                    value={`http://192.168.0.9:3000/community/${props.post.community}#${props.post.uniquePostId}`}\n                                    readonly \n                                />\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                }\n            />\n            <div>\n                {props.post.type === 'photo' &&\n                    <CardMedia \n                        className={classes.media}\n                        image={`http://192.168.0.17:3001/api/get-photo/${props.post.src}`}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities photo post'\n                    />\n                }\n                {props.post.type === 'link' && \n                    <CardMedia\n                        image={props.post.linkImage}\n                        title={`Post by ${props.post.username}`}\n                        alt='GeoCities link post'\n                        className={classes.media}\n                    />\n                }\n            </div>\n            <div>\n                {props.post.type === 'video' &&\n                    <CardContent>\n                        <Plyr \n                            playsinline={true}\n                            playsInline\n                            type='video'\n                            sources={[\n                                {\n                                    src: `http://192.168.0.17:3001/api/get-video/${props.post.src}`,\n                                }\n                            ]}\n                            fullscreen={{\n                                enable: true,\n                                fallback: true,\n                                iosNative: false,\n                            }}\n                        />\n                    </CardContent>\n                }\n            </div>\n            <CardContent>\n                <div>\n                    {props.post.title &&\n                        <Typography \n                            variant='h3' \n                            component='h3' \n                            align='center'\n                        >\n                            {props.post.title}\n                        </Typography>\n                    }\n                    {props.post.type === 'text' &&\n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.text}\n                        </Typography>\n                    }\n                    {props.post.type === 'link' &&\n                        <div>\n                            <a \n                                href={props.post.link} \n                                style={{\n                                    textAlign: 'center',\n                                }}\n                            >\n                                Link\n                            </a>\n                            <Typography \n                                variant='body2' \n                                component='p' \n                            >\n                                {props.post.linkDescription}\n                            </Typography>\n\n                        </div>\n                    }   \n                </div>\n                <div>\n                    {(props.post.type === 'photo' || props.post.type === 'video') && \n                        <Typography \n                            variant='body2' \n                            component='p' \n                        >\n                            {props.post.caption}\n                        </Typography>\n                    }\n                </div>\n            </CardContent>\n            <CardActions>\n                <IconButton \n                    color='primary'\n                >\n                    <Icon  \n                        path={mdiThumbUpOutline}\n                        size={1} \n                        title='Post like button'\n                        aria-label='Post like button'\n                    />\n                    <div>\n                        {props.post.likes.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.likes.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    color='primary'\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={mdiCommentOutline} \n                        size={1}\n                        title='Comment button' \n                        aria-label='Comment button' \n                    />\n                    <div>\n                        {props.post.comments.length > 0 &&\n                            <Typography \n                                variant='body1' \n                                component='p' \n                            >\n                                {props.post.comments.length}\n                            </Typography>\n                        }\n                    </div>\n                </IconButton>\n                <IconButton \n                    style={{\n                        marginLeft: 'auto' \n                    }}\n                    onClick={() => setExpanded(!expanded)}\n                >\n                    <Icon \n                        path={expanded ? mdiChevronUp : mdiChevronDown} \n                        size={1}\n                        title={expanded ? 'Expand less' : 'Expand more'} \n                        aria-label={expanded ? 'Expand less' : 'Expand more'} \n                    />\n                </IconButton>\n            </CardActions>\n            <Collapse \n                in={expanded} \n            >\n                <Divider />\n                <CardContent>\n                    <div \n                        style={{\n                            marginTop: 10,\n                        }}\n                    >\n                        {props.post.comments.length > 0 &&\n                            <div>\n                                {props.post.comments.map((comment, index) => (\n                                    <div\n                                        key={index} \n                                    >\n                                        <ListItem \n                                            id={`${comment.uniqueCommentId}`}\n                                            alignItems='flex-start'\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://192.168.0.17:3001/api/get/avatar/by/id/${comment.uniqueUserId}`}\n                                                    title={`${comment.username}`}\n                                                    alt={`${comment.username}`} \n                                                    onClick={e => handleUserPush(comment.uniqueUserId)}\n                                                    style={{\n                                                        cursor: 'pointer',\n                                                    }}\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <div>\n                                                        <Typography \n                                                            variant='h6' \n                                                            component='h6' \n                                                        >\n                                                            {comment.username}\n                                                        </Typography>\n                                                        <Typography \n                                                            variant='subtitle1' \n                                                            component='span' \n                                                            color='textSecondary'\n                                                        >\n                                                            {timeDifference(comment.utcTime, comment.dateString)}\n                                                        </Typography>\n                                                    </div>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        variant='body2' \n                                                        component='p' \n                                                    >\n                                                        {comment.text}\n                                                    </Typography>\n                                                }\n                                            />\n                                            <div>\n                                                <IconButton \n                                                    color='primary'\n                                                >\n                                                    <Icon \n                                                        path={mdiThumbUpOutline} \n                                                        size={1}  \n                                                        title='Comment like button' \n                                                        aria-label='Comment like button' \n                                                    /> \n                                                    {comment.likes.length > 0 &&\n                                                        <Typography \n                                                            variant='body1' \n                                                            component='p' \n                                                        >\n                                                            {comment.likes.length}\n                                                        </Typography>\n                                                    }\n                                                </IconButton>\n                                            </div>\n                                        </ListItem>\n                                        {index < props.post.comments.length - 1 &&\n                                            <Divider />\n                                        }\n                                    </div>\n                                ))}\n                            </div>\n                        }\n                    </div>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}","/Users/simeonikudabo/Downloads/geocities/src/components/TabsExample.js",["249"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab'; \nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography'; \nimport PhoneIcon from '@material-ui/icons/Phone'; \nimport FavoriteIcon from '@material-ui/icons/Favorite'; \nimport PersonIcon from '@material-ui/icons/AccountCircle';\nimport { makeStyles } from '@material-ui/core/styles'; \n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div \n            role='tabpanel' \n            hidden={value !== index} \n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n        >\n            {value === index && \n                <Box \n                    p={2} \n                >\n                    <Typography>\n                        {children}\n                    </Typography>\n                </Box>\n            }\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nexport default function TabsExample() {\n    const classes = useStyles();\n    const [value, setValue] = useState(0);\n\n    function handleChange(event, newValue) {\n        setValue(newValue);\n    }\n\n    return (\n        <div \n            className={classes.root} \n        >\n            <AppBar \n                position='sticky' \n                color='primary' \n                dense \n            >\n                <Tabs \n                    value={value} \n                    onChange={handleChange} \n                    variant='fullWidth' \n                >\n                    <Tab \n                        label='recents' \n                        icon={\n                            <PhoneIcon />\n                        }\n                        {...a11yProps(0)} \n                    />\n                    <Tab \n                        label='favorites' \n                        icon={\n                            <FavoriteIcon />\n                        }\n                        {...a11yProps(1)} \n                    />\n                    <Tab \n                        label='nearby' \n                        icon={\n                            <PersonIcon />\n                        }\n                        {...a11yProps(2)} \n                    />\n                </Tabs>\n            </AppBar>\n            <TabPanel \n                index={0} \n                value={value} \n            >\n                Recent phone calls.\n            </TabPanel>\n            <TabPanel \n                index={1}\n                value={value} \n            >\n                You have some likes!\n            </TabPanel>\n            <TabPanel \n                index={2}\n                value={value} \n            >\n                Here are people nearby.\n            </TabPanel>\n        </div>\n    );\n}\n",["250","251"],"/Users/simeonikudabo/Downloads/geocities/src/components/UserSettings.js",["252","253","254","255","256","257","258","259","260","261","262","263","264","265","266"],{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","severity":1,"message":"272","line":99,"column":8,"nodeType":"273","endLine":99,"endColumn":10,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":4,"column":8,"nodeType":"277","messageId":"278","endLine":4,"endColumn":12},{"ruleId":"275","severity":1,"message":"279","line":5,"column":10,"nodeType":"277","messageId":"278","endLine":5,"endColumn":20},{"ruleId":"275","severity":1,"message":"280","line":7,"column":8,"nodeType":"277","messageId":"278","endLine":7,"endColumn":22},{"ruleId":"275","severity":1,"message":"281","line":26,"column":7,"nodeType":"277","messageId":"278","endLine":26,"endColumn":29},{"ruleId":"275","severity":1,"message":"282","line":48,"column":12,"nodeType":"277","messageId":"278","endLine":48,"endColumn":15},{"ruleId":"275","severity":1,"message":"283","line":48,"column":17,"nodeType":"277","messageId":"278","endLine":48,"endColumn":23},{"ruleId":"275","severity":1,"message":"284","line":49,"column":11,"nodeType":"277","messageId":"278","endLine":49,"endColumn":18},{"ruleId":"271","severity":1,"message":"285","line":86,"column":8,"nodeType":"273","endLine":86,"endColumn":10,"suggestions":"286"},{"ruleId":"275","severity":1,"message":"287","line":1,"column":38,"nodeType":"277","messageId":"278","endLine":1,"endColumn":53},{"ruleId":"275","severity":1,"message":"288","line":1,"column":55,"nodeType":"277","messageId":"278","endLine":1,"endColumn":61},{"ruleId":"275","severity":1,"message":"289","line":9,"column":8,"nodeType":"277","messageId":"278","endLine":9,"endColumn":14},{"ruleId":"275","severity":1,"message":"290","line":10,"column":8,"nodeType":"277","messageId":"278","endLine":10,"endColumn":21},{"ruleId":"275","severity":1,"message":"291","line":11,"column":8,"nodeType":"277","messageId":"278","endLine":11,"endColumn":14},{"ruleId":"275","severity":1,"message":"292","line":12,"column":8,"nodeType":"277","messageId":"278","endLine":12,"endColumn":15},{"ruleId":"275","severity":1,"message":"293","line":20,"column":24,"nodeType":"277","messageId":"278","endLine":20,"endColumn":33},{"ruleId":"275","severity":1,"message":"294","line":20,"column":35,"nodeType":"277","messageId":"278","endLine":20,"endColumn":43},{"ruleId":"275","severity":1,"message":"295","line":20,"column":45,"nodeType":"277","messageId":"278","endLine":20,"endColumn":54},{"ruleId":"275","severity":1,"message":"296","line":20,"column":56,"nodeType":"277","messageId":"278","endLine":20,"endColumn":64},{"ruleId":"271","severity":1,"message":"297","line":197,"column":8,"nodeType":"273","endLine":197,"endColumn":10,"suggestions":"298"},{"ruleId":"271","severity":1,"message":"285","line":46,"column":8,"nodeType":"273","endLine":46,"endColumn":10,"suggestions":"299"},{"ruleId":"275","severity":1,"message":"288","line":1,"column":38,"nodeType":"277","messageId":"278","endLine":1,"endColumn":44},{"ruleId":"275","severity":1,"message":"300","line":11,"column":8,"nodeType":"277","messageId":"278","endLine":11,"endColumn":11},{"ruleId":"275","severity":1,"message":"301","line":123,"column":12,"nodeType":"277","messageId":"278","endLine":123,"endColumn":17},{"ruleId":"275","severity":1,"message":"302","line":123,"column":19,"nodeType":"277","messageId":"278","endLine":123,"endColumn":27},{"ruleId":"275","severity":1,"message":"303","line":130,"column":18,"nodeType":"277","messageId":"278","endLine":130,"endColumn":25},{"ruleId":"271","severity":1,"message":"285","line":169,"column":8,"nodeType":"273","endLine":169,"endColumn":10,"suggestions":"304"},{"ruleId":"271","severity":1,"message":"305","line":176,"column":8,"nodeType":"273","endLine":176,"endColumn":14,"suggestions":"306"},{"ruleId":"271","severity":1,"message":"285","line":46,"column":8,"nodeType":"273","endLine":46,"endColumn":10,"suggestions":"307"},{"ruleId":"308","severity":1,"message":"309","line":110,"column":32,"nodeType":"310","messageId":"311","endLine":110,"endColumn":33,"suggestions":"312"},{"ruleId":"308","severity":1,"message":"313","line":110,"column":34,"nodeType":"310","messageId":"311","endLine":110,"endColumn":35,"suggestions":"314"},{"ruleId":"308","severity":1,"message":"315","line":110,"column":39,"nodeType":"310","messageId":"311","endLine":110,"endColumn":40,"suggestions":"316"},{"ruleId":"308","severity":1,"message":"313","line":110,"column":53,"nodeType":"310","messageId":"311","endLine":110,"endColumn":54,"suggestions":"317"},{"ruleId":"271","severity":1,"message":"318","line":218,"column":8,"nodeType":"273","endLine":218,"endColumn":10,"suggestions":"319"},{"ruleId":"271","severity":1,"message":"320","line":156,"column":8,"nodeType":"273","endLine":156,"endColumn":10,"suggestions":"321"},{"ruleId":"271","severity":1,"message":"285","line":61,"column":8,"nodeType":"273","endLine":61,"endColumn":10,"suggestions":"322"},{"ruleId":"275","severity":1,"message":"292","line":21,"column":8,"nodeType":"277","messageId":"278","endLine":21,"endColumn":15},{"ruleId":"275","severity":1,"message":"323","line":27,"column":8,"nodeType":"277","messageId":"278","endLine":27,"endColumn":18},{"ruleId":"275","severity":1,"message":"324","line":157,"column":12,"nodeType":"277","messageId":"278","endLine":157,"endColumn":21},{"ruleId":"275","severity":1,"message":"325","line":157,"column":23,"nodeType":"277","messageId":"278","endLine":157,"endColumn":35},{"ruleId":"275","severity":1,"message":"326","line":158,"column":12,"nodeType":"277","messageId":"278","endLine":158,"endColumn":26},{"ruleId":"275","severity":1,"message":"327","line":158,"column":28,"nodeType":"277","messageId":"278","endLine":158,"endColumn":45},{"ruleId":"275","severity":1,"message":"328","line":159,"column":12,"nodeType":"277","messageId":"278","endLine":159,"endColumn":21},{"ruleId":"275","severity":1,"message":"329","line":159,"column":23,"nodeType":"277","messageId":"278","endLine":159,"endColumn":35},{"ruleId":"275","severity":1,"message":"330","line":160,"column":12,"nodeType":"277","messageId":"278","endLine":160,"endColumn":26},{"ruleId":"275","severity":1,"message":"331","line":160,"column":28,"nodeType":"277","messageId":"278","endLine":160,"endColumn":45},{"ruleId":"275","severity":1,"message":"332","line":161,"column":12,"nodeType":"277","messageId":"278","endLine":161,"endColumn":20},{"ruleId":"275","severity":1,"message":"333","line":161,"column":22,"nodeType":"277","messageId":"278","endLine":161,"endColumn":33},{"ruleId":"275","severity":1,"message":"334","line":162,"column":12,"nodeType":"277","messageId":"278","endLine":162,"endColumn":25},{"ruleId":"275","severity":1,"message":"335","line":162,"column":27,"nodeType":"277","messageId":"278","endLine":162,"endColumn":43},{"ruleId":"275","severity":1,"message":"336","line":178,"column":26,"nodeType":"277","messageId":"278","endLine":178,"endColumn":41},{"ruleId":"271","severity":1,"message":"337","line":269,"column":8,"nodeType":"273","endLine":269,"endColumn":10,"suggestions":"338"},{"ruleId":"339","severity":1,"message":"340","line":388,"column":81,"nodeType":"341","messageId":"342","endLine":388,"endColumn":82},{"ruleId":"339","severity":1,"message":"340","line":485,"column":81,"nodeType":"341","messageId":"342","endLine":485,"endColumn":82},{"ruleId":"343","severity":1,"message":"344","line":1540,"column":45,"nodeType":"345","endLine":1540,"endColumn":63},{"ruleId":"343","severity":1,"message":"344","line":1737,"column":45,"nodeType":"345","endLine":1737,"endColumn":63},{"ruleId":"275","severity":1,"message":"346","line":22,"column":8,"nodeType":"277","messageId":"278","endLine":22,"endColumn":12},{"ruleId":"275","severity":1,"message":"288","line":1,"column":27,"nodeType":"277","messageId":"278","endLine":1,"endColumn":33},{"ruleId":"275","severity":1,"message":"347","line":1,"column":35,"nodeType":"277","messageId":"278","endLine":1,"endColumn":44},{"ruleId":"275","severity":1,"message":"348","line":10,"column":10,"nodeType":"277","messageId":"278","endLine":10,"endColumn":23},{"ruleId":"275","severity":1,"message":"349","line":10,"column":25,"nodeType":"277","messageId":"278","endLine":10,"endColumn":38},{"ruleId":"275","severity":1,"message":"350","line":11,"column":8,"nodeType":"277","messageId":"278","endLine":11,"endColumn":14},{"ruleId":"275","severity":1,"message":"351","line":14,"column":8,"nodeType":"277","messageId":"278","endLine":14,"endColumn":24},{"ruleId":"275","severity":1,"message":"352","line":16,"column":10,"nodeType":"277","messageId":"278","endLine":16,"endColumn":20},{"ruleId":"275","severity":1,"message":"353","line":16,"column":41,"nodeType":"277","messageId":"278","endLine":16,"endColumn":51},{"ruleId":"275","severity":1,"message":"354","line":16,"column":102,"nodeType":"277","messageId":"278","endLine":16,"endColumn":111},{"ruleId":"275","severity":1,"message":"355","line":16,"column":113,"nodeType":"277","messageId":"278","endLine":16,"endColumn":120},{"ruleId":"275","severity":1,"message":"356","line":18,"column":8,"nodeType":"277","messageId":"278","endLine":18,"endColumn":13},{"ruleId":"275","severity":1,"message":"357","line":19,"column":13,"nodeType":"277","messageId":"278","endLine":19,"endColumn":14},{"ruleId":"275","severity":1,"message":"358","line":20,"column":10,"nodeType":"277","messageId":"278","endLine":20,"endColumn":17},{"ruleId":"275","severity":1,"message":"359","line":21,"column":8,"nodeType":"277","messageId":"278","endLine":21,"endColumn":12},{"ruleId":"275","severity":1,"message":"346","line":22,"column":8,"nodeType":"277","messageId":"278","endLine":22,"endColumn":12},{"ruleId":"275","severity":1,"message":"346","line":22,"column":8,"nodeType":"277","messageId":"278","endLine":22,"endColumn":12},{"ruleId":"275","severity":1,"message":"360","line":466,"column":14,"nodeType":"277","messageId":"278","endLine":466,"endColumn":23},{"ruleId":"275","severity":1,"message":"346","line":22,"column":8,"nodeType":"277","messageId":"278","endLine":22,"endColumn":12},{"ruleId":"275","severity":1,"message":"361","line":58,"column":12,"nodeType":"277","messageId":"278","endLine":58,"endColumn":24},{"ruleId":"275","severity":1,"message":"362","line":58,"column":26,"nodeType":"277","messageId":"278","endLine":58,"endColumn":41},{"ruleId":"275","severity":1,"message":"363","line":4,"column":8,"nodeType":"277","messageId":"278","endLine":4,"endColumn":13},{"ruleId":"271","severity":1,"message":"364","line":143,"column":8,"nodeType":"273","endLine":143,"endColumn":10,"suggestions":"365"},{"ruleId":"275","severity":1,"message":"288","line":1,"column":27,"nodeType":"277","messageId":"278","endLine":1,"endColumn":33},{"ruleId":"275","severity":1,"message":"347","line":1,"column":35,"nodeType":"277","messageId":"278","endLine":1,"endColumn":44},{"ruleId":"275","severity":1,"message":"348","line":11,"column":10,"nodeType":"277","messageId":"278","endLine":11,"endColumn":23},{"ruleId":"275","severity":1,"message":"349","line":11,"column":25,"nodeType":"277","messageId":"278","endLine":11,"endColumn":38},{"ruleId":"275","severity":1,"message":"350","line":12,"column":8,"nodeType":"277","messageId":"278","endLine":12,"endColumn":14},{"ruleId":"275","severity":1,"message":"351","line":15,"column":8,"nodeType":"277","messageId":"278","endLine":15,"endColumn":24},{"ruleId":"275","severity":1,"message":"352","line":17,"column":10,"nodeType":"277","messageId":"278","endLine":17,"endColumn":20},{"ruleId":"275","severity":1,"message":"353","line":17,"column":41,"nodeType":"277","messageId":"278","endLine":17,"endColumn":51},{"ruleId":"275","severity":1,"message":"354","line":17,"column":102,"nodeType":"277","messageId":"278","endLine":17,"endColumn":111},{"ruleId":"275","severity":1,"message":"355","line":17,"column":113,"nodeType":"277","messageId":"278","endLine":17,"endColumn":120},{"ruleId":"275","severity":1,"message":"356","line":19,"column":8,"nodeType":"277","messageId":"278","endLine":19,"endColumn":13},{"ruleId":"275","severity":1,"message":"357","line":20,"column":13,"nodeType":"277","messageId":"278","endLine":20,"endColumn":14},{"ruleId":"275","severity":1,"message":"358","line":21,"column":10,"nodeType":"277","messageId":"278","endLine":21,"endColumn":17},{"ruleId":"275","severity":1,"message":"359","line":22,"column":8,"nodeType":"277","messageId":"278","endLine":22,"endColumn":12},{"ruleId":"275","severity":1,"message":"346","line":23,"column":8,"nodeType":"277","messageId":"278","endLine":23,"endColumn":12},{"ruleId":"275","severity":1,"message":"366","line":21,"column":40,"nodeType":"277","messageId":"278","endLine":21,"endColumn":45},{"ruleId":"267","replacedBy":"367"},{"ruleId":"269","replacedBy":"368"},{"ruleId":"275","severity":1,"message":"369","line":9,"column":10,"nodeType":"277","messageId":"278","endLine":9,"endColumn":23},{"ruleId":"275","severity":1,"message":"370","line":9,"column":25,"nodeType":"277","messageId":"278","endLine":9,"endColumn":38},{"ruleId":"275","severity":1,"message":"371","line":13,"column":8,"nodeType":"277","messageId":"278","endLine":13,"endColumn":14},{"ruleId":"275","severity":1,"message":"372","line":14,"column":8,"nodeType":"277","messageId":"278","endLine":14,"endColumn":19},{"ruleId":"275","severity":1,"message":"373","line":15,"column":8,"nodeType":"277","messageId":"278","endLine":15,"endColumn":17},{"ruleId":"275","severity":1,"message":"374","line":16,"column":8,"nodeType":"277","messageId":"278","endLine":16,"endColumn":24},{"ruleId":"275","severity":1,"message":"375","line":17,"column":8,"nodeType":"277","messageId":"278","endLine":17,"endColumn":17},{"ruleId":"275","severity":1,"message":"376","line":18,"column":8,"nodeType":"277","messageId":"278","endLine":18,"endColumn":16},{"ruleId":"275","severity":1,"message":"377","line":19,"column":10,"nodeType":"277","messageId":"278","endLine":19,"endColumn":24},{"ruleId":"275","severity":1,"message":"378","line":42,"column":11,"nodeType":"277","messageId":"278","endLine":42,"endColumn":22},{"ruleId":"308","severity":1,"message":"309","line":48,"column":32,"nodeType":"310","messageId":"311","endLine":48,"endColumn":33,"suggestions":"379"},{"ruleId":"308","severity":1,"message":"313","line":48,"column":34,"nodeType":"310","messageId":"311","endLine":48,"endColumn":35,"suggestions":"380"},{"ruleId":"308","severity":1,"message":"315","line":48,"column":39,"nodeType":"310","messageId":"311","endLine":48,"endColumn":40,"suggestions":"381"},{"ruleId":"308","severity":1,"message":"313","line":48,"column":53,"nodeType":"310","messageId":"311","endLine":48,"endColumn":54,"suggestions":"382"},{"ruleId":"271","severity":1,"message":"285","line":81,"column":8,"nodeType":"273","endLine":81,"endColumn":10,"suggestions":"383"},"no-native-reassign",["384"],"no-negated-in-lhs",["385"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'props', 'regularExpressions.alphaStartRe', and 'regularExpressions.usernameExpression'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["386"],"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'mdiAccount' is defined but never used.","'InputAdornment' is defined but never used.","'communityFilterOptions' is assigned a value but never used.","'val' is assigned a value but never used.","'setVal' is assigned a value but never used.","'myUsers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["387"],"'useLayoutEffect' is defined but never used.","'useRef' is defined but never used.","'Dialog' is defined but never used.","'DialogContent' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'mdiPencil' is defined but never used.","'mdiClose' is defined but never used.","'mdiCamera' is defined but never used.","'mdiVideo' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'params.uniqueUserId', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["388"],["389"],"'Box' is defined but never used.","'posts' is assigned a value but never used.","'setPosts' is assigned a value but never used.","'setUser' is assigned a value but never used.",["390"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["391"],["392"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["393","394"],"Unnecessary escape character: \\-.",["395","396"],"Unnecessary escape character: \\@.",["397","398"],["399","400"],"React Hook useEffect has missing dependencies: 'history', 'props', 'regularExpressions.alphaStartRe', 'regularExpressions.emailRe', and 'regularExpressions.usernameExpression'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["401"],"React Hook useEffect has missing dependencies: 'history', 'props', 'regularExpressions.alphaStartRe', and 'regularExpressions.nameExpression'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["402"],["403"],"'IconButton' is defined but never used.","'photoPost' is assigned a value but never used.","'setPhotoPost' is assigned a value but never used.","'photoPostTitle' is assigned a value but never used.","'setPhotoPostTitle' is assigned a value but never used.","'videoPost' is assigned a value but never used.","'setVideoPost' is assigned a value but never used.","'videoPostTitle' is assigned a value but never used.","'setVideoPostTitle' is assigned a value but never used.","'linkPost' is assigned a value but never used.","'setLinkPost' is assigned a value but never used.","'linkPostTitle' is assigned a value but never used.","'setLinkPostTitle' is assigned a value but never used.","'setSelectedUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'params.communityName', 'props', and 'regularExpressions.urlRegex'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["404"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'List' is defined but never used.","'useEffect' is defined but never used.","'ValidatorForm' is defined but never used.","'TextValidator' is defined but never used.","'Button' is defined but never used.","'CircularProgress' is defined but never used.","'mdiThumbUp' is defined but never used.","'mdiComment' is defined but never used.","'mdiDelete' is defined but never used.","'mdiSend' is defined but never used.","'axios' is defined but never used.","'_' is defined but never used.","'connect' is defined but never used.","'swal' is defined but never used.","'linkClick' is defined but never used.","'deletingPost' is assigned a value but never used.","'setDeletingPost' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'params.communityName', 'props', and 'socket'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["405"],"'other' is assigned a value but never used.",["384"],["385"],"'validatorForm' is defined but never used.","'textValidator' is defined but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'Checkbox' is defined but never used.","'SwatchesPicker' is defined but never used.","'usernameRef' is assigned a value but never used.",["406","407"],["408","409"],["410","411"],["412","413"],["414"],"no-global-assign","no-unsafe-negation",{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"417","fix":"421"},{"desc":"417","fix":"422"},{"desc":"423","fix":"424"},{"desc":"417","fix":"425"},{"messageId":"426","fix":"427","desc":"428"},{"messageId":"429","fix":"430","desc":"431"},{"messageId":"426","fix":"432","desc":"428"},{"messageId":"429","fix":"433","desc":"431"},{"messageId":"426","fix":"434","desc":"428"},{"messageId":"429","fix":"435","desc":"431"},{"messageId":"426","fix":"436","desc":"428"},{"messageId":"429","fix":"437","desc":"431"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"417","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"messageId":"426","fix":"447","desc":"428"},{"messageId":"429","fix":"448","desc":"431"},{"messageId":"426","fix":"449","desc":"428"},{"messageId":"429","fix":"450","desc":"431"},{"messageId":"426","fix":"451","desc":"428"},{"messageId":"429","fix":"452","desc":"431"},{"messageId":"426","fix":"453","desc":"428"},{"messageId":"429","fix":"454","desc":"431"},{"desc":"417","fix":"455"},"Update the dependencies array to be: [history, props, regularExpressions.alphaStartRe, regularExpressions.usernameExpression]",{"range":"456","text":"457"},"Update the dependencies array to be: [history, props]",{"range":"458","text":"459"},"Update the dependencies array to be: [history, params.uniqueUserId, props]",{"range":"460","text":"461"},{"range":"462","text":"459"},{"range":"463","text":"459"},"Update the dependencies array to be: [history, user]",{"range":"464","text":"465"},{"range":"466","text":"459"},"removeEscape",{"range":"467","text":"468"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"469","text":"470"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"471","text":"468"},{"range":"472","text":"470"},{"range":"473","text":"468"},{"range":"474","text":"470"},{"range":"475","text":"468"},{"range":"476","text":"470"},"Update the dependencies array to be: [history, props, regularExpressions.alphaStartRe, regularExpressions.emailRe, regularExpressions.usernameExpression]",{"range":"477","text":"478"},"Update the dependencies array to be: [history, props, regularExpressions.alphaStartRe, regularExpressions.nameExpression]",{"range":"479","text":"480"},{"range":"481","text":"459"},"Update the dependencies array to be: [history, params.communityName, props, regularExpressions.urlRegex]",{"range":"482","text":"483"},"Update the dependencies array to be: [history, params.communityName, props, socket]",{"range":"484","text":"485"},{"range":"486","text":"468"},{"range":"487","text":"470"},{"range":"488","text":"468"},{"range":"489","text":"470"},{"range":"490","text":"468"},{"range":"491","text":"470"},{"range":"492","text":"468"},{"range":"493","text":"470"},{"range":"494","text":"459"},[3321,3323],"[history, props, regularExpressions.alphaStartRe, regularExpressions.usernameExpression]",[3083,3085],"[history, props]",[7633,7635],"[history, params.uniqueUserId, props]",[1427,1429],[6721,6723],[6891,6897],"[history, user]",[1434,1436],[58217,58218],"",[58217,58217],"\\",[58219,58220],[58219,58219],[58224,58225],[58224,58224],[58238,58239],[58238,58238],[62148,62150],"[history, props, regularExpressions.alphaStartRe, regularExpressions.emailRe, regularExpressions.usernameExpression]",[6819,6821],"[history, props, regularExpressions.alphaStartRe, regularExpressions.nameExpression]",[2211,2213],[13684,13686],"[history, params.communityName, props, regularExpressions.urlRegex]",[6134,6136],"[history, params.communityName, props, socket]",[22059,22060],[22059,22059],[22061,22062],[22061,22061],[22066,22067],[22066,22066],[22080,22081],[22080,22080],[23284,23286]]