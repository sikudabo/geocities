{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\bobma\\\\Downloads\\\\excite-app\\\\src\\\\components\\\\GeoCitiesSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@mdi/react';\nimport { mdiAccount } from '@mdi/js';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nconst userFilterOptions = createFilterOptions({\n  matchFrom: 'any',\n  stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username\n});\nconst useStyles = makeStyles(() => ({\n  root: {\n    marginTop: 20\n  },\n  card: {\n    maxWidth: 450,\n    margin: 'auto'\n  }\n}));\n\nfunction GeoCitiesSearch(props) {\n  _s();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const [searchUser, setSearchUser] = useState(null);\n  const [users, setUsers] = useState([]);\n  const myUsers = [{\n    username: 'simeon',\n    firstName: 'Simeon',\n    lastName: 'Ikudabo',\n    avatar: 'baller'\n  }];\n  useEffect(() => {\n    //If the user is not logged in, return to the log in/sign up page. \n    if (props.mainUser === null) {\n      history.push('/');\n    } else {\n      return axios({\n        method: 'GET',\n        url: `http://192.168.0.9:3001/api/fetch/users/${props.mainUser.uniqueUserId}`\n      }).then(response => {\n        if (response.data.users.length > 0) {\n          alert('Got users!');\n          setUsers(response.data.users);\n          console.log(users);\n        } else {\n          swal('Uh Oh!', 'We could not find any users to search.', 'error');\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error getting the data to search from the server! Please try again.', 'error');\n        history.goBack(1);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: classes.root,\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.card,\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h6\",\n          align: \"center\",\n          style: {\n            marginBottom: 20\n          },\n          children: \"Search for users or communities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), users.length > 0 && /*#__PURE__*/_jsxDEV(Autocomplete, {\n          options: myUsers,\n          filterOptions: userFilterOptions,\n          value: searchUser,\n          onChange: e => setSearchUser(e.target.value),\n          getOptionLabel: option => option.uniqueUserId,\n          renderOption: option => /*#__PURE__*/_jsxDEV(Typography, {\n            children: option.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Search users\",\n            placeholder: \"Search users\",\n            color: \"primary\",\n            variant: \"outlined\",\n            InputLabelProps: {\n              shrink: true\n            },\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  path: mdiAccount,\n                  size: 1,\n                  title: \"Account icon\",\n                  \"aria-label\": \"Account icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 45\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoCitiesSearch, \"9GFX3PBEK5f+mnD+ifTOerZguGg=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = GeoCitiesSearch;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    theme: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(GeoCitiesSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoCitiesSearch\");","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/GeoCitiesSearch.js"],"names":["React","useState","useEffect","Grid","Typography","Icon","mdiAccount","TextField","InputAdornment","Card","CardContent","Autocomplete","createFilterOptions","makeStyles","connect","useHistory","ListItem","ListItemAvatar","Avatar","ListItemText","axios","swal","userFilterOptions","matchFrom","stringify","option","firstName","lastName","username","useStyles","root","marginTop","card","maxWidth","margin","GeoCitiesSearch","props","classes","history","searchUser","setSearchUser","users","setUsers","myUsers","avatar","mainUser","push","method","url","uniqueUserId","then","response","data","length","alert","console","log","catch","err","message","goBack","marginBottom","e","target","value","params","shrink","startAdornment","mapStateToProps","state","userReducer","user","theme","userThemeReducer","primary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Icon from '@mdi/react';\r\nimport { mdiAccount } from '@mdi/js';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n\r\nconst userFilterOptions = createFilterOptions({\r\n    matchFrom: 'any',\r\n    stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username,\r\n});\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        marginTop: 20,\r\n    },\r\n    card: {\r\n        maxWidth: 450,\r\n        margin: 'auto',\r\n    }\r\n}));\r\n\r\nfunction GeoCitiesSearch(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [searchUser, setSearchUser] = useState(null);\r\n    const [users, setUsers] = useState([]);\r\n    const myUsers = [\r\n        {\r\n            username: 'simeon',\r\n            firstName: 'Simeon',\r\n            lastName: 'Ikudabo',\r\n            avatar: 'baller',\r\n        }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        //If the user is not logged in, return to the log in/sign up page. \r\n        if(props.mainUser === null) {\r\n            history.push('/');\r\n        }\r\n        else {\r\n            return axios({\r\n                method: 'GET',\r\n                url: `http://192.168.0.9:3001/api/fetch/users/${props.mainUser.uniqueUserId}`,\r\n            }).then(response => {\r\n                if(response.data.users.length > 0) {\r\n                    alert('Got users!');\r\n                    setUsers(response.data.users);\r\n                    console.log(users);\r\n                }\r\n                else {\r\n                    swal(\r\n                        'Uh Oh!',\r\n                        'We could not find any users to search.',\r\n                        'error',\r\n                    );\r\n                }\r\n            }).catch(err => {\r\n                console.log(err.message);\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error getting the data to search from the server! Please try again.',\r\n                    'error',\r\n                );\r\n                history.goBack(1);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Grid \r\n            className={classes.root} \r\n            container \r\n        >\r\n            <Card \r\n                className={classes.card} \r\n            >\r\n                <CardContent>\r\n                    <Typography \r\n                        variant='h6' \r\n                        component='h6' \r\n                        align='center'\r\n                        style={{\r\n                            marginBottom: 20,\r\n                        }}\r\n                    >\r\n                        Search for users or communities \r\n                    </Typography>\r\n                    {users.length > 0 &&\r\n                        <Autocomplete \r\n                            options={myUsers} \r\n                            filterOptions={userFilterOptions}\r\n                            value={searchUser}\r\n                            onChange={(e) => setSearchUser(e.target.value)}\r\n                            getOptionLabel={option => option.uniqueUserId}\r\n                            renderOption={option => (\r\n                                <Typography>\r\n                                    {option.firstName}\r\n                                </Typography>\r\n                            )}\r\n                            renderInput={params => (\r\n                                <TextField \r\n                                    {...params}\r\n                                    label='Search users' \r\n                                    placeholder='Search users'\r\n                                    color='primary' \r\n                                    variant='outlined' \r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        startAdornment: (\r\n                                            <InputAdornment \r\n                                                position='start' \r\n                                            >\r\n                                                <Icon \r\n                                                    path={mdiAccount}\r\n                                                    size={1}\r\n                                                    title='Account icon'\r\n                                                    aria-label='Account icon' \r\n                                                />\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    }\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        mainUser: state.userReducer.user,\r\n        theme: state.userThemeReducer.primary,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(GeoCitiesSearch);\r\n\r\n"]},"metadata":{},"sourceType":"module"}