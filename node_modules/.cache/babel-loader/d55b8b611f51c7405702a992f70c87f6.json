{"ast":null,"code":"import _objectSpread from\"c:/Users/bobma/Downloads/excite-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"c:/Users/bobma/Downloads/excite-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';import Grid from'@material-ui/core/Grid';import Typography from'@material-ui/core/Typography';import Icon from'@mdi/react';import{mdiAccount}from'@mdi/js';import TextField from'@material-ui/core/TextField';import InputAdornment from'@material-ui/core/InputAdornment';import Card from'@material-ui/core/Card';import CardContent from'@material-ui/core/CardContent';import Autocomplete,{createFilterOptions}from'@material-ui/lab/Autocomplete';import{makeStyles}from'@material-ui/core/styles';import{connect}from'react-redux';import{useHistory}from'react-router-dom';import ListItem from'@material-ui/core/ListItem';import ListItemAvatar from'@material-ui/core/ListItemAvatar';import Avatar from'@material-ui/core/Avatar';import ListItemText from'@material-ui/core/ListItemText';import axios from'axios';import swal from'sweetalert';var userFilterOptions=createFilterOptions({matchFrom:'any',stringify:function stringify(option){return option.firstName+' '+option.lastName+' '+option.username;}});var useStyles=makeStyles(function(){return{root:{marginTop:20},card:{maxWidth:450,margin:'auto'}};});function GeoCitiesSearch(props){var classes=useStyles();var history=useHistory();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),searchUser=_useState2[0],setSearchUser=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),users=_useState4[0],setUsers=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),val=_useState6[0],setVal=_useState6[1];var myUsers=['Simeon'];useEffect(function(){//If the user is not logged in, return to the log in/sign up page. \nif(props.mainUser===null){history.push('/');}else{return axios({method:'GET',url:\"https://www.geocities.cc/api/fetch/users/\".concat(props.mainUser.uniqueUserId)}).then(function(response){if(response.data.users.length>0){setUsers(response.data.users);//Update the profile theme once the users return.\nprops.dispatch({type:'ThemeChange',payload:props.mainUser.profileTheme});}else{swal('Uh Oh!','We could not find any users to search.','error');}}).catch(function(err){console.log(err.message);swal('Uh Oh!','There was an error getting the data to search from the server! Please try again.','error');history.goBack(1);});}},[]);return/*#__PURE__*/_jsx(Grid,{className:classes.root,container:true,children:/*#__PURE__*/_jsx(Card,{className:classes.card,children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"h6\",align:\"center\",style:{marginBottom:20},children:\"Search for users or communities\"}),users.length>0&&/*#__PURE__*/_jsx(Autocomplete,{value:searchUser,filterOptions:userFilterOptions,onChange:function onChange(e,newVal){return setSearchUser(newVal);},options:users,getOptionLabel:function getOptionLabel(option){return option.firstName+' '+option.lastName;},renderOption:function renderOption(option){return/*#__PURE__*/_jsxs(ListItem,{alignItems:\"flex-start\",style:{cursor:'pointer'},onClick:function onClick(){return history.push(\"/geouser/\".concat(option.uniqueUserId));},children:[/*#__PURE__*/_jsx(ListItemAvatar,{children:/*#__PURE__*/_jsx(Avatar,{src:\"https://www.geocities.cc/api/get-photo/\".concat(option.avatar),alt:\"\".concat(option.username),title:\"\".concat(option.username)})}),/*#__PURE__*/_jsx(ListItemText,{primary:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"h6\",children:option.username}),secondary:/*#__PURE__*/_jsxs(Typography,{component:\"small\",color:\"textSecondary\",children:[option.firstName,\" \",option.lastName]})})]});},renderInput:function renderInput(params){return/*#__PURE__*/_jsx(TextField,_objectSpread(_objectSpread({},params),{},{color:\"primary\",variant:\"outlined\",label:\"Search users\",placeholder:\"Search users\",helperText:\"Search for a GeoCities user\",InputLabelProps:{shrink:true},fullWidth:true,required:true}));}})]})})});}function mapStateToProps(state){return{mainUser:state.userReducer.user,theme:state.userThemeReducer.primary};}export default connect(mapStateToProps)(GeoCitiesSearch);","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/GeoCitiesSearch.js"],"names":["React","useState","useEffect","Grid","Typography","Icon","mdiAccount","TextField","InputAdornment","Card","CardContent","Autocomplete","createFilterOptions","makeStyles","connect","useHistory","ListItem","ListItemAvatar","Avatar","ListItemText","axios","swal","userFilterOptions","matchFrom","stringify","option","firstName","lastName","username","useStyles","root","marginTop","card","maxWidth","margin","GeoCitiesSearch","props","classes","history","searchUser","setSearchUser","users","setUsers","val","setVal","myUsers","mainUser","push","method","url","uniqueUserId","then","response","data","length","dispatch","type","payload","profileTheme","catch","err","console","log","message","goBack","marginBottom","e","newVal","cursor","avatar","params","shrink","mapStateToProps","state","userReducer","user","theme","userThemeReducer","primary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Icon from '@mdi/react';\r\nimport { mdiAccount } from '@mdi/js';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n\r\nconst userFilterOptions = createFilterOptions({\r\n    matchFrom: 'any',\r\n    stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username,\r\n});\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        marginTop: 20,\r\n    },\r\n    card: {\r\n        maxWidth: 450,\r\n        margin: 'auto',\r\n    }\r\n}));\r\n\r\nfunction GeoCitiesSearch(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [searchUser, setSearchUser] = useState(null);\r\n    const [users, setUsers] = useState([]);\r\n    const [val, setVal] = useState('');\r\n    const myUsers = [\r\n        'Simeon',\r\n    ]\r\n\r\n    useEffect(() => {\r\n        //If the user is not logged in, return to the log in/sign up page. \r\n        if(props.mainUser === null) {\r\n            history.push('/');\r\n        }\r\n        else {\r\n            return axios({\r\n                method: 'GET',\r\n                url: `https://www.geocities.cc/api/fetch/users/${props.mainUser.uniqueUserId}`,\r\n            }).then(response => {\r\n                if(response.data.users.length > 0) {\r\n                    setUsers(response.data.users);\r\n                    //Update the profile theme once the users return.\r\n                    props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme});\r\n                }\r\n                else {\r\n                    swal(\r\n                        'Uh Oh!',\r\n                        'We could not find any users to search.',\r\n                        'error',\r\n                    );\r\n                }\r\n            }).catch(err => {\r\n                console.log(err.message);\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error getting the data to search from the server! Please try again.',\r\n                    'error',\r\n                );\r\n                history.goBack(1);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Grid \r\n            className={classes.root} \r\n            container \r\n        >\r\n            <Card \r\n                className={classes.card} \r\n            >\r\n                <CardContent>\r\n                    <Typography \r\n                        variant='h6' \r\n                        component='h6' \r\n                        align='center'\r\n                        style={{\r\n                            marginBottom: 20,\r\n                        }}\r\n                    >\r\n                        Search for users or communities \r\n                    </Typography>\r\n                    {users.length > 0 &&\r\n                        <Autocomplete \r\n                            value={searchUser}\r\n                            filterOptions={userFilterOptions}\r\n                            onChange={(e, newVal) => setSearchUser(newVal)}\r\n                            options={users}\r\n                            getOptionLabel={option => option.firstName + ' ' + option.lastName}\r\n                            renderOption={option => (\r\n                                <ListItem \r\n                                    alignItems='flex-start' \r\n                                    style={{\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={() => history.push(`/geouser/${option.uniqueUserId}`)}\r\n                                >\r\n                                    <ListItemAvatar>\r\n                                        <Avatar \r\n                                            src={`https://www.geocities.cc/api/get-photo/${option.avatar}`}\r\n                                            alt={`${option.username}`}\r\n                                            title={`${option.username}`} \r\n                                        />\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText \r\n                                        primary={\r\n                                            <Typography \r\n                                                variant='h6' \r\n                                                component='h6' \r\n                                            >\r\n                                                {option.username}\r\n                                            </Typography>\r\n                                        }\r\n                                        secondary={\r\n                                            <Typography \r\n                                                component='small'\r\n                                                color='textSecondary' \r\n                                            >\r\n                                                {option.firstName} {option.lastName}\r\n                                            </Typography>\r\n                                        }\r\n                                    />\r\n                                </ListItem>\r\n                            )}\r\n                            renderInput={params => (\r\n                                <TextField \r\n                                    {...params} \r\n                                    color='primary'\r\n                                    variant='outlined' \r\n                                    label='Search users' \r\n                                    placeholder='Search users'\r\n                                    helperText='Search for a GeoCities user'\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    fullWidth \r\n                                    required \r\n                                />\r\n                            )}\r\n                        />\r\n                    }\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        mainUser: state.userReducer.user,\r\n        theme: state.userThemeReducer.primary,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(GeoCitiesSearch);\r\n\r\n"]},"metadata":{},"sourceType":"module"}