{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simeonikudabo/Downloads/geocities/src/components/MessagesComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport { useHistory } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Icon from '@mdi/react';\nimport { mdiClose } from '@mdi/js';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Paper from '@material-ui/core/Paper';\nimport * as _ from 'underscore';\nconst userFilterOptions = createFilterOptions({\n  matchFrom: 'any',\n  stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username\n}); //Filter options to search for users to message\n\nconst useStyles = makeStyles(() => ({\n  topGrid: {\n    marginTop: 100\n  },\n  topMarg: {\n    marginTop: 20,\n    textAlign: 'center'\n  },\n  paper: {\n    maxWidth: 450\n  }\n}));\n\nfunction MessagesComponent(props) {\n  _s();\n\n  const classes = useStyles(); //Custom classes.\n\n  const history = useHistory(); //Manipulate window location\n\n  const [threads, setThreads] = useState([]); //Variable and setter for the list of threads. \n\n  const [openDialog, setOpenDialog] = useState(false); //Variable and setter for the compose message dialog\n\n  const [users, setUsers] = useState([]); //Variable and setter for each user to search.\n\n  const [msgTarget, setMsgTarget] = useState(null); //Variable and setter for the GeoUser we want to send a message to\n\n  const [msg, setMsg] = useState(''); //Variable and setter for a DM message we want to send to the user.\n\n  const [msgSending, setMsgSending] = useState(false); //Variable and setter to trigger when a message is sending\n\n  useEffect(() => {\n    if (props.user === null) {\n      swal('Uh Oh!', 'You must be logged in to access messages!', 'error');\n      history.push('/');\n    } else {\n      //Grab threads and all GeoUsers.\n      return axios({\n        method: 'GET',\n        url: `http://192.168.0.17:3001/api/get/threads/${props.user.uniqueUserId}`\n      }).then(response => {\n        props.dispatch({\n          type: 'user/updateUser',\n          payload: response.data.user\n        });\n        props.dispatch({\n          type: 'ThemeChange',\n          payload: response.data.user.profileTheme\n        });\n        setUsers(response.data.users); //Create an if condition to only set thread if there are any for the user. \n\n        if (response.data.threads) {\n          //setThreads(response.data.threads);\n          //setThreads(elements => [...elements, response.data.threads]);\n          setThreads([...response.data.threads]);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error retreiving your message threads', 'error');\n        history.goBack(1);\n      });\n    }\n  }, []);\n\n  function sendMsg() {\n    //This function will be responsible for sending a message to the server. \n    setMsgSending(true);\n\n    if (msg.trim().length < 1) {\n      swal('Uh Oh!', 'You must enter a message to send!', 'error');\n      setMsgSending(false);\n      return false;\n    } else if (msgTarget === null) {\n      swal('Uh Oh!', 'You must select a user to send a message to!', 'error');\n      setMsgSending(false);\n      return false;\n    } else {\n      let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n      const date = new Date();\n      const month = months[date.getMonth()];\n      const day = date.getDate();\n      const year = date.getFullYear();\n      let data = JSON.stringify({\n        senderUniqueUserId: props.user.uniqueUserId,\n        receiverUniqueUserId: msgTarget.uniqueUserId,\n        senderUsername: props.user.username,\n        receiverUsername: msgTarget.username,\n        msg: msg,\n        dateString: `${month} ${day}, ${year}`,\n        utcTime: Date.now(),\n        uniqueMessageId: Date.now() + props.user.uniqueUserId + Date.now() + msgTarget.uniqueUserId,\n        freshMsg: true,\n        targetThread: ''\n      });\n      return axios({\n        method: 'POST',\n        url: 'http://192.168.0.17:3001/api/add/dm',\n        data: data,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        swal('Great!', 'You successfully sent that message!', 'success'); //setThreads(response.data.threads);\n\n        setThreads([...response.data.threads]);\n        console.log(response.data.threads);\n        setUsers(response.data.users);\n        setMsgTarget(null);\n        setMsg(null);\n        setOpenDialog(false);\n        setMsgSending(false);\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error sending that message! Please try again.', 'error');\n        setMsgSending(false);\n      });\n    }\n  }\n\n  function findId(firstId, secondId) {\n    //This function will return the userId of the user who is not the \"mainUser\"\n    if (firstId === props.user.uniqueUserId) {\n      return secondId;\n    } else {\n      return firstId;\n    }\n  }\n\n  function findUsername(firstUsername, secondUsername) {\n    //This function will return the username that does not match the mainUser username.\n    if (props.user.username === firstUsername) {\n      return secondUsername;\n    } else {\n      return firstUsername;\n    }\n  }\n\n  function timeDifference(date2, dateString) {\n    //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a thread\n    let date1 = Date.now();\n    let difference = date1 - date2;\n    let daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);\n    let hoursDifference = Math.floor(difference / 1000 / 60 / 60);\n    let minutesDifference = Math.floor(difference / 1000 / 60);\n    let secondsDifference = Math.floor(difference / 1000);\n\n    if (daysDifference > 0) {\n      return dateString;\n    } else if (hoursDifference > 0 && hoursDifference < 23) {\n      return `${hoursDifference} hr ago`;\n    } else if (minutesDifference > 0 && minutesDifference < 60) {\n      return `${minutesDifference} min ago`;\n    } else if (minutesDifference === 0) {\n      return `${secondsDifference} secs ago`;\n    } else {\n      return dateString;\n    }\n  }\n\n  if (props.user !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.topGrid,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h4\",\n          align: \"center\",\n          children: threads.length > 0 ? 'Messages' : 'No messages'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.topMarg,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: e => setOpenDialog(!openDialog),\n          children: \"Compose +\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: openDialog,\n          fullScreen: true,\n          children: /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(AppBar, {\n              color: \"primary\",\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                path: mdiClose,\n                size: 1,\n                \"aria-label\": \"Close dialog\",\n                title: \"Close\",\n                onClick: e => setOpenDialog(false),\n                style: {\n                  cursor: 'pointer',\n                  color: 'rgb(255, 255, 255)'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                component: \"h4\",\n                style: {\n                  margin: 'auto',\n                  color: 'rgb(255, 255, 255)'\n                },\n                children: \"Create message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              style: {\n                marginTop: 100\n              },\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                value: msgTarget,\n                filterOptions: userFilterOptions,\n                options: users,\n                getOptionLabel: option => option.firstName + ' ' + option.lastName,\n                renderOption: option => /*#__PURE__*/_jsxDEV(ListItem, {\n                  alignItems: \"flex-start\",\n                  onClick: () => setMsgTarget(option),\n                  children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                    children: /*#__PURE__*/_jsxDEV(Avatar, {\n                      src: `http://192.168.0.17:3001/api/get-photo/${option.avatar}`,\n                      alt: `${option.username}`,\n                      title: `${option.username}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 289,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h6\",\n                      component: \"h6\",\n                      children: option.username\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 297,\n                      columnNumber: 53\n                    }, this),\n                    secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                      component: \"small\",\n                      color: \"textSecondary\",\n                      children: [option.firstName, \" \", option.lastName]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 305,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 41\n                }, this),\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  color: \"primary\",\n                  variant: \"outlined\",\n                  label: \"Search users\",\n                  placeholder: \"To\",\n                  helperText: \"Select a user to send a message to\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  fullWidth: true,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              style: {\n                marginTop: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                value: msg,\n                onChange: e => setMsg(e.target.value),\n                label: \"Enter message\",\n                placeholder: \"What's on your mind?\",\n                helperText: \"Enter a message to send to a user\",\n                inputLabelProps: {\n                  shrink: true\n                },\n                rows: 4,\n                variant: \"outlined\",\n                fullWidth: true,\n                multiline: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  marginTop: 40\n                },\n                color: \"primary\",\n                variant: \"contained\",\n                disabled: msgSending,\n                onClick: sendMsg,\n                fullWidth: true,\n                children: msgSending ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 51\n                }, this) : 'Send'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        style: {\n          marginTop: 30,\n          textAlign: 'center'\n        },\n        item: true,\n        xs: 12,\n        children: threads.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: threads.map((thread, index) => /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            style: {\n              marginBottom: index < threads.length - 1 ? 20 : 0\n            },\n            children: /*#__PURE__*/_jsxDEV(ListItem, {\n              alignItems: \"flex-start\",\n              children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  src: `http://192.168.0.17:3001/api/get/avatar/by/id/${findId(thread.uniqueUserIds[0], thread.uniqueUserIds[1])}`,\n                  alt: \"Geo User\",\n                  title: \"User avatar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  component: \"h6\",\n                  children: findUsername(thread.usernames[0], thread.usernames[1])\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 49\n                }, this),\n                secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  component: \"span\",\n                  color: \"textSecondary\",\n                  children: timeDifference(thread.messages[-1].utcTime, thread.messages[-1].dateString)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 37\n            }, this)\n          }, index.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(MessagesComponent, \"aZJ47jzM0qXejfjIxKRgNWwDH8Q=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = MessagesComponent;\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(MessagesComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"MessagesComponent\");","map":{"version":3,"sources":["/Users/simeonikudabo/Downloads/geocities/src/components/MessagesComponent.js"],"names":["React","useState","useEffect","Typography","Grid","connect","makeStyles","Backdrop","CircularProgress","axios","swal","useHistory","Button","Dialog","DialogContent","AppBar","Icon","mdiClose","TextField","ListItem","ListItemText","ListItemAvatar","Avatar","Autocomplete","createFilterOptions","Paper","_","userFilterOptions","matchFrom","stringify","option","firstName","lastName","username","useStyles","topGrid","marginTop","topMarg","textAlign","paper","maxWidth","MessagesComponent","props","classes","history","threads","setThreads","openDialog","setOpenDialog","users","setUsers","msgTarget","setMsgTarget","msg","setMsg","msgSending","setMsgSending","user","push","method","url","uniqueUserId","then","response","dispatch","type","payload","data","profileTheme","catch","err","console","log","message","goBack","sendMsg","trim","length","months","date","Date","month","getMonth","day","getDate","year","getFullYear","JSON","senderUniqueUserId","receiverUniqueUserId","senderUsername","receiverUsername","dateString","utcTime","now","uniqueMessageId","freshMsg","targetThread","headers","findId","firstId","secondId","findUsername","firstUsername","secondUsername","timeDifference","date2","date1","difference","daysDifference","Math","floor","hoursDifference","minutesDifference","secondsDifference","e","cursor","color","margin","avatar","params","shrink","target","value","map","thread","index","marginBottom","uniqueUserIds","usernames","messages","toString","mapStateToProps","state","userReducer","primary","userThemeReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport { useHistory } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Icon from '@mdi/react';\nimport { mdiClose } from '@mdi/js';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Paper from '@material-ui/core/Paper';\nimport * as _ from 'underscore';\n\nconst userFilterOptions = createFilterOptions({\n    matchFrom: 'any',\n    stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username,\n}); //Filter options to search for users to message\n\nconst useStyles = makeStyles(() => ({\n    topGrid: {\n        marginTop: 100,\n    },\n    topMarg: {\n        marginTop: 20,\n        textAlign: 'center',\n    },\n    paper: {\n        maxWidth: 450,\n    },\n}));\n\nfunction MessagesComponent(props) {\n    const classes = useStyles(); //Custom classes.\n    const history = useHistory(); //Manipulate window location\n    const [threads, setThreads] = useState([]);//Variable and setter for the list of threads. \n    const [openDialog, setOpenDialog] = useState(false); //Variable and setter for the compose message dialog\n    const [users, setUsers] = useState([]); //Variable and setter for each user to search.\n    const [msgTarget, setMsgTarget] = useState(null); //Variable and setter for the GeoUser we want to send a message to\n    const [msg, setMsg] = useState(''); //Variable and setter for a DM message we want to send to the user.\n    const [msgSending, setMsgSending] = useState(false); //Variable and setter to trigger when a message is sending\n\n    useEffect(() => {\n        if(props.user === null) {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to access messages!',\n                'error',\n            );\n\n            history.push('/');\n        }\n        else {\n            //Grab threads and all GeoUsers.\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/get/threads/${props.user.uniqueUserId}`,\n            }).then(response => {\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                props.dispatch({type: 'ThemeChange', payload: response.data.user.profileTheme});\n                setUsers(response.data.users);\n                //Create an if condition to only set thread if there are any for the user. \n                if(response.data.threads) {\n                    //setThreads(response.data.threads);\n                    //setThreads(elements => [...elements, response.data.threads]);\n                    setThreads([...response.data.threads]);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error retreiving your message threads',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    }, []);\n\n    function sendMsg() {\n        //This function will be responsible for sending a message to the server. \n        setMsgSending(true);\n\n        if(msg.trim().length < 1) {\n            swal(\n                'Uh Oh!',\n                'You must enter a message to send!',\n                'error',\n            );\n            setMsgSending(false);\n            return false;\n        }\n        else if(msgTarget === null) {\n            swal(\n                'Uh Oh!',\n                'You must select a user to send a message to!',\n                'error',\n            );\n            setMsgSending(false);\n            return false;\n        }\n        else {\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            const date = new Date();\n            const month = months[date.getMonth()];\n            const day = date.getDate();\n            const year = date.getFullYear();\n\n            let data = JSON.stringify({\n                senderUniqueUserId: props.user.uniqueUserId,\n                receiverUniqueUserId: msgTarget.uniqueUserId,\n                senderUsername: props.user.username,\n                receiverUsername: msgTarget.username,\n                msg: msg,\n                dateString: `${month} ${day}, ${year}`,\n                utcTime: Date.now(),\n                uniqueMessageId: Date.now() + props.user.uniqueUserId + Date.now() + msgTarget.uniqueUserId,\n                freshMsg: true,\n                targetThread: '',\n            });\n\n            return axios({\n                method: 'POST',\n                url: 'http://192.168.0.17:3001/api/add/dm',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                swal(\n                    'Great!',\n                    'You successfully sent that message!',\n                    'success',\n                );\n                //setThreads(response.data.threads);\n                setThreads([...response.data.threads]);\n                console.log(response.data.threads);\n                setUsers(response.data.users);\n                setMsgTarget(null);\n                setMsg(null);\n                setOpenDialog(false);\n                setMsgSending(false);\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that message! Please try again.',\n                    'error',\n                );\n                setMsgSending(false);\n            });\n        }\n    }\n\n    function findId(firstId, secondId) {\n        //This function will return the userId of the user who is not the \"mainUser\"\n        if(firstId === props.user.uniqueUserId) {\n            return secondId;\n        }\n        else {\n            return firstId;\n        }\n    }\n\n    function findUsername(firstUsername, secondUsername) {\n        //This function will return the username that does not match the mainUser username.\n        if(props.user.username === firstUsername) {\n            return secondUsername;\n        }\n        else {\n            return firstUsername;\n        }\n    }\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a thread\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    if(props.user !== null) {\n        return(\n            <Grid \n                container   \n                className={classes.topGrid} \n            >\n                <Grid \n                    xs={12} \n                    item \n                >\n                    <Typography \n                        variant='h4'\n                        component='h4'\n                        align='center' \n                    >\n                        {threads.length > 0 ? 'Messages' : 'No messages'}\n                    </Typography>\n                </Grid>\n                <Grid \n                    item\n                    xs={12} \n                    className={classes.topMarg}\n                >\n                    <Button \n                        color='primary' \n                        variant='contained' \n                        onClick={e => setOpenDialog(!openDialog)}\n                    >\n                        Compose +\n                    </Button>\n                    <Dialog \n                        open={openDialog} \n                        fullScreen\n                    >\n                        <DialogContent>\n                            <AppBar \n                                color='primary'\n                            >\n                                <Icon \n                                    path={mdiClose} \n                                    size={1} \n                                    aria-label='Close dialog' \n                                    title='Close' \n                                    onClick={e => setOpenDialog(false)}\n                                    style={{\n                                        cursor: 'pointer',\n                                        color: 'rgb(255, 255, 255)'\n                                    }}\n                                />\n                                <Typography \n                                    variant='h4' \n                                    component='h4' \n                                    style={{\n                                        margin: 'auto',\n                                        color: 'rgb(255, 255, 255)',\n                                    }}\n                                >\n                                    Create message\n                                </Typography>\n                            </AppBar>\n                            <Grid \n                                item \n                                xs={12} \n                                style={{\n                                    marginTop: 100,\n                                }}\n                            >\n                                <Autocomplete \n                                    value={msgTarget}\n                                    filterOptions={userFilterOptions}\n                                    options={users}\n                                    getOptionLabel={option => option.firstName + ' ' + option.lastName}\n                                    renderOption={option => (\n                                        <ListItem \n                                            alignItems='flex-start' \n                                            onClick={() => setMsgTarget(option)}\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://192.168.0.17:3001/api/get-photo/${option.avatar}`}\n                                                    alt={`${option.username}`}\n                                                    title={`${option.username}`} \n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                    >\n                                                        {option.username}\n                                                    </Typography>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        component='small'\n                                                        color='textSecondary' \n                                                    >\n                                                        {option.firstName} {option.lastName}\n                                                    </Typography>\n                                                }\n                                            />\n                                        </ListItem>\n                                    )}\n                                    renderInput={params => (\n                                        <TextField \n                                            {...params} \n                                            color='primary'\n                                            variant='outlined' \n                                            label='Search users' \n                                            placeholder='To'\n                                            helperText='Select a user to send a message to'\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            fullWidth \n                                            required \n                                        />\n                                    )}\n                                />\n                            </Grid>\n                            <Grid \n                                item \n                                xs={12} \n                                style={{\n                                    marginTop: 20,\n                                }}\n                            >\n                                <TextField \n                                    value={msg} \n                                    onChange={e => setMsg(e.target.value)}\n                                    label='Enter message' \n                                    placeholder=\"What's on your mind?\"\n                                    helperText='Enter a message to send to a user' \n                                    inputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    rows={4} \n                                    variant='outlined'\n                                    fullWidth \n                                    multiline\n                                />\n                                <Button \n                                    style={{\n                                        marginTop: 40,\n                                    }}\n                                    color='primary' \n                                    variant='contained' \n                                    disabled={msgSending}\n                                    onClick={sendMsg}\n                                    fullWidth\n                                >\n                                    {msgSending ? <CircularProgress /> : 'Send'}\n                                </Button>\n                            </Grid>\n                        </DialogContent>\n                    </Dialog>\n                </Grid>\n                {/* End of the Grid with the Button and Dialog inside. Now start Grid with messages threads */}\n                <Grid \n                    style={{\n                        marginTop: 30,\n                        textAlign: 'center',\n                    }}\n                    item \n                    xs={12} \n                >\n                    {threads.length > 0 &&\n                        <div>\n                            {threads.map((thread, index) => (\n                                <Paper \n                                    key={index.toString()}\n                                    elevation={3} \n                                    style={{\n                                        marginBottom: index < threads.length - 1 ? 20 : 0,\n                                    }}\n                                >\n                                    <ListItem \n                                        alignItems='flex-start' \n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar \n                                                src={`http://192.168.0.17:3001/api/get/avatar/by/id/${findId(thread.uniqueUserIds[0], thread.uniqueUserIds[1])}`}\n                                                alt='Geo User' \n                                                title='User avatar' \n                                            />\n                                        </ListItemAvatar>\n                                        <ListItemText \n                                            primary={\n                                                <Typography \n                                                    variant='h6' \n                                                    component='h6' \n                                                >\n                                                    {findUsername(thread.usernames[0], thread.usernames[1])}\n                                                </Typography>\n                                            }\n                                            secondary={\n                                                <Typography \n                                                    variant='subtitle2' \n                                                    component='span' \n                                                    color='textSecondary'\n                                                >\n                                                    {timeDifference(thread.messages[-1].utcTime, thread.messages[-1].dateString)}\n                                                </Typography>\n                                            }\n                                        />\n                                    </ListItem>\n                                </Paper>\n                            ))}\n                        </div>\n                    }\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        return(\n            <Backdrop \n                open={true}\n            >\n                <CircularProgress \n                    color='primary' \n                />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(MessagesComponent);"]},"metadata":{},"sourceType":"module"}