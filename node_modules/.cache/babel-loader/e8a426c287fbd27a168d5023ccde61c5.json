{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simeonikudabo/Downloads/geocities/src/components/BuildCommunity.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/CameraAlt';\nimport swal from 'sweetalert';\nimport axios from 'axios';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Resizer from 'react-image-file-resizer';\nimport { SwatchesPicker } from 'react-color';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(() => ({\n  root: {\n    marginTop: 100\n  },\n  card: {\n    margin: 'auto',\n    maxWidth: 450\n  },\n  topField: {\n    marginTop: 20\n  },\n  fieldMarg: {\n    marginTop: 30\n  },\n  topMarg: {\n    marginTop: 10\n  },\n  input: {\n    display: 'none'\n  }\n}));\nconst communityTopics = ['Accounting', 'Activism', 'Animals And Pets', 'Art', 'Astrology', 'Athletes', 'Aviation', 'Bars', 'Baseball', 'Beauty And Makeup', 'Biking', 'Black Lives Matter', 'Brands/Products', 'Business', 'Careers', 'Cars And Motor Vehicles', 'Celebrity', 'College Baseball', 'College Basketball', 'College Football', 'Computer Science', 'Crafts And DYI', 'Crossfit', 'Crypto', 'Culture Race And Ethnicity', 'Dancing', 'Day Trading', 'Documentaries', 'Economics', 'Education', 'Electronics', 'Entertainment', 'Ethics And Philosophy', 'Family And Relationships', 'Fashion', 'Filming', 'Fitness And Nutrition', 'Food And Drink', 'Funny/Humor', 'Gaming', 'Gender', 'GeoCities', 'Greek Life', 'Hair', 'Health', 'History', 'Hobbies', 'Hockey', 'Home And Garden', 'Investing', 'International Culture', 'Internet Culture', 'Intramural Sports', 'Latin Culture', 'Marijuna', 'Marketplace And Deals', 'Mature Themes And Adult Content', 'Medical And Mental Health', 'Meditation', \"Men's Health\", 'Military', 'Movies', 'Music', 'NBA', 'NFL', 'NHL', 'Nursing', 'Only Fans', 'Outdoors And Nature', 'Partying', 'People', 'Personal Connections', 'Photography', 'Podcasts And Streamers', 'Politics', 'Pop Culture', 'Programming', 'Public Policy', 'Reading Writing And Literature', 'Religion And Spirituality', 'Robinhood Trading', 'Rowing', 'Running', 'Science', 'Sexual Health And Orientation', 'Side Hustle', 'Sports', 'Soccer', 'Social Justice', 'Software Engineering', 'Streaming', 'Tabletop Games', 'Television', 'Television Personalities', 'Theatre', 'Track & Field', 'Volleyball', \"Women's Health\", 'World News', 'Working Out/Gym', 'Work/Labor'];\n\nfunction BuildCommunity(props) {\n  _s();\n\n  const classes = useStyles(); //Custom styles\n\n  const history = useHistory(); //History API access\n\n  const formRef = useRef(null); //Form reference\n\n  const [name, setName] = useState(''); //State for community name. \n\n  const [title, setTitle] = useState(''); //State for community title (100 character max).\n\n  const [topics, setTopics] = useState([]); //Community topics.\n\n  const [communityTheme, setCommunityTheme] = useState('#00143C'); //Community theme color. Default to dark blue.\n\n  const [avatar, setAvatar] = useState(null); //Community profile image. \n\n  const [description, setDescription] = useState(''); //Community description string. \n\n  const [open, setOpen] = useState(false);\n  const regularExpressions = {\n    nameExpression: /^\\w+$/,\n    alphaStartRe: /^[A-Za-z]+$/\n  }; //Regular expressions for a valid community name with letters, numbers, and underscores, along with another regex for the community name to start with a letter.\n\n  useEffect(() => {\n    //First, check to see if the user is logged into GeoCities. Redirect them to login page if not. \n    if (props.mainUser === null) {\n      swal('Uh Oh!', 'You must be logged in to build a community!', 'error');\n      history.push('/');\n    } else {\n      props.dispatch({\n        type: 'ThemeChange',\n        payload: props.mainUser.profileTheme\n      }); //Update profile theme.\n    } //Now add some form validation rules. \n    //Rule that the name (or title) not be empty. \n\n\n    ValidatorForm.addValidationRule('nameRequired', v => {\n      if (v.trim() === '') {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Validation rule that the length of a name for a community be between 6 and 30 characters\n\n    ValidatorForm.addValidationRule('nameLength', v => {\n      if (v.length < 6) {\n        return false;\n      } else if (v.length > 50) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Validation rule that the title of a community be between 10 and 75 characters \n\n    ValidatorForm.addValidationRule('titleLength', v => {\n      if (v.length < 10) {\n        return false;\n      } else if (v.length > 75) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //The rule below ensures that the name is valid and follows regex rules.\n\n    ValidatorForm.addValidationRule('nameRe', v => {\n      if (!regularExpressions.nameExpression.test(v)) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //The rule below ensures the name starts with an alpha character \n\n    ValidatorForm.addValidationRule('alphaStart', v => {\n      if (!regularExpressions.alphaStartRe.test(v.slice(0, 1))) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //The rule below ensures that the community description is at least 10 characters and at most 300. \n\n    ValidatorForm.addValidationRule('descriptionLength', v => {\n      if (v.length < 10) {\n        return false;\n      } else if (v.length > 300) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }, []);\n\n  function preventSpaces(e) {\n    //This function prevents spaces in the community name \n    if (e.keyCode === 32) {\n      e.preventDefault();\n      return false;\n    }\n  }\n\n  function handleTopicsChange(e) {\n    //This function will add topics to the topics array. It will remove the topic if it is unchecked.\n    if (e.target.checked) {\n      if (topics.length <= 9) {\n        setTopics(topics => [...topics, e.target.value]);\n      } else {\n        swal('Uh Oh!', 'You can only select up to 10 topics!', 'error');\n      }\n    } else if (!e.target.checked) {\n      setTopics(topics.filter(topic => topic !== e.target.value));\n    }\n  }\n\n  function resizerFunction(file) {\n    //This is a wrapper for the file resizer \n    return new Promise(resolve => {\n      Resizer.imageFileResizer(file, 600, 600, 'JPEG', 100, 0, uri => {\n        resolve(uri);\n      }, 'blob');\n    });\n  }\n\n  async function handleAvatarChange(e) {\n    //This function will handle storing an avatar in the avatar state variable and resizing it. \n    let file = e.target.files[0];\n    let resizedAvatar = await resizerFunction(file);\n    setAvatar(resizedAvatar);\n  }\n\n  async function buildCommunity() {\n    setOpen(true);\n    let formValid = formRef.current.isFormValid();\n\n    if (!formValid) {\n      swal('Uh Oh!', 'Make sure you filled out the community builder form properly!', 'error');\n      setOpen(false);\n      return false;\n    } else if (avatar === null) {\n      swal('Uh Oh!', 'Make sure you add a community avatar!', 'error');\n      setOpen(false);\n      return false;\n    } else if (topics.length < 1) {\n      swal('Uh Oh!', 'You must select at least one relevant topic for this community!', 'error');\n      setOpen(false);\n      return false;\n    } else {\n      let fd = new FormData();\n      let date = new Date();\n      let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n      let month = months[date.getMonth()];\n      let day = date.getDate();\n      let year = date.getFullYear();\n      let createdOn = `${month} ${day}, ${year}`;\n      fd.append('createdOn', createdOn);\n      fd.append('username', props.mainUser.username);\n      fd.append('uniqueUserId', props.mainUser.uniqueUserId);\n      fd.append('name', name);\n      fd.append('title', title);\n      fd.append('communityTheme', communityTheme);\n      fd.append('avatar', avatar, 'avatar.jpg');\n      fd.append('description', description);\n      fd.append('topics', topics);\n      return axios({\n        method: 'POST',\n        url: 'http://10.162.93.179:3001/api/build/community',\n        data: fd,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        if (response.data !== 'error') {\n          swal('Great!', 'Successfully built new community!', 'success');\n          setOpen(false);\n          history.push(`/community/${response.data}`);\n        } else if (response.data === 'name taken') {\n          swal('Uh Oh!', 'That community name is taken! Please select another', 'error');\n          setOpen(false);\n        } else {\n          swal('Uh Oh!', 'There was an error building this community! Please try again.', 'error');\n          setOpen(false);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error building that community!', 'error');\n        setOpen(false);\n      });\n    }\n  }\n\n  if (props.mainUser !== null) {\n    //Return this layout if the user is signed in. \n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.card,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"Build a GeoCities community!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"small\",\n            className: classes.topMarg,\n            align: \"center\",\n            children: \"GeoCities allows you to build interactive communities around topics of interest. As the community builder, you will also be the community moderator. You will have the ability to block or add users to the community, alter community settings, delete posts and comments, manage the chatroom, and set community rules. You can also decide if the community posts should be publicly available or only available to members of the community. We encourage you to make the community public to enhance engagement amongst community members. You can NEVER change the name of the community once you select a name.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n            ref: formRef,\n            onSubmit: e => e.preventDefault(),\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              color: name.length < 6 || name.length > 50 ? 'error' : 'default',\n              style: {\n                marginTop: 20\n              },\n              align: \"center\",\n              children: [name.length, \"/50\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              label: \"Community name\",\n              placeholder: \"Select a community name | e.g. (Colts_Fans_Community)\",\n              helperText: \"The community name must start with a letter and can only contain letters, numbers, and underscores. Community names must be between 6 and 50 characters long and cannot contain spaces. You can NEVER change the name of a community, so make sure you select the proper name!\",\n              value: name,\n              onChange: e => setName(e.target.value),\n              validators: ['nameRequired', 'nameLength', 'nameRe', 'alphaStart'],\n              errorMessages: ['Must enter a community name!', 'Community name must be between 6 and 50 characters long!', 'Name can only contain letters, numbers, and underscores, and it must start with a letter!', 'Community name must start with a letter!'],\n              onKeyDown: preventSpaces,\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\",\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              className: classes.toMarg,\n              align: \"center\",\n              color: title.length < 10 || title.length > 75 ? 'error' : 'default',\n              children: [title.length, \"/75\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              label: \"Community title\",\n              placeholder: \"Select a title for this community (required)\",\n              value: title,\n              onChange: e => setTitle(e.target.value),\n              helperText: \"The community title will display at the top of your community page. This can be a short description of what the community is about and must be between 10 and 75 characters.\",\n              validators: ['nameRequired', 'titleLength'],\n              errorMessages: ['A title for the community is required!', 'The community title must be between 10 and 75 characters!'],\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\",\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.topMarg,\n              component: \"fieldset\",\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                component: \"legend\",\n                children: \"Select at least 1 community topic. You can choose up to 10 (required)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                column: true,\n                children: communityTopics.map((topic, index) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: topic,\n                  onChange: handleTopicsChange,\n                  label: topic,\n                  labelPlacement: \"end\",\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    color: \"primary\",\n                    checked: topics.includes(topic)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 49\n                  }, this)\n                }, index.toString(), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.topMarg,\n              variant: \"body1\",\n              component: \"p\",\n              color: description.length < 10 || description.length > 300 ? 'error' : 'default',\n              align: \"center\",\n              children: [description.length, \"/300\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              className: classes.topMarg,\n              label: \"Community description\",\n              placeholder: \"Write a brief this community (required)\",\n              helperText: \"The community description states what the community is about. It must be between 10 and 300 characters!\",\n              InputLabelProps: {\n                shrink: true\n              },\n              validators: ['nameRequired', 'descriptionLength'],\n              errorMessages: ['Must enter a community description!', 'The community description must be between 10 and 300 characters long!'],\n              value: description,\n              onChange: e => setDescription(e.target.value),\n              variant: \"outlined\",\n              rows: 3,\n              multiline: true,\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.topMarg,\n              variant: \"body1\",\n              component: \"p\",\n              children: \"Select a theme color for this community!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SwatchesPicker, {\n              color: communityTheme,\n              onChange: color => setCommunityTheme(color.hex),\n              colors: [['#00143C', '#2471A3', '#3498DB'], ['#641E16', '#C0392B', '#E74C3C'], ['#0E6655', '#45B39D', '#58D68D'], ['#5B2C6F', '#8E44AD', '#C39BD3'], ['#BA4A00', '#DC7633', '#E67E22'], ['#000000', '#34495E', '#7F8C8D']]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.topMarg,\n              variant: \"body1\",\n              component: \"p\",\n              children: \"Select a community avatar picture!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: classes.topMarg,\n              \"html-for\": \"avatar\",\n              style: {\n                margin: 'auto'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: classes.input,\n                id: \"avatar\",\n                name: \"avatar\",\n                type: \"file\",\n                accept: \"image/jpeg, image/jpg, image/png\",\n                onChange: handleAvatarChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                component: \"span\",\n                color: \"primary\",\n                variant: \"contained\",\n                children: /*#__PURE__*/_jsxDEV(CameraIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                margin: 'auto',\n                textAlign: 'center',\n                marginTop: 20\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: buildCommunity,\n                disabled: open,\n                children: open ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 45\n                }, this) : 'Build community'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this);\n  } else {\n    //If the mainUser is null, simply return a circular progress until we load the user, or redirect to the log in page. \n\n    /*#__PURE__*/\n    _jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(BuildCommunity, \"4Fx7an9IXqOJFCGwCyJIGB0vlEs=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = BuildCommunity;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(BuildCommunity);\n\nvar _c;\n\n$RefreshReg$(_c, \"BuildCommunity\");","map":{"version":3,"sources":["/Users/simeonikudabo/Downloads/geocities/src/components/BuildCommunity.js"],"names":["React","useState","useEffect","useRef","Grid","Card","CardContent","Typography","ValidatorForm","TextValidator","Checkbox","FormControl","FormLabel","FormControlLabel","FormGroup","Button","CameraIcon","swal","axios","Backdrop","CircularProgress","Resizer","SwatchesPicker","useHistory","connect","makeStyles","useStyles","root","marginTop","card","margin","maxWidth","topField","fieldMarg","topMarg","input","display","communityTopics","BuildCommunity","props","classes","history","formRef","name","setName","title","setTitle","topics","setTopics","communityTheme","setCommunityTheme","avatar","setAvatar","description","setDescription","open","setOpen","regularExpressions","nameExpression","alphaStartRe","mainUser","push","dispatch","type","payload","profileTheme","addValidationRule","v","trim","length","test","slice","preventSpaces","e","keyCode","preventDefault","handleTopicsChange","target","checked","value","filter","topic","resizerFunction","file","Promise","resolve","imageFileResizer","uri","handleAvatarChange","files","resizedAvatar","buildCommunity","formValid","current","isFormValid","fd","FormData","date","Date","months","month","getMonth","day","getDate","year","getFullYear","createdOn","append","username","uniqueUserId","method","url","data","headers","then","response","catch","err","console","log","message","shrink","toMarg","map","index","includes","toString","color","hex","textAlign","mapStateToProps","state","userReducer","user","primary","userThemeReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/CameraAlt';\nimport swal from 'sweetalert';\nimport axios from 'axios'; \nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress'; \nimport Resizer from 'react-image-file-resizer';\nimport { SwatchesPicker } from 'react-color';\nimport { useHistory }  from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        marginTop: 100,\n    },\n    card: {\n        margin: 'auto',\n        maxWidth: 450,\n    },\n    topField: {\n        marginTop: 20,\n    },\n    fieldMarg: {\n        marginTop: 30,\n    },\n    topMarg: {\n        marginTop: 10,\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nconst communityTopics = [\n    'Accounting', 'Activism', 'Animals And Pets', 'Art', 'Astrology', 'Athletes', 'Aviation', 'Bars', 'Baseball', 'Beauty And Makeup', 'Biking', 'Black Lives Matter', 'Brands/Products', 'Business', 'Careers', 'Cars And Motor Vehicles', \n    'Celebrity', 'College Baseball', 'College Basketball', 'College Football', 'Computer Science', 'Crafts And DYI', 'Crossfit', 'Crypto', 'Culture Race And Ethnicity', 'Dancing', 'Day Trading', 'Documentaries','Economics',\n    'Education', 'Electronics', 'Entertainment', 'Ethics And Philosophy', 'Family And Relationships', 'Fashion', 'Filming', 'Fitness And Nutrition', 'Food And Drink', 'Funny/Humor',\n    'Gaming', 'Gender', 'GeoCities', 'Greek Life', 'Hair', 'Health', 'History', 'Hobbies', 'Hockey', 'Home And Garden', 'Investing', 'International Culture', 'Internet Culture', 'Intramural Sports', 'Latin Culture', 'Marijuna', 'Marketplace And Deals',\n    'Mature Themes And Adult Content', 'Medical And Mental Health', 'Meditation', \"Men's Health\", 'Military', 'Movies', 'Music', 'NBA', 'NFL', 'NHL', 'Nursing', 'Only Fans',\n    'Outdoors And Nature', 'Partying', 'People', 'Personal Connections', 'Photography', 'Podcasts And Streamers', 'Politics', 'Pop Culture', 'Programming', 'Public Policy', 'Reading Writing And Literature', \n    'Religion And Spirituality', 'Robinhood Trading', 'Rowing', 'Running', 'Science', 'Sexual Health And Orientation', 'Side Hustle', 'Sports', 'Soccer', 'Social Justice', 'Software Engineering', 'Streaming', 'Tabletop Games', 'Television', 'Television Personalities', 'Theatre', 'Track & Field', 'Volleyball',\n    \"Women's Health\", 'World News', 'Working Out/Gym', 'Work/Labor',\n];\n\nfunction BuildCommunity(props) {\n    const classes = useStyles(); //Custom styles\n    const history = useHistory(); //History API access\n    const formRef = useRef(null); //Form reference\n    const [name, setName] = useState(''); //State for community name. \n    const [title, setTitle] = useState(''); //State for community title (100 character max).\n    const [topics, setTopics] = useState([]); //Community topics.\n    const [communityTheme, setCommunityTheme] = useState('#00143C'); //Community theme color. Default to dark blue.\n    const [avatar, setAvatar] = useState(null); //Community profile image. \n    const [description, setDescription] = useState(''); //Community description string. \n    const [open, setOpen] = useState(false);\n    const regularExpressions = {\n        nameExpression: /^\\w+$/,\n        alphaStartRe: /^[A-Za-z]+$/,\n    }; //Regular expressions for a valid community name with letters, numbers, and underscores, along with another regex for the community name to start with a letter.\n\n    useEffect(() => {\n        //First, check to see if the user is logged into GeoCities. Redirect them to login page if not. \n        if(props.mainUser === null) {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to build a community!',\n                'error',\n            );\n            history.push('/');\n        }\n        else {\n            props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme}); //Update profile theme.\n        }\n\n        //Now add some form validation rules. \n        //Rule that the name (or title) not be empty. \n        ValidatorForm.addValidationRule('nameRequired', v => {\n            if(v.trim() === '') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule that the length of a name for a community be between 6 and 30 characters\n        ValidatorForm.addValidationRule('nameLength', v => {\n            if(v.length < 6) {\n                return false;\n            }\n            else if(v.length > 50) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule that the title of a community be between 10 and 75 characters \n        ValidatorForm.addValidationRule('titleLength', v => {\n            if(v.length < 10) {\n                return false;\n            }\n            else if(v.length > 75) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //The rule below ensures that the name is valid and follows regex rules.\n        ValidatorForm.addValidationRule('nameRe', v => {\n            if(!regularExpressions.nameExpression.test(v)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //The rule below ensures the name starts with an alpha character \n        ValidatorForm.addValidationRule('alphaStart', v => {\n            if(!regularExpressions.alphaStartRe.test(v.slice(0, 1))) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //The rule below ensures that the community description is at least 10 characters and at most 300. \n        ValidatorForm.addValidationRule('descriptionLength', v => {\n            if(v.length < 10) {\n                return false;\n            }\n            else if(v.length > 300) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }, []);\n\n    function preventSpaces(e) {\n        //This function prevents spaces in the community name \n        if(e.keyCode === 32) {\n            e.preventDefault();\n            return false;\n        }\n    }\n\n    function handleTopicsChange(e) {\n        //This function will add topics to the topics array. It will remove the topic if it is unchecked.\n        if(e.target.checked) {\n            if(topics.length <= 9) {\n                setTopics(topics => [...topics, e.target.value]);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'You can only select up to 10 topics!',\n                    'error',\n                );\n            }\n        }\n        else if(!e.target.checked) {\n            setTopics(topics.filter(topic => topic !== e.target.value));\n        }\n    }\n\n    function resizerFunction(file) {\n        //This is a wrapper for the file resizer \n        return new Promise(resolve => {\n            Resizer.imageFileResizer(\n                file,\n                600,\n                600,\n                'JPEG',\n                100,\n                0,\n                uri => {\n                    resolve(uri);\n                },\n                'blob',\n            );\n        });\n    }\n\n    async function handleAvatarChange(e) {\n        //This function will handle storing an avatar in the avatar state variable and resizing it. \n        let file = e.target.files[0];\n        let resizedAvatar = await resizerFunction(file);\n        setAvatar(resizedAvatar);\n    }\n\n    async function buildCommunity() {\n        setOpen(true);\n\n        let formValid = formRef.current.isFormValid();\n\n        if(!formValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure you filled out the community builder form properly!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(avatar === null) {\n            swal(\n                'Uh Oh!',\n                'Make sure you add a community avatar!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else if(topics.length < 1) {\n            swal(\n                'Uh Oh!',\n                'You must select at least one relevant topic for this community!',\n                'error',\n            );\n            setOpen(false);\n            return false;\n        }\n        else {\n            let fd = new FormData();\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let createdOn = `${month} ${day}, ${year}`;\n            fd.append('createdOn', createdOn);\n            fd.append('username', props.mainUser.username);\n            fd.append('uniqueUserId', props.mainUser.uniqueUserId);\n            fd.append('name', name);\n            fd.append('title', title);\n            fd.append('communityTheme', communityTheme);\n            fd.append('avatar', avatar, 'avatar.jpg');\n            fd.append('description', description);\n            fd.append('topics', topics);\n\n            return axios({\n                method: 'POST',\n                url: 'http://10.162.93.179:3001/api/build/community',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data !== 'error') {\n                    swal(\n                        'Great!',\n                        'Successfully built new community!',\n                        'success',\n                    );\n                    setOpen(false);\n                    history.push(`/community/${response.data}`);\n                }\n                else if(response.data === 'name taken') {\n                    swal(\n                        'Uh Oh!',\n                        'That community name is taken! Please select another',\n                        'error',\n                    );\n                    setOpen(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error building this community! Please try again.',\n                        'error',\n                    );\n                    setOpen(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error building that community!',\n                    'error',\n                );\n                setOpen(false);\n            });\n        }\n    }\n\n\n    if(props.mainUser !== null) {\n        //Return this layout if the user is signed in. \n        return (\n            <Grid \n                container \n                className={classes.root}\n            >\n                <Card \n                    className={classes.card} \n                >\n                    <CardContent>\n                        <Typography \n                            variant='h6' \n                            component='h6' \n                            align='center' \n                        >\n                            Build a GeoCities community!\n                        </Typography>\n                        <Typography \n                            component='small'\n                            className={classes.topMarg} \n                            align='center' \n                        >\n                            GeoCities allows you to build interactive communities around topics of interest. As the community builder,\n                            you will also be the community moderator. You will have the ability to block or \n                            add users to the community, alter community settings, delete posts and comments, \n                            manage the chatroom, and set community rules. You can also decide if the community \n                            posts should be publicly available or only available to members of the community. \n                            We encourage you to make the community public to enhance engagement amongst community \n                            members. You can NEVER change the name of the community once you select a name.\n                        </Typography>\n                        <ValidatorForm \n                            ref={formRef}\n                            onSubmit={e => e.preventDefault()}\n                        >\n                            <Typography \n                                variant='body1' \n                                component='p' \n                                color={(name.length < 6 || name.length > 50) ? 'error' : 'default'}\n                                style={{\n                                    marginTop: 20,\n                                }}\n                                align='center'\n                            >\n                                {name.length}/50\n                            </Typography>\n                            <TextValidator\n                                label='Community name'\n                                placeholder='Select a community name | e.g. (Colts_Fans_Community)'\n                                helperText='The community name must start with a letter and can only contain letters, numbers, and underscores. Community names must be between 6 and 50 characters long and cannot contain spaces. You can NEVER change the name of a community, so make sure you select the proper name!'\n                                value={name}\n                                onChange={e => setName(e.target.value)}\n                                validators={['nameRequired', 'nameLength', 'nameRe', 'alphaStart']}\n                                errorMessages={['Must enter a community name!', 'Community name must be between 6 and 50 characters long!', 'Name can only contain letters, numbers, and underscores, and it must start with a letter!', 'Community name must start with a letter!']}\n                                onKeyDown={preventSpaces}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant='outlined' \n                                fullWidth\n                                required \n                            />\n                            <Typography \n                                variant='body1' \n                                component='p'\n                                className={classes.toMarg}\n                                align='center'\n                                color={(title.length < 10 || title.length > 75) ? 'error' : 'default'}\n                            >\n                                {title.length}/75\n                            </Typography>\n                            <TextValidator\n                                label='Community title'\n                                placeholder='Select a title for this community (required)'\n                                value={title}\n                                onChange={e => setTitle(e.target.value)}\n                                helperText='The community title will display at the top of your community page. This can be a short description of what the community is about and must be between 10 and 75 characters.'\n                                validators={['nameRequired', 'titleLength']}\n                                errorMessages={['A title for the community is required!', 'The community title must be between 10 and 75 characters!']}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant='outlined'\n                                fullWidth\n                                required\n                            />\n                            <FormControl \n                                className={classes.topMarg} \n                                component='fieldset' \n                            >\n                                <FormLabel \n                                    component='legend' \n                                >\n                                    Select at least 1 community topic. You can choose up to 10 (required)\n                                </FormLabel>\n                                <FormGroup \n                                    column \n                                >\n                                    {communityTopics.map((topic, index) => (\n                                        <FormControlLabel \n                                            key={index.toString()}\n                                            value={topic}\n                                            onChange={handleTopicsChange}\n                                            label={topic}\n                                            labelPlacement='end' \n                                            control={\n                                                <Checkbox \n                                                    color='primary' \n                                                    checked={topics.includes(topic)}\n                                                />\n                                            }\n                                        />\n                                    ))}\n                                </FormGroup>\n                            </FormControl>\n                            <Typography \n                                className={classes.topMarg}\n                                variant='body1'\n                                component='p'\n                                color={(description.length < 10 || description.length > 300) ? 'error' : 'default'}\n                                align='center'\n                            >\n                                {description.length}/300\n                            </Typography>\n                            <TextValidator \n                                className={classes.topMarg}\n                                label='Community description'\n                                placeholder='Write a brief this community (required)'\n                                helperText='The community description states what the community is about. It must be between 10 and 300 characters!'\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                validators={['nameRequired', 'descriptionLength']}\n                                errorMessages={['Must enter a community description!', 'The community description must be between 10 and 300 characters long!']}\n                                value={description}\n                                onChange={e => setDescription(e.target.value)}\n                                variant='outlined'\n                                rows={3}\n                                multiline={true}\n                                required \n                                fullWidth\n                            />\n                            <Typography \n                                className={classes.topMarg} \n                                variant='body1'\n                                component='p' \n                            >\n                                Select a theme color for this community!\n                            </Typography>\n                            <SwatchesPicker \n                                color={communityTheme} \n                                onChange={color => setCommunityTheme(color.hex)} \n                                colors={[\n                                    ['#00143C', '#2471A3', '#3498DB'],\n                                    ['#641E16', '#C0392B', '#E74C3C'],\n                                    ['#0E6655', '#45B39D', '#58D68D'],\n                                    ['#5B2C6F', '#8E44AD', '#C39BD3'],\n                                    ['#BA4A00', '#DC7633', '#E67E22'],\n                                    ['#000000', '#34495E', '#7F8C8D'],\n                                ]}\n                            />\n                            <Typography \n                                className={classes.topMarg} \n                                variant='body1' \n                                component='p'\n                            >\n                                Select a community avatar picture!\n                            </Typography>\n                            <label \n                                className={classes.topMarg}\n                                html-for='avatar' \n                                style={{\n                                    margin: 'auto',\n                                }}\n                            >\n                                <input \n                                    className={classes.input}\n                                    id='avatar'\n                                    name='avatar' \n                                    type='file'\n                                    accept='image/jpeg, image/jpg, image/png'\n                                    onChange={handleAvatarChange}\n                                    required \n                                />\n                                <Button \n                                    component='span'\n                                    color='primary' \n                                    variant='contained' \n                                >\n                                    <CameraIcon />\n                                </Button>\n                            </label>\n                            <div \n                                style={{\n                                    margin: 'auto',\n                                    textAlign: 'center',\n                                    marginTop: 20,\n                                }}\n                            >\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    onClick={buildCommunity} \n                                    disabled={open}\n                                >\n                                    {open ? <CircularProgress color='primary' /> : 'Build community'}\n                                </Button>\n                            </div>\n                        </ValidatorForm>\n                    </CardContent>\n                </Card>\n            </Grid>\n        )\n    }\n    else {\n        //If the mainUser is null, simply return a circular progress until we load the user, or redirect to the log in page. \n        <Backdrop \n            open={true} \n        >\n            <CircularProgress \n                color='primary' \n            />\n        </Backdrop>\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(BuildCommunity);"]},"metadata":{},"sourceType":"module"}