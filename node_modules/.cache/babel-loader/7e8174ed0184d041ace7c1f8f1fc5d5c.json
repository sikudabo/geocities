{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\bobma\\\\Downloads\\\\excite-app\\\\src\\\\components\\\\GeoCitiesSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@mdi/react';\nimport { mdiAccount } from '@mdi/js';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nconst userFilterOptions = createFilterOptions({\n  matchFrom: 'any',\n  stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username\n});\nconst communityFilterOptions = createFilterOptions({\n  matchFrom: 'any',\n  stringify: option => option.name + ' ' + option.title\n});\nconst useStyles = makeStyles(() => ({\n  root: {\n    marginTop: 100\n  },\n  card: {\n    maxWidth: 450,\n    margin: 'auto'\n  }\n}));\n\nfunction GeoCitiesSearch(props) {\n  _s();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const [searchUser, setSearchUser] = useState(null);\n  const [searchCommunity, setSearchCommunity] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [val, setVal] = useState('');\n  const myUsers = ['Simeon'];\n  useEffect(() => {\n    //If the user is not logged in, return to the log in/sign up page. \n    if (props.mainUser === null) {\n      history.push('/');\n    } else {\n      return axios({\n        method: 'GET',\n        url: `http://192.168.0.9:3001/api/fetch/users/${props.mainUser.uniqueUserId}`\n      }).then(response => {\n        if (response.data.users.length > 0) {\n          setUsers(response.data.users);\n          setCommunities(response.data.communities); //Update the profile theme once the users return.\n\n          props.dispatch({\n            type: 'ThemeChange',\n            payload: props.mainUser.profileTheme\n          });\n        } else {\n          swal('Uh Oh!', 'We could not find any users to search.', 'error');\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error getting the data to search from the server! Please try again.', 'error');\n        history.goBack(1);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: classes.root,\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.card,\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h6\",\n          align: \"center\",\n          style: {\n            marginBottom: 20\n          },\n          children: \"Search for users or communities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), users.length > 0 && /*#__PURE__*/_jsxDEV(Autocomplete, {\n          value: searchUser,\n          filterOptions: userFilterOptions,\n          onChange: (e, newVal) => setSearchUser(newVal),\n          options: users,\n          getOptionLabel: option => option.firstName + ' ' + option.lastName,\n          renderOption: option => /*#__PURE__*/_jsxDEV(ListItem, {\n            alignItems: \"flex-start\",\n            style: {\n              cursor: 'pointer'\n            },\n            onClick: () => history.push(`/geouser/${option.uniqueUserId}`),\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                src: `http://192.168.0.9:3001/api/get-photo/${option.avatar}`,\n                alt: `${option.username}`,\n                title: `${option.username}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                component: \"h6\",\n                children: option.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 45\n              }, this),\n              secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"small\",\n                color: \"textSecondary\",\n                children: [option.firstName, \" \", option.lastName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 33\n          }, this),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            color: \"primary\",\n            variant: \"outlined\",\n            label: \"Search users\",\n            placeholder: \"Search users\",\n            helperText: \"Search for a GeoCities user\",\n            InputLabelProps: {\n              shrink: true\n            },\n            fullWidth: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), communities.length > 0 && /*#__PURE__*/_jsxDEV(Autocomplete, {\n          value: searchCommunity,\n          onChange: (e, newVal) => setSearchCommunity(newVal),\n          options: communities,\n          getOptionSelected: (option, value) => option.name === value.name || option.title === value.title || option.topics.includes(value),\n          getOptionLabel: option => option.name,\n          renderOption: option => /*#__PURE__*/_jsxDEV(ListItem, {\n            alignItems: \"flex-start\",\n            style: {\n              cursor: 'pointer'\n            },\n            onClick: () => history.push(`geocities/community/${option.name}`),\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                src: `http://192.168.0.9:3001/api/get-photo/${option.avatar}`,\n                alt: `${option.name} avatar`,\n                title: `${option.name} avatar`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                zeroMinWidth: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  component: \"h6\",\n                  noWrap: true,\n                  children: option.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 45\n              }, this),\n              secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"small\",\n                color: \"textSecondary\",\n                children: option.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 33\n          }, this),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            color: \"primary\",\n            variant: \"outlined\",\n            label: \"Search communities\",\n            placeholder: \"Search communities\",\n            helperText: \"Search for a GeoCities community\",\n            InputLabelProps: {\n              shrink: true\n            },\n            fullWidth: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoCitiesSearch, \"a8gl5i4M5SSDvAheB3Njm86idVE=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = GeoCitiesSearch;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    theme: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(GeoCitiesSearch);\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoCitiesSearch\");","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/GeoCitiesSearch.js"],"names":["React","useState","useEffect","Grid","Typography","Icon","mdiAccount","TextField","InputAdornment","Card","CardContent","Autocomplete","createFilterOptions","makeStyles","connect","useHistory","ListItem","ListItemAvatar","Avatar","ListItemText","axios","swal","userFilterOptions","matchFrom","stringify","option","firstName","lastName","username","communityFilterOptions","name","title","useStyles","root","marginTop","card","maxWidth","margin","GeoCitiesSearch","props","classes","history","searchUser","setSearchUser","searchCommunity","setSearchCommunity","users","setUsers","communities","setCommunities","val","setVal","myUsers","mainUser","push","method","url","uniqueUserId","then","response","data","length","dispatch","type","payload","profileTheme","catch","err","console","log","message","goBack","marginBottom","e","newVal","cursor","avatar","params","shrink","value","topics","includes","mapStateToProps","state","userReducer","user","theme","userThemeReducer","primary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Icon from '@mdi/react';\r\nimport { mdiAccount } from '@mdi/js';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n\r\nconst userFilterOptions = createFilterOptions({\r\n    matchFrom: 'any',\r\n    stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username,\r\n});\r\n\r\nconst communityFilterOptions = createFilterOptions({\r\n    matchFrom: 'any',\r\n    stringify: option => option.name + ' ' + option.title,\r\n});\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        marginTop: 100,\r\n    },\r\n    card: {\r\n        maxWidth: 450,\r\n        margin: 'auto',\r\n    }\r\n}));\r\n\r\nfunction GeoCitiesSearch(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [searchUser, setSearchUser] = useState(null);\r\n    const [searchCommunity, setSearchCommunity] = useState(null);\r\n    const [users, setUsers] = useState([]);\r\n    const [communities, setCommunities] = useState([]);\r\n    const [val, setVal] = useState('');\r\n    const myUsers = [\r\n        'Simeon',\r\n    ]\r\n\r\n    useEffect(() => {\r\n        //If the user is not logged in, return to the log in/sign up page. \r\n        if(props.mainUser === null) {\r\n            history.push('/');\r\n        }\r\n        else {\r\n            return axios({\r\n                method: 'GET',\r\n                url: `http://192.168.0.9:3001/api/fetch/users/${props.mainUser.uniqueUserId}`,\r\n            }).then(response => {\r\n                if(response.data.users.length > 0) {\r\n                    setUsers(response.data.users);\r\n                    setCommunities(response.data.communities);\r\n                    //Update the profile theme once the users return.\r\n                    props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme});\r\n                }\r\n                else {\r\n                    swal(\r\n                        'Uh Oh!',\r\n                        'We could not find any users to search.',\r\n                        'error',\r\n                    );\r\n                }\r\n            }).catch(err => {\r\n                console.log(err.message);\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error getting the data to search from the server! Please try again.',\r\n                    'error',\r\n                );\r\n                history.goBack(1);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Grid \r\n            className={classes.root} \r\n            container \r\n        >\r\n            <Card \r\n                className={classes.card} \r\n            >\r\n                <CardContent>\r\n                    <Typography \r\n                        variant='h6' \r\n                        component='h6' \r\n                        align='center'\r\n                        style={{\r\n                            marginBottom: 20,\r\n                        }}\r\n                    >\r\n                        Search for users or communities \r\n                    </Typography>\r\n                    {users.length > 0 &&\r\n                        <Autocomplete \r\n                            value={searchUser}\r\n                            filterOptions={userFilterOptions}\r\n                            onChange={(e, newVal) => setSearchUser(newVal)}\r\n                            options={users}\r\n                            getOptionLabel={option => option.firstName + ' ' + option.lastName}\r\n                            renderOption={option => (\r\n                                <ListItem \r\n                                    alignItems='flex-start' \r\n                                    style={{\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={() => history.push(`/geouser/${option.uniqueUserId}`)}\r\n                                >\r\n                                    <ListItemAvatar>\r\n                                        <Avatar \r\n                                            src={`http://192.168.0.9:3001/api/get-photo/${option.avatar}`}\r\n                                            alt={`${option.username}`}\r\n                                            title={`${option.username}`} \r\n                                        />\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText \r\n                                        primary={\r\n                                            <Typography \r\n                                                variant='h6' \r\n                                                component='h6' \r\n                                            >\r\n                                                {option.username}\r\n                                            </Typography>\r\n                                        }\r\n                                        secondary={\r\n                                            <Typography \r\n                                                component='small'\r\n                                                color='textSecondary' \r\n                                            >\r\n                                                {option.firstName} {option.lastName}\r\n                                            </Typography>\r\n                                        }\r\n                                    />\r\n                                </ListItem>\r\n                            )}\r\n                            renderInput={params => (\r\n                                <TextField \r\n                                    {...params} \r\n                                    color='primary'\r\n                                    variant='outlined' \r\n                                    label='Search users' \r\n                                    placeholder='Search users'\r\n                                    helperText='Search for a GeoCities user'\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    fullWidth \r\n                                    required \r\n                                />\r\n                            )}\r\n                        />\r\n                    }\r\n                    <div \r\n                        style={{\r\n                            marginTop: 20,\r\n                        }}\r\n                    />\r\n                    {communities.length > 0 &&\r\n                        <Autocomplete \r\n                            value={searchCommunity}\r\n                            onChange={(e, newVal) => setSearchCommunity(newVal)}\r\n                            options={communities}\r\n                            getOptionSelected={(option, value) => option.name === value.name || option.title === value.title || option.topics.includes(value)}\r\n                            getOptionLabel={option => option.name}\r\n                            renderOption={option => (\r\n                                <ListItem \r\n                                    alignItems='flex-start' \r\n                                    style={{\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    onClick={() => history.push(`geocities/community/${option.name}`)}\r\n                                >\r\n                                    <ListItemAvatar>\r\n                                        <Avatar \r\n                                            src={`http://192.168.0.9:3001/api/get-photo/${option.avatar}`}\r\n                                            alt={`${option.name} avatar`}\r\n                                            title={`${option.name} avatar`} \r\n                                        />\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText \r\n                                        primary={\r\n                                            <Grid \r\n                                                item \r\n                                                xs={12} \r\n                                                zeroMinWidth \r\n                                            >\r\n                                                <Typography \r\n                                                    variant='h6' \r\n                                                    component='h6' \r\n                                                    noWrap \r\n                                                >\r\n                                                    {option.name}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        }\r\n                                        secondary={\r\n                                            <Typography \r\n                                                    component='small'\r\n                                                    color='textSecondary'\r\n                                                >\r\n                                                    {option.title}\r\n                                            </Typography>\r\n                                        }\r\n                                    />\r\n                                </ListItem>\r\n                            )}\r\n                            renderInput={params => (\r\n                                <TextField \r\n                                    {...params} \r\n                                    color='primary'\r\n                                    variant='outlined' \r\n                                    label='Search communities' \r\n                                    placeholder='Search communities'\r\n                                    helperText='Search for a GeoCities community'\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    fullWidth \r\n                                    required \r\n                                />\r\n                            )}\r\n                        />\r\n                    }\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        mainUser: state.userReducer.user,\r\n        theme: state.userThemeReducer.primary,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(GeoCitiesSearch);\r\n\r\n"]},"metadata":{},"sourceType":"module"}