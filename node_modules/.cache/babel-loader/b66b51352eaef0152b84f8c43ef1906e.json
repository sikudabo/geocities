{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport swal from 'sweetalert';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useSocket from 'use-socket.io-client';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport Notifications, { notify } from 'react-notify-toast'; //Module that adds notifications when a user enters the\n\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    maxWidth: 600,\n    margin: 'auto'\n  },\n  avatarLg: {\n    height: 168,\n    width: 168,\n    margin: 'auto'\n  }\n}));\n\nfunction CommunityChat(props) {\n  _s();\n\n  const classes = useStyles(); //Custom component classes. \n\n  const [community, setCommunity] = useState(null); //Variable and setter for the community we are in.\n\n  const [socket] = useSocket('http://10.162.4.11:3001/'); //useSocket hook to maintain a connection.\n\n  const [msg, setMsg] = useState(''); //The message that could be sent to the server for another chat. \n\n  const params = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    if (props.mainUser) {\n      return axios({\n        method: 'GET',\n        url: `http://10.162.4.11:3001/api/fetch/community/${params.communityName}`\n      }).then(response => {\n        let inCommunity = _.find(response.data.community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId);\n\n        if (response.data.community === null) {\n          swal('Uh Oh!', 'We could not find that communities chatroom!', 'error');\n          history.goBack(1);\n        } else if (_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n          swal('Uh Oh!', 'You are blocked from this community!', 'error');\n          history.goBack(1);\n        } else if (!inCommunity) {\n          swal('Uh Oh', 'You must be a member of this community to join the community chatroom', 'error');\n          history.goBack(1);\n        } else {\n          setCommunity(response.data.community); //Set the community in the local state variable to this community. \n\n          props.dispatch({\n            type: 'ThemeChange',\n            payload: response.data.community.communityTheme\n          }); //Change the theme to match the community theme.\n          //Below, we must connect the socket. \n\n          socket.connect();\n          console.log(socket); //Below we will get the socket to join the room\n          //We emit the joinRoom action and send the username and room name to the server.\n\n          socket.emit('joinRoom', {\n            username: props.mainUser.username,\n            room: response.data.community.name\n          }); //Below add the listener for IF the user joins the room. \n\n          socket.on('userJoined', data => {\n            let message = data.username + ' Joined the chat!';\n            notify.show(message);\n          });\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error joining the chatroom!', 'error');\n        history.goBack(1);\n      });\n    } else {\n      swal('Uh Oh!', 'You must be logged in to join a chatroom!', 'error');\n      history.goBack(1);\n    }\n  }, []);\n\n  if (props.mainUser !== null && community !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        marginTop: 100\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Notifications, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n          variant: \"square\",\n          className: classes.avatarLg,\n          alt: `${community.name} avatar`,\n          title: `${community.name} avatar`,\n          src: `http://10.162.4.11:3001/api/get-photo/${community.avatar}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          component: \"small\",\n          align: \"center\",\n          style: {\n            fontWeight: 'bold',\n            textAlign: 'center',\n            margin: 'auto'\n          },\n          children: [community.chatRoom.community, \" chat\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(CommunityChat, \"e9bA3kK7ZFTEckdh1ED1H9bRVuo=\", false, function () {\n  return [useStyles, useSocket, useParams, useHistory];\n});\n\n_c = CommunityChat;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(CommunityChat);\n\nvar _c;\n\n$RefreshReg$(_c, \"CommunityChat\");","map":{"version":3,"sources":["/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js"],"names":["React","useState","useEffect","useRef","Grid","Typography","Paper","Avatar","Backdrop","CircularProgress","List","ListItem","ListItemAvatar","ListItemText","swal","Divider","TextField","Button","makeStyles","useSocket","connect","useHistory","useParams","axios","_","Notifications","notify","useStyles","listItem","maxWidth","margin","avatarLg","height","width","CommunityChat","props","classes","community","setCommunity","socket","msg","setMsg","params","history","mainUser","method","url","communityName","then","response","inCommunity","find","data","members","member","uniqueUserId","goBack","blockList","person","dispatch","type","payload","communityTheme","console","log","emit","username","room","name","on","message","show","catch","err","marginTop","textAlign","avatar","fontWeight","chatRoom","mapStateToProps","state","userReducer","user","primary","userThemeReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport swal from 'sweetalert';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useSocket from 'use-socket.io-client';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport Notifications, {notify} from 'react-notify-toast'; //Module that adds notifications when a user enters the\n\nconst useStyles = makeStyles(() => ({\n    listItem: {\n        maxWidth: 600,\n        margin: 'auto',\n    },\n    avatarLg: {\n        height: 168,\n        width: 168,\n        margin: 'auto',\n    }\n}));\n\nfunction CommunityChat(props) {\n    const classes = useStyles(); //Custom component classes. \n    const [community, setCommunity]= useState(null); //Variable and setter for the community we are in.\n    const [socket] = useSocket('http://10.162.4.11:3001/'); //useSocket hook to maintain a connection.\n    const [msg, setMsg] = useState(''); //The message that could be sent to the server for another chat. \n    const params = useParams();\n    const history = useHistory();\n\n    useEffect(() => {\n        if(props.mainUser) {\n            return axios({\n                method: 'GET',\n                url: `http://10.162.4.11:3001/api/fetch/community/${params.communityName}`,\n            }).then(response => {\n                let inCommunity = _.find(response.data.community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId);\n                if(response.data.community === null) {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find that communities chatroom!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else if(_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n                    swal(\n                        'Uh Oh!',\n                        'You are blocked from this community!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else if(!inCommunity){\n                    swal(\n                        'Uh Oh',\n                        'You must be a member of this community to join the community chatroom',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else {\n                    setCommunity(response.data.community); //Set the community in the local state variable to this community. \n                    props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Change the theme to match the community theme.\n                    \n                    //Below, we must connect the socket. \n                    socket.connect();\n                    console.log(socket);\n\n                    //Below we will get the socket to join the room\n                    //We emit the joinRoom action and send the username and room name to the server.\n                    socket.emit('joinRoom', {\n                        username: props.mainUser.username,\n                        room: response.data.community.name,\n                    });\n\n                    //Below add the listener for IF the user joins the room. \n                    socket.on('userJoined', data => {\n                        let message = data.username + ' Joined the chat!';\n                        notify.show(message);\n                    });\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error joining the chatroom!',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n        else {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to join a chatroom!',\n                'error',\n            );\n            history.goBack(1);\n        }\n\n    }, []);\n\n    if(props.mainUser !== null && community !== null) {\n        return (\n            <Grid \n                container \n                style={{\n                    marginTop: 100,\n                }}\n            >\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    <Notifications />\n                    <Avatar \n                        variant='square'\n                        className={classes.avatarLg}\n                        alt={`${community.name} avatar`}\n                        title={`${community.name} avatar`}\n                        src={`http://10.162.4.11:3001/api/get-photo/${community.avatar}`}\n                    />\n                    <Typography \n                        variant='body1'\n                        component='small'\n                        align='center'\n                        style={{\n                            fontWeight: 'bold',\n                            textAlign: 'center',\n                            margin: 'auto',\n                        }}\n                    >\n                        {community.chatRoom.community} chat\n                    </Typography>\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        return (\n            <Backdrop\n                open={true} \n            >\n                <CircularProgress \n                    color='primary'\n                />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(CommunityChat);"]},"metadata":{},"sourceType":"module"}