{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport swal from 'sweetalert';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useSocket from 'use-socket.io-client';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport { NotificationContainer, NotificationManager } from 'react-notifications'; //A module that is more similar to vue-notifications to notify a user when someone has joined or left the chatroom.\n\nimport './react-notifications/dist/react-notifications.css';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiSend } from '@mdi/js';\nconst useStyles = makeStyles(() => ({\n  listItem: {\n    maxWidth: 600,\n    margin: 'auto'\n  },\n  list: {\n    maxWidth: 600,\n    margin: 'auto'\n  },\n  avatarLg: {\n    height: 168,\n    width: 168,\n    margin: 'auto'\n  }\n}));\n\nfunction CommunityChat(props) {\n  _s();\n\n  const classes = useStyles(); //Custom component classes. \n\n  const [community, setCommunity] = useState(null); //Variable and setter for the community we are in.\n\n  const [socket] = useSocket('http://10.162.4.11:3001/'); //useSocket hook to maintain a connection.\n\n  const [chatMsg, setChatMsg] = useState(''); //The message that could be sent to the server for another chat. \n\n  const params = useParams();\n  const history = useHistory();\n  const gridRef = useRef(null);\n  useEffect(() => {\n    if (props.mainUser) {\n      return axios({\n        method: 'GET',\n        url: `http://10.162.4.11:3001/api/fetch/community/${params.communityName}`\n      }).then(response => {\n        let inCommunity = _.find(response.data.community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId);\n\n        if (response.data.community === null) {\n          swal('Uh Oh!', 'We could not find that communities chatroom!', 'error');\n          history.goBack(1);\n        } else if (_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n          swal('Uh Oh!', 'You are blocked from this community!', 'error');\n          history.goBack(1);\n        } else if (!inCommunity) {\n          swal('Uh Oh', 'You must be a member of this community to join the community chatroom', 'error');\n          history.goBack(1);\n        } else {\n          setCommunity(response.data.community); //Set the community in the local state variable to this community. \n\n          props.dispatch({\n            type: 'ThemeChange',\n            payload: response.data.community.communityTheme\n          }); //Change the theme to match the community theme.\n          //Below, we must connect the socket. \n\n          socket.connect(); //Below, immediately scroll to the botom of the messages list. \n\n          if (gridRef.current) {\n            window.scrollTo({\n              behavior: 'smooth',\n              top: gridRef.current.offsetTop\n            });\n          } //Below we will get the socket to join the room\n          //We emit the joinRoom action and send the username and room name to the server.\n\n\n          socket.emit('joinRoom', {\n            username: props.mainUser.username,\n            room: response.data.community.name\n          }); //Below add the listener for IF the user joins the room. \n\n          socket.on('userJoined', data => {\n            let message = data.username + ' Joined the chat!';\n            NotificationManager.info(message, 'New user joined', 5000);\n          }); //Below will handle a new message being sent to the community chatroom. \n\n          socket.on('newMsg', data => {\n            setCommunity(data);\n\n            if (gridRef.current) {\n              window.scrollTo({\n                behavior: 'smooth',\n                top: gridRef.current.offsetTop\n              });\n            }\n          });\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error joining the chatroom!', 'error');\n        history.goBack(1);\n      });\n    } else {\n      swal('Uh Oh!', 'You must be logged in to join a chatroom!', 'error');\n      history.goBack(1);\n    }\n  }, []);\n\n  function handleUserPush(uniqueUserId) {\n    //Route that handles pushing to a new user when the avatar is clicked within the chat messages. \n    history.push(`/geouser/${uniqueUserId}`);\n    history.go(0);\n  }\n\n  function timeDifference(date2, dateString) {\n    //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n    let date1 = Date.now();\n    let difference = date1 - date2;\n    let daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);\n    let hoursDifference = Math.floor(difference / 1000 / 60 / 60);\n    let minutesDifference = Math.floor(difference / 1000 / 60);\n    let secondsDifference = Math.floor(difference / 1000);\n\n    if (daysDifference > 0) {\n      return dateString;\n    } else if (hoursDifference > 0 && hoursDifference < 23) {\n      return `${hoursDifference} hr ago`;\n    } else if (minutesDifference > 0 && minutesDifference < 60) {\n      return `${minutesDifference} min ago`;\n    } else if (minutesDifference === 0) {\n      return `${secondsDifference} secs ago`;\n    } else {\n      return dateString;\n    }\n  }\n\n  function sendMsg() {\n    //This function will be responsible for sending a chat message to the server socket. \n    if (chatMsg.trim() === '') {\n      swal('Uh Oh!', 'You must enter a message to send to the community chatroom!', 'error');\n      return false;\n    } else {\n      let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n      let date = new Date();\n      let month = months[date.getMonth()];\n      let year = date.getFullYear();\n      let day = date.getDate();\n      let dateString = `${month} ${day}, ${year}`;\n      let data = {\n        username: props.mainUser.username,\n        uniqueUserId: props.mainUser.uniqueUserId,\n        utcTime: new Date().getTime(),\n        dateString: dateString,\n        uniqueMessageId: Date.now() + dateString + props.mainUser.username + props.mainUser.uniqueUserId,\n        community: community.name,\n        room: community.name + 'chatroom',\n        text: chatMsg\n      };\n      socket.emit('sendMsg', data);\n      setChatMsg('');\n    }\n  }\n\n  if (props.mainUser !== null && community !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        marginTop: 100\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(NotificationContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          variant: \"square\",\n          className: classes.avatarLg,\n          alt: `${community.name} avatar`,\n          title: `${community.name} avatar`,\n          src: `http://10.162.4.11:3001/api/get-photo/${community.avatar}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          component: \"small\",\n          align: \"center\",\n          style: {\n            fontWeight: 'bold',\n            textAlign: 'center',\n            margin: 'auto'\n          },\n          children: [community.chatRoom.community, \" chat\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          marginTop: 50\n        },\n        children: [community.chatRoom.messages.length < 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'centter'\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"No messages!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 25\n        }, this), community.chatRoom.messages.length > 0 && /*#__PURE__*/_jsxDEV(List, {\n          className: classes.list,\n          children: community.chatRoom.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n            className: classes.listItem,\n            alignItems: \"flex-start\",\n            children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                src: `http://10.162.4.11:3001/api/get/avatar/by/id/${msg.uniqueUserId}`,\n                title: `${msg.username}`,\n                alt: `${msg.username}`,\n                onClick: e => handleUserPush(msg.uniqueUserId),\n                style: {\n                  cursor: 'pointer'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  component: \"h6\",\n                  children: msg.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  component: \"span\",\n                  color: \"textSecondary\",\n                  children: timeDifference(msg.utcTime, msg.dateString)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 45\n              }, this),\n              secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                component: \"p\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 37\n            }, this)]\n          }, index.toString(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: gridRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        style: {\n          marginTop: 10\n        },\n        ref: gridRef,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            value: chatMsg,\n            onChange: e => setChatMsg(e.target.value),\n            variant: \"outlined\",\n            color: \"primary\",\n            label: \"Chat message\",\n            placeholder: \"Send a message...\",\n            InputLabelProps: {\n              shrink: true\n            },\n            InputProps: {\n              endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  \"aria-label\": \"Message send button\",\n                  color: \"primary\",\n                  onClick: sendMsg,\n                  children: /*#__PURE__*/_jsxDEV(Icon, {\n                    path: mdiSend,\n                    size: 2\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 364,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 35\n              }, this)\n            },\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(CommunityChat, \"mVW6dlbNc4zAmXLZxxQQXSKKO4I=\", false, function () {\n  return [useStyles, useSocket, useParams, useHistory];\n});\n\n_c = CommunityChat;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(CommunityChat);\n\nvar _c;\n\n$RefreshReg$(_c, \"CommunityChat\");","map":{"version":3,"sources":["/Users/simeonikudabo/Downloads/geocities/src/components/CommunityChat.js"],"names":["React","useState","useEffect","useRef","Grid","Typography","Paper","Avatar","Backdrop","CircularProgress","List","ListItem","ListItemAvatar","ListItemText","swal","Divider","TextField","Button","makeStyles","useSocket","connect","useHistory","useParams","axios","_","NotificationContainer","NotificationManager","InputAdornment","IconButton","Icon","mdiSend","useStyles","listItem","maxWidth","margin","list","avatarLg","height","width","CommunityChat","props","classes","community","setCommunity","socket","chatMsg","setChatMsg","params","history","gridRef","mainUser","method","url","communityName","then","response","inCommunity","find","data","members","member","uniqueUserId","goBack","blockList","person","dispatch","type","payload","communityTheme","current","window","scrollTo","behavior","top","offsetTop","emit","username","room","name","on","message","info","catch","err","console","log","handleUserPush","push","go","timeDifference","date2","dateString","date1","Date","now","difference","daysDifference","Math","floor","hoursDifference","minutesDifference","secondsDifference","sendMsg","trim","months","date","month","getMonth","year","getFullYear","day","getDate","utcTime","getTime","uniqueMessageId","text","marginTop","textAlign","avatar","fontWeight","chatRoom","messages","length","map","msg","index","e","cursor","toString","target","value","shrink","endAdornment","mapStateToProps","state","userReducer","user","primary","userThemeReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport swal from 'sweetalert';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useSocket from 'use-socket.io-client';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport {NotificationContainer, NotificationManager} from 'react-notifications'; //A module that is more similar to vue-notifications to notify a user when someone has joined or left the chatroom.\nimport './react-notifications/dist/react-notifications.css';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiSend } from '@mdi/js';\n\nconst useStyles = makeStyles(() => ({\n    listItem: {\n        maxWidth: 600,\n        margin: 'auto',\n    },\n    list: {\n        maxWidth: 600,\n        margin: 'auto',\n    },\n    avatarLg: {\n        height: 168,\n        width: 168,\n        margin: 'auto',\n    },\n}));\n\nfunction CommunityChat(props) {\n    const classes = useStyles(); //Custom component classes. \n    const [community, setCommunity]= useState(null); //Variable and setter for the community we are in.\n    const [socket] = useSocket('http://10.162.4.11:3001/'); //useSocket hook to maintain a connection.\n    const [chatMsg, setChatMsg] = useState(''); //The message that could be sent to the server for another chat. \n    const params = useParams();\n    const history = useHistory();\n    const gridRef = useRef(null);\n\n    useEffect(() => {\n        if(props.mainUser) {\n            return axios({\n                method: 'GET',\n                url: `http://10.162.4.11:3001/api/fetch/community/${params.communityName}`,\n            }).then(response => {\n                let inCommunity = _.find(response.data.community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId);\n                if(response.data.community === null) {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find that communities chatroom!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else if(_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n                    swal(\n                        'Uh Oh!',\n                        'You are blocked from this community!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else if(!inCommunity){\n                    swal(\n                        'Uh Oh',\n                        'You must be a member of this community to join the community chatroom',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else {\n                    setCommunity(response.data.community); //Set the community in the local state variable to this community. \n                    props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Change the theme to match the community theme.\n                    \n                    //Below, we must connect the socket. \n                    socket.connect();\n                    \n                    //Below, immediately scroll to the botom of the messages list. \n                    if(gridRef.current) {\n                        window.scrollTo({\n                            behavior: 'smooth',\n                            top: gridRef.current.offsetTop,\n                        });\n                    }\n\n                    //Below we will get the socket to join the room\n                    //We emit the joinRoom action and send the username and room name to the server.\n                    socket.emit('joinRoom', {\n                        username: props.mainUser.username,\n                        room: response.data.community.name,\n                    });\n\n                    //Below add the listener for IF the user joins the room. \n                    socket.on('userJoined', data => {\n                        let message = data.username + ' Joined the chat!';\n                        NotificationManager.info(message, 'New user joined', 5000);\n                    });\n\n                    //Below will handle a new message being sent to the community chatroom. \n                    socket.on('newMsg', data => {\n                        setCommunity(data);\n                        if(gridRef.current) {\n                            window.scrollTo({\n                                behavior: 'smooth',\n                                top: gridRef.current.offsetTop,\n                            });\n                        }\n                    });\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error joining the chatroom!',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n        else {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to join a chatroom!',\n                'error',\n            );\n            history.goBack(1);\n        }\n\n    }, []);\n\n    function handleUserPush(uniqueUserId) {\n        //Route that handles pushing to a new user when the avatar is clicked within the chat messages. \n        history.push(`/geouser/${uniqueUserId}`);\n        history.go(0);\n    }\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function sendMsg() {\n        //This function will be responsible for sending a chat message to the server socket. \n        if(chatMsg.trim() === '') {\n            swal(\n                'Uh Oh!',\n                'You must enter a message to send to the community chatroom!',\n                'error',\n            );\n            return false;\n        }\n        else {\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let date = new Date();\n            let month = months[date.getMonth()];\n            let year = date.getFullYear();\n            let day = date.getDate();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = {\n                username: props.mainUser.username,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                utcTime: new Date().getTime(),\n                dateString: dateString,\n                uniqueMessageId: Date.now() + dateString + props.mainUser.username + props.mainUser.uniqueUserId,\n                community: community.name,\n                room: community.name + 'chatroom',\n                text: chatMsg,\n            };\n\n            socket.emit('sendMsg', data);\n            setChatMsg('');\n        }\n    }\n\n    if(props.mainUser !== null && community !== null) {\n        return (\n            <Grid \n                container \n                style={{\n                    marginTop: 100,\n                }}\n            >\n                <Grid \n                    item \n                    xs={12} \n                >\n                    <NotificationContainer />\n                </Grid>\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    <Avatar \n                        variant='square'\n                        className={classes.avatarLg}\n                        alt={`${community.name} avatar`}\n                        title={`${community.name} avatar`}\n                        src={`http://10.162.4.11:3001/api/get-photo/${community.avatar}`}\n                    />\n                    <Typography \n                        variant='body1'\n                        component='small'\n                        align='center'\n                        style={{\n                            fontWeight: 'bold',\n                            textAlign: 'center',\n                            margin: 'auto',\n                        }}\n                    >\n                        {community.chatRoom.community} chat\n                    </Typography>\n                </Grid>\n                {/* This is where the Grid should be for the messages section. This will be above the Grid for the TextField and Button to send messages */}\n                <Grid \n                    item \n                    xs={12} \n                    style={{\n                        marginTop: 50,\n                    }}\n                >\n                    {community.chatRoom.messages.length < 1 &&\n                        <div \n                            style={{\n                                textAlign: 'centter',\n                            }}\n                        >\n                            <Typography \n                                variant='h6'\n                                component='h6'\n                                align='center' \n                            >\n                                No messages!\n                            </Typography>\n                        </div>\n                    }\n                    {community.chatRoom.messages.length > 0 &&\n                        <List \n                            className={classes.list}\n                        >\n                            {community.chatRoom.messages.map((msg, index) => (\n                                <ListItem \n                                    className={classes.listItem} \n                                    alignItems='flex-start'\n                                    key={index.toString()}\n                                >\n                                    <ListItemAvatar>\n                                        <Avatar \n                                            src={`http://10.162.4.11:3001/api/get/avatar/by/id/${msg.uniqueUserId}`}\n                                            title={`${msg.username}`}\n                                            alt={`${msg.username}`} \n                                            onClick={e => handleUserPush(msg.uniqueUserId)}\n                                            style={{\n                                                cursor: 'pointer',\n                                            }}\n                                        />\n                                    </ListItemAvatar>\n                                    <ListItemText \n                                        primary={\n                                            <div>\n                                                <Typography \n                                                    variant='h6' \n                                                    component='h6' \n                                                >\n                                                    {msg.username}\n                                                </Typography>\n                                                <Typography \n                                                    variant='subtitle1' \n                                                    component='span' \n                                                    color='textSecondary'\n                                                >\n                                                    {timeDifference(msg.utcTime, msg.dateString)}\n                                                </Typography>\n                                            </div>\n                                        }\n                                        secondary={\n                                            <Typography \n                                                variant='body2' \n                                                component='p' \n                                            >\n                                                {msg.text}\n                                            </Typography>\n                                        }\n                                    />\n                                </ListItem>\n                            ))}\n                        </List>\n                    }\n                </Grid>\n                {/* This Div will serve as a dummy to scroll to */} \n                <div \n                    ref={gridRef}\n                >\n\n                </div>\n                {/* This is the end of the Grid for the messages section. Now we need a Grid or a div for the TextField and Button to send messages */}\n                <Grid \n                    item\n                    container \n                    xs={12}\n                    style={{\n                        marginTop: 10,\n                    }}\n                    ref={gridRef}\n                >\n                    <Grid \n                        item \n                        xs={12}\n                    >\n                        <TextField \n                            value={chatMsg}\n                            onChange={e => setChatMsg(e.target.value)}\n                            variant='outlined'\n                            color='primary' \n                            label='Chat message'\n                            placeholder='Send a message...'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                endAdornment: (\n                                  <InputAdornment position='end'>\n                                    <IconButton\n                                      aria-label='Message send button'\n                                      color='primary'\n                                      onClick={sendMsg}\n                                    >\n                                        <Icon \n                                            path={mdiSend}\n                                            size={2}\n                                        />\n                                    </IconButton>\n                                  </InputAdornment>\n                                ),\n                              }}\n                            fullWidth\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        return (\n            <Backdrop\n                open={true} \n            >\n                <CircularProgress \n                    color='primary'\n                />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(CommunityChat);"]},"metadata":{},"sourceType":"module"}