{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\bobma\\\\Downloads\\\\excite-app\\\\src\\\\components\\\\GeoUserPostsCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Icon from '@mdi/react';\nimport { mdiThumbUp, mdiThumbUpOutline, mdiComment, mdiCommentOutline, mdiChevronDown, mdiChevronUp, mdiDelete, mdiSend, mdiDotsVertical } from '@mdi/js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Plyr from 'react-plyr';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: 600,\n    margin: 'auto',\n    padding: theme.spacing(2),\n    backgroundColor: theme.palette.background.paper\n  },\n  media: {\n    height: 0,\n    padding: '56.25%'\n  },\n  image: {\n    maxWidth: '100%',\n    maxHeight: '100%'\n  }\n}));\n\nfunction GeoUserPostsCard(props) {\n  _s();\n\n  const classes = useStyles(); //Custom styles for the component\n\n  const formRef = useRef(null); //Ref for the validator form\n\n  const [expanded, setExpanded] = useState(false); //This expands the comments. \n\n  const [comment, setComment] = useState(''); //This variable holds the comment.\n\n  const [commentSending, setCommentSending] = useState(false); //This variable will disable the comment button.\n\n  const [likeSending, setLikeSending] = useState(false); //This variable will disable the like button.\n\n  const [commentDeleting, setCommentDeleting] = useState(false); //This variable and setter will handle disabling the delete button while a comment is being deleted.\n\n  const [commentLiking, setCommentLiking] = useState(false); //This variable and setter will handle disabling the comment like Button when the comment is being liked or unliked.\n\n  const [deletingPost, setDeletingPost] = useState(false); //Variable and setter that will disable the delete button on a post while the server is deleting the post.\n\n  const [anchorEl, setAnchorEl] = useState(null); //The anchor element for a menu item within a Card Post.\n\n  useEffect(() => {\n    //Add the validation rule so that a comment is not empty. \n    ValidatorForm.addValidationRule('notEmpty', v => {\n      if (v.length < 1) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }, []);\n\n  function timeDifference(date2, dateString) {\n    //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\n    let date1 = Date.now();\n    let difference = date1 - date2;\n    let daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);\n    let hoursDifference = Math.floor(difference / 1000 / 60 / 60);\n    let minutesDifference = Math.floor(difference / 1000 / 60);\n    let secondsDifference = Math.floor(difference / 1000);\n\n    if (daysDifference > 0) {\n      return dateString;\n    } else if (hoursDifference > 0 && hoursDifference < 23) {\n      return `${hoursDifference} hr ago`;\n    } else if (minutesDifference > 0 && minutesDifference < 60) {\n      return `${minutesDifference} min ago`;\n    } else if (minutesDifference === 0) {\n      return `${secondsDifference} secs ago`;\n    } else {\n      return dateString;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    id: `${props.post.uniquePostId}`,\n    children: /*#__PURE__*/_jsxDEV(CardHeader, {\n      title: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        component: \"h6\",\n        children: props.post.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this),\n      subheader: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        component: \"span\",\n        color: \"textSecondary\",\n        children: timeDifference(props.post.utcTime, props.post.dateString)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this),\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        src: `http://192.168.0.9:3001/api/get-photo/${props.post.uniqueUserId}`,\n        title: `${props.post.username}`,\n        alt: `${props.post.username}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this),\n      action: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            path: mdiDotsVertical,\n            size: 1,\n            title: \"Share button\",\n            \"aria-label\": \"Share button\",\n            onClick: changeAnchorEl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Menu, {\n          open: Boolean(anchorEl),\n          anchorEl: anchorEl,\n          keepMounted: true,\n          onClose: handleMenuClose,\n          children: /*#__PURE__*/_jsxDEV(MenuItem, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Post link\",\n              color: \"primary\",\n              value: `http://192.168.0.9:3000/geouser#${props.post.uniquePostId}`,\n              readonly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoUserPostsCard, \"ch1QXQXNtbJPM1ZSWC9q75AciE4=\", false, function () {\n  return [useStyles];\n});\n\n_c = GeoUserPostsCard;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    posts: state.visitorPostsReducer.posts\n  };\n}\n\nexport default connect(mapStateToProps)(GeoUserPostsCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoUserPostsCard\");","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/GeoUserPostsCard.js"],"names":["React","useState","useRef","useEffect","Card","CardHeader","CardMedia","CardContent","CardActions","Avatar","Typography","Collapse","ValidatorForm","TextValidator","Button","Divider","IconButton","CircularProgress","Icon","mdiThumbUp","mdiThumbUpOutline","mdiComment","mdiCommentOutline","mdiChevronDown","mdiChevronUp","mdiDelete","mdiSend","mdiDotsVertical","makeStyles","axios","_","connect","swal","List","ListItem","ListItemAvatar","ListItemText","Plyr","Menu","MenuItem","TextField","useStyles","theme","card","maxWidth","margin","padding","spacing","backgroundColor","palette","background","paper","media","height","image","maxHeight","GeoUserPostsCard","props","classes","formRef","expanded","setExpanded","comment","setComment","commentSending","setCommentSending","likeSending","setLikeSending","commentDeleting","setCommentDeleting","commentLiking","setCommentLiking","deletingPost","setDeletingPost","anchorEl","setAnchorEl","addValidationRule","v","length","timeDifference","date2","dateString","date1","Date","now","difference","daysDifference","Math","floor","hoursDifference","minutesDifference","secondsDifference","post","uniquePostId","username","utcTime","uniqueUserId","changeAnchorEl","Boolean","handleMenuClose","mapStateToProps","state","mainUser","userReducer","user","posts","visitorPostsReducer"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Icon from '@mdi/react';\r\nimport { mdiThumbUp, mdiThumbUpOutline, mdiComment, mdiCommentOutline, mdiChevronDown, mdiChevronUp, mdiDelete, mdiSend, mdiDotsVertical } from '@mdi/js';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport * as _ from 'underscore';\r\nimport { connect } from 'react-redux';\r\nimport swal from 'sweetalert';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Plyr from 'react-plyr';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        maxWidth: 600,\r\n        margin: 'auto',\r\n        padding: theme.spacing(2),\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        padding: '56.25%',\r\n    },\r\n    image: {\r\n        maxWidth: '100%',\r\n        maxHeight: '100%',\r\n    },\r\n}));\r\n\r\nfunction GeoUserPostsCard(props) {\r\n    const classes = useStyles(); //Custom styles for the component\r\n    const formRef = useRef(null); //Ref for the validator form\r\n    const [expanded, setExpanded] = useState(false); //This expands the comments. \r\n    const [comment, setComment] = useState(''); //This variable holds the comment.\r\n    const [commentSending, setCommentSending] = useState(false); //This variable will disable the comment button.\r\n    const [likeSending, setLikeSending] = useState(false); //This variable will disable the like button.\r\n    const [commentDeleting, setCommentDeleting] = useState(false); //This variable and setter will handle disabling the delete button while a comment is being deleted.\r\n    const [commentLiking, setCommentLiking] = useState(false); //This variable and setter will handle disabling the comment like Button when the comment is being liked or unliked.\r\n    const [deletingPost, setDeletingPost] = useState(false); //Variable and setter that will disable the delete button on a post while the server is deleting the post.\r\n    const [anchorEl, setAnchorEl] = useState(null); //The anchor element for a menu item within a Card Post.\r\n\r\n    useEffect(() => {\r\n        //Add the validation rule so that a comment is not empty. \r\n        ValidatorForm.addValidationRule('notEmpty', v => {\r\n            if(v.length < 1) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    function timeDifference(date2, dateString) {\r\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a post\r\n        let date1 = Date.now();\r\n        let difference = date1 - date2;\r\n        let daysDifference = Math.floor(difference/1000/60/60/24);\r\n        let hoursDifference = Math.floor(difference/1000/60/60);\r\n        let minutesDifference = Math.floor(difference/1000/60);\r\n        let secondsDifference = Math.floor(difference/1000);\r\n        if(daysDifference > 0) {\r\n            return dateString;\r\n        }\r\n        else if(hoursDifference > 0 && hoursDifference < 23) {\r\n            return `${hoursDifference} hr ago`;\r\n        }\r\n        else if(minutesDifference > 0 && minutesDifference < 60) {\r\n            return `${minutesDifference} min ago`;\r\n        }\r\n        else if(minutesDifference === 0) {\r\n            return `${secondsDifference} secs ago`\r\n        }\r\n        else {\r\n            return dateString;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card \r\n            className={classes.card}\r\n            id={`${props.post.uniquePostId}`}\r\n        >\r\n            <CardHeader \r\n                title={\r\n                    <Typography \r\n                        variant='h6' \r\n                        component='h6'\r\n                    >\r\n                        {props.post.username}\r\n                    </Typography>\r\n                }\r\n                subheader={\r\n                    <Typography \r\n                        variant='subtitle1'\r\n                        component='span'\r\n                        color='textSecondary' \r\n                    >\r\n                        {timeDifference(props.post.utcTime, props.post.dateString)}\r\n                    </Typography>\r\n                }\r\n                avatar={\r\n                    <Avatar \r\n                        src={`http://192.168.0.9:3001/api/get-photo/${props.post.uniqueUserId}`}\r\n                        title={`${props.post.username}`}\r\n                        alt={`${props.post.username}`}\r\n                    />\r\n                }\r\n                action={\r\n                    <div>\r\n                        <IconButton>\r\n                            <Icon \r\n                                path={mdiDotsVertical} \r\n                                size={1} \r\n                                title='Share button' \r\n                                aria-label='Share button' \r\n                                onClick={changeAnchorEl}\r\n                            />\r\n                        </IconButton>\r\n                        <Menu \r\n                            open={Boolean(anchorEl)}\r\n                            anchorEl={anchorEl}\r\n                            keepMounted \r\n                            onClose={handleMenuClose}\r\n                        >\r\n                            <MenuItem>\r\n                                <TextField \r\n                                    label='Post link' \r\n                                    color='primary' \r\n                                    value={`http://192.168.0.9:3000/geouser#${props.post.uniquePostId}`}\r\n                                    readonly \r\n                                />\r\n                            </MenuItem>\r\n                        </Menu>\r\n                    </div>\r\n                }\r\n            />\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        mainUser: state.userReducer.user,\r\n        posts: state.visitorPostsReducer.posts,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(GeoUserPostsCard);"]},"metadata":{},"sourceType":"module"}