{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simeonikudabo/Downloads/geocities/src/components/Community.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Hidden from '@material-ui/core/Hidden';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiClose, mdiCamera } from '@mdi/js';\nimport PropTypes from 'prop-types';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport CommunityPostsCard from './CommunityPostsCard';\nimport Resizer from 'react-image-file-resizer';\n\nfunction TabPanel(props) {\n  //This component will serve as the panel for each individual tab.\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: index !== value,\n    id: `tabpanel-${index}`,\n    \"aria-label\": `tab-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      marginTop: 100\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: true,\n      style: {\n        textAlign: 'center'\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TabPanel;\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  value: PropTypes.any.isRequired,\n  index: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `tab-${index}`,\n    'aria-controls': `tabpanel-${index}`\n  };\n}\n\nfunction Community(props) {\n  _s();\n\n  const [community, setCommunity] = useState(null); //This variable and setter will manipulate community.\n\n  const useStyles = makeStyles(() => ({\n    root: {\n      marginTop: 100\n    },\n    centerContent: {\n      margin: 'auto',\n      textAlign: 'center'\n    },\n    nameGrid: {\n      margin: 'auto',\n      textAlign: 'center',\n      marginTop: 20\n    },\n    avatarLg: {\n      height: 168,\n      width: 168,\n      margin: 'auto'\n    },\n    avatarSm: {\n      height: 128,\n      width: 128,\n      margin: 'auto'\n    },\n    paper: {\n      backgroundColor: community !== null ? community.communityTheme : 'rgb(0, 20, 60)'\n    },\n    closeIcon: {\n      color: 'rgb(255, 255, 255)'\n    },\n    input: {\n      display: 'none'\n    }\n  }));\n  const classes = useStyles(); //Custom styles for the component. \n\n  const history = useHistory(); //Window history API.\n\n  const params = useParams(); //Access url parameters. \n\n  const textFormRef = useRef(null); //Ref for validator form when we upload posts.\n\n  const [joinSending, setJoinSending] = useState(false); //Will disable the button while we send a join or request join to the server.\n\n  const [postDialog, setPostDialog] = useState(false); //Will open and close the dialog to make a post.\n\n  const [curTab, setTab] = useState(0); //Sets the current tab in post upload dialog. \n\n  const [curTab2, setTab2] = useState(0); //For the second tab that displays posts, about (and settings if the user is not null and the uniqueUserId matches the mainUser, for moderation)\n\n  const [textPost, setTextPost] = useState(''); //Value for text post. \n\n  const [textPostTitle, setTextPostTitle] = useState(''); //Value for title.\n\n  const [photoPost, setPhotoPost] = useState(null); //Value for photo upload. \n\n  const [photoPostTitle, setPhotoPostTitle] = useState(''); //Value for photo post title. \n\n  const [videoPost, setVideoPost] = useState(null); //Value for video post. \n\n  const [videoPostTitle, setVideoPostTitle] = useState(''); //Video post title. \n\n  const [linkPost, setLinkPost] = useState(''); //Value for the link in a link post. \n\n  const [linkPostTitle, setLinkPostTitle] = useState(''); //Value for link post title. \n\n  const [posting, setPosting] = useState(false); //Will handle disabling buttons and bars when a post is being sent to the server.\n\n  const [uploadPhoto, setUploadPhoto] = useState(null); //Will control any photo post photo that we upload to the server. \n\n  useEffect(() => {\n    //Add validation rules \n    ValidatorForm.addValidationRule('titleLength', v => {\n      if (v.length > 75) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Rule for text or caption to be 3,000 characters or less. \n\n    ValidatorForm.addValidationRule('textLength', v => {\n      if (v.length > 3000) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Validation rule to ensure textPost and linkPost are not empty. \n\n    ValidatorForm.addValidationRule('requiredText', v => {\n      if (v.trim() === '') {\n        return false;\n      } else {\n        return true;\n      }\n    }); //First we need to fetch the community with axios. \n\n    if (true) {\n      return axios({\n        method: 'GET',\n        url: `http://10.162.4.11:3001/api/fetch/community/${params.communityName}`\n      }).then(response => {\n        if (response.data.community) {\n          setCommunity(response.data.community);\n          props.dispatch({\n            type: 'ThemeChange',\n            payload: response.data.community.communityTheme\n          }); //Update the theme to match the community theme.\n\n          props.dispatch({\n            type: 'visitorPosts/updatePosts',\n            payload: response.data.posts\n          }); //Update the posts to match what a visitor viewing these posts will see.\n          //Now determine if the mainUser is in the blockList, and re-route to the previous page if they are. \n\n          if (props.mainUser !== null) {\n            if (_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n              swal('Uh Oh!', 'You are blocked from this community!', 'error');\n              history.goBack(1);\n            }\n          }\n        } else {\n          swal('Uh Oh!', 'We could not find that community!', 'error');\n          history.goBack(1);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error finding that community! Please try again.', 'error');\n        history.goBack(1);\n      });\n    }\n  }, []);\n\n  function publicJoin() {\n    //Function that will enable a member to join a public community. \n    let data = JSON.stringify({\n      username: props.mainUser.username,\n      uniqueUserId: props.mainUser.uniqueUserId,\n      name: community.name\n    });\n    return axios({\n      method: 'POST',\n      url: 'http://10.162.4.11:3001/api/public/join/community',\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data.result === 'success') {\n        swal('Great!', 'Successfully joined community!', 'success');\n        setJoinSending(false);\n        setCommunity(response.data.community);\n      } else {\n        swal('Uh Oh!', 'There was an error with joining this community! Please try again', 'error');\n        setJoinSending(false);\n      }\n    }).catch(err => {\n      console.log(err.message);\n      swal('Uh Oh!', 'There was an error joining this community! Please try again', 'error');\n      setJoinSending(false);\n    });\n  }\n\n  function privateJoinRequest() {\n    //This function will handle sending a join notification to the moderator. \n    setJoinSending(true);\n    let data = JSON.stringify({\n      uniqueUserId: props.mainUser.uniqueUserId,\n      username: props.mainUser.username,\n      moderatorUniqueUserId: community.moderator.uniqueUserId,\n      name: community.name\n    });\n    return axios({\n      method: 'POST',\n      url: 'http://10.162.4.11:3001/api/community/join/request',\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data === 'duplicate') {\n        swal('Uh Oh!', 'You have already sent a request to join this community!', 'error');\n        setJoinSending(false);\n      } else {\n        swal('Great!', 'Community join request sent!', 'success');\n        setJoinSending(false);\n      }\n    }).catch(err => {\n      console.log(err.message);\n      swal('Uh Oh!', 'There was an error sending a request to join this community! Please try again.', 'error');\n      setJoinSending(false);\n    });\n  }\n\n  async function sendTextPost() {\n    //Function that will handle uploading a text post to the server. \n    setPosting(true);\n    let isValid = textFormRef.current.isFormValid();\n\n    if (!isValid) {\n      swal('Uh Oh!', 'Make sure the form is filled out properly', 'error');\n      setPosting(false);\n      return false;\n    } else {\n      let date = new Date();\n      let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n      let month = months[date.getMonth()];\n      let day = date.getDate();\n      let year = date.getFullYear();\n      let dateString = `${month} ${day}, ${year}`;\n      let data = JSON.stringify({\n        text: textPost,\n        title: textPostTitle,\n        uniqueUserId: props.mainUser.uniqueUserId,\n        username: props.mainUser.username,\n        community: community.name,\n        type: 'text',\n        dateString: dateString,\n        uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\n        context: 'community',\n        privacy: community.communityPrivacy\n      });\n      return axios({\n        method: 'post',\n        url: 'http://10.162.4.11:3001/api/add/community/text/post',\n        data: data,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (response.data.result === 'success') {\n          props.dispatch({\n            type: 'visitorPosts/updatePosts',\n            payload: response.data.posts\n          });\n          swal('Great!', 'Successfully uploaded text post!', 'success');\n          setTextPost('');\n          setTextPostTitle('');\n          setPosting(false);\n          setPostDialog(false);\n        } else {\n          swal('Uh Oh!', 'There was an error sending that text post!', 'error');\n          setPosting(false);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error sending that text post! Please try again.', 'error');\n        setPosting(false);\n      });\n    }\n  }\n\n  function resizerFunction(file) {\n    //This is a wrapper for the file resizer \n    return new Promise(resolve => {\n      Resizer.imageFileResizer(file, 600, 600, 'JPEG', 100, 0, uri => {\n        resolve(uri);\n      }, 'blob');\n    });\n  }\n\n  async function handlePhotoChange(e) {\n    //This function will handle passing a photo that is uploaded to the resizer function to rersize the photo\n    let file = e.target.files[0];\n    let resizedPhoto = await resizerFunction(file);\n    setUploadPhoto(resizedPhoto);\n  }\n\n  function handlePhotoUpload() {\n    //Function that will handle sending an uploaded photo to the server after resizing it.\n    //Might need to make some edits here since the photo will be community-based\n    setPhotoUploading(true);\n\n    if (!uploadPhoto) {\n      swal('Uh Oh!', 'You must select a photo to upload!', 'error');\n      setPhotoUploading(false);\n    } else {\n      let data = new Date();\n      let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n      let month = months[data.getMonth()];\n      let day = data.getDate();\n      let year = data.getFullYear();\n      let dateString = `${month} ${day}, ${year}`;\n      let fd = new FormData();\n      fd.append('photo', uploadPhoto, 'photo.jpg');\n      fd.append('caption', photoCaption);\n      fd.append('uniqueUserId', props.user.uniqueUserId);\n      fd.append('uniquePostId', Date.now() + props.user.username + 'photoupload' + props.user.uniqueUserId);\n      fd.append('username', props.user.username);\n      fd.append('dateString', dateString);\n      fd.append('type', 'photo');\n      fd.append('context', 'personal');\n      fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.user.username}photoupload${props.user.uniqueUserId}`);\n      fd.append('community', '');\n      fd.append('title', '');\n      fd.append('privacy', props.user.profilePrivacy);\n      fd.append('text', '');\n      return axios({\n        method: 'POST',\n        url: 'http://10.162.4.11:3001/api/upload/photo',\n        data: fd,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        if (response.data.posts) {\n          props.dispatch({\n            type: 'userPosts/updatePosts',\n            payload: response.data.posts\n          });\n          swal('Great!', 'Successfully uploaded photo!', 'success');\n          setPhotoCaption('');\n          setUploadPhoto(null);\n          setOpenDialog(false);\n          setPhotoUploading(false);\n        } else {\n          swal('Uh Oh!', 'There was an error uploading that photo!', 'error');\n          setPhotoUploading(false);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error uploading that photo!', 'error');\n        setPhotoUploading(false);\n      });\n    }\n  }\n\n  function leaveCommunity() {\n    //This function will remove a member from a community if they are within it. \n    setJoinSending(true);\n    let data = JSON.stringify({\n      username: props.mainUser.username,\n      uniqueUserId: props.mainUser.uniqueUserId,\n      name: community.name\n    });\n    return axios({\n      method: 'POST',\n      url: 'http://10.162.4.11:3001/api/leave/community',\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data.result === 'success') {\n        swal('Great!', 'You have successfully left this community', 'success');\n        setCommunity(response.data.community);\n        setJoinSending(false);\n      } else {\n        swal('Uh Oh!', 'There was an error leaving this community! Please try again.', 'error');\n        setJoinSending(false);\n      }\n    }).catch(err => {\n      console.log(err.message);\n      swal('Uh Oh!', 'There was an error leaving this community! Please try again.', 'error');\n      setJoinSending(false);\n    });\n  }\n\n  if (community !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      className: classes.root,\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.centerContent,\n        children: [/*#__PURE__*/_jsxDEV(Hidden, {\n          smDown: true,\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            className: classes.avatarLg,\n            src: `http://10.162.4.11:3001/api/get-photo/${community.avatar}`,\n            alt: `${community.name} avatar`,\n            title: `${community.name} avatar`,\n            variant: \"square\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n          mdUp: true,\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            src: `http://10.162.4.11:3001/api/get-photo/${community.avatar}`,\n            className: classes.avatarSm,\n            title: `${community.name} avatar`,\n            alt: `${community.name} avatar`,\n            variant: \"square\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.nameGrid,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h6\",\n          align: \"center\",\n          children: community.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.nameGrid,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          component: \"p\",\n          justify: \"left\",\n          children: community.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          margin: 'auto',\n          textAlign: 'center',\n          marginTop: 20\n        },\n        children: [props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'public' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: publicJoin,\n          disabled: joinSending,\n          children: joinSending ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 44\n          }, this) : 'join'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 25\n        }, this), props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserid && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: privateJoinRequest,\n          disabled: joinSending,\n          children: joinSending ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 44\n          }, this) : 'join'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 25\n        }, this), props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"outlined\",\n          onClick: leaveCommunity,\n          disabled: joinSending,\n          children: joinSending ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 44\n          }, this) : 'leave'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 25\n        }, this), props.mainUser === null && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          onClick: e => history.push('/'),\n          children: \"Sign up or log in!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 25\n        }, this), props.mainUser === null && community.communityPrivacy === 'private' && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"This community is private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 25\n        }, this), props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"This community is private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 25\n        }, this), props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            style: {\n              marginTop: 20,\n              marginBottom: 20\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              style: {\n                margin: 'auto'\n              },\n              children: \"Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"outlined\",\n              onClick: e => setPostDialog(true),\n              children: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 17\n      }, this), props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Dialog, {\n          open: postDialog,\n          fullScreen: true,\n          children: /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(AppBar, {\n              color: \"primary\",\n              hidden: posting,\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                path: mdiClose,\n                size: 1,\n                title: \"Dialog close\",\n                style: {\n                  cursor: 'pointer'\n                },\n                onClick: () => setPostDialog(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n                value: curTab,\n                onChange: (e, newVal) => setTab(newVal),\n                centered: true,\n                children: [/*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(0),\n                  label: \"Text\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 721,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(1),\n                  label: \"Photo\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 726,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(2),\n                  label: \"Video\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 731,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(3),\n                  label: \"Link\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 736,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 716,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              index: 0,\n              value: curTab,\n              children: /*#__PURE__*/_jsxDEV(ValidatorForm, {\n                ref: textFormRef,\n                onSubmit: e => e.preventDefault(),\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  component: \"small\",\n                  color: textPostTitle.length > 75 ? 'error' : 'default',\n                  align: \"center\",\n                  children: [textPostTitle.length, \"/75\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 751,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n                  label: \"Post title\",\n                  placeholder: \"Enter a title for your post of 75 characters or less\",\n                  value: textPostTitle,\n                  onChange: e => setTextPostTitle(e.target.value),\n                  helperText: \"Enter a title for this text post\",\n                  validators: ['titleLength'],\n                  errorMessages: ['Title can only be up to 75 characters'],\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  color: \"primary\",\n                  variant: \"outlined\",\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 759,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  style: {\n                    marginTop: 30\n                  },\n                  variant: \"body1\",\n                  component: \"small\",\n                  color: textPost.length > 3000 ? 'error' : 'default',\n                  align: \"center\",\n                  children: [textPost.length, \"/3000\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 774,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n                  label: \"Text post\",\n                  placeholder: \"Share a text post!\",\n                  value: textPost,\n                  onChange: e => setTextPost(e.target.value),\n                  helperText: \"Enter a text post of up to 3,000 characters long!\",\n                  validators: ['requiredText', 'textLength'],\n                  errorMessages: ['Must enter some text!', 'Text post cannot be more than 3,000 characters long!'],\n                  variant: \"outlined\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  color: \"primary\",\n                  variant: \"outlined\",\n                  rows: 3,\n                  multiline: true,\n                  required: true,\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 785,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: sendTextPost,\n                  disabled: posting,\n                  children: posting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    color: \"primary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 810,\n                    columnNumber: 56\n                  }, this) : 'Upload'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              index: 1,\n              value: curTab,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                component: \"h6\",\n                children: \"Post a photo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                \"html-for\": \"photoPost\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: classes.input,\n                  type: \"file\",\n                  accept: \"image/jpg, image/jpeg, image/png\",\n                  id: \"photoPost\",\n                  name: \"photoPost\",\n                  onChange: handlePhotoChange,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 827,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  component: \"span\",\n                  \"aria-label\": \"Photo picker button\",\n                  children: /*#__PURE__*/_jsxDEV(Icon, {\n                    path: mdiCamera,\n                    size: 1,\n                    title: \"Photo upload icon\",\n                    \"aria-label\": \"Photo upload icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 842,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 836,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 850,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Caption\",\n                placeholder: \"Enter a caption for your photo\",\n                variant: \"outlined\",\n                color: \"primary\",\n                value: photoCaption,\n                onChange: e => setPhotoCaption(e.target.value),\n                InputLabelProps: {\n                  shrink: true\n                },\n                rows: 4,\n                multiline: true,\n                required: true,\n                style: {\n                  marginTop: 40\n                },\n                fullWidth: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 851,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 869,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  marginTop: 30\n                },\n                color: \"primary\",\n                variant: \"outlined\",\n                onClick: handlePhotoUpload,\n                disabled: photoUploading,\n                children: photoUploading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 879,\n                  columnNumber: 59\n                }, this) : 'Upload Photo'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 870,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 814,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 21\n      }, this), (community.communityPrivacy === 'public' || props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          style: {\n            marginTop: 10\n          },\n          children: /*#__PURE__*/_jsxDEV(Tabs, {\n            value: curTab2,\n            onChange: (e, newVal) => setTab2(newVal),\n            centered: true,\n            style: {\n              color: 'rgb(255, 255, 255)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Posts\",\n              ...a11yProps(0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 907,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"About\",\n              ...a11yProps(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 33\n            }, this), props.mainUser !== null && community.moderator.uniqueUserId === props.mainUser.uniqueUserId && /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Settings\",\n              ...a11yProps(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: 0,\n          index: curTab2,\n          children: [props.posts.length < 1 && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"No posts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 33\n          }, this), props.posts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: props.posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'left'\n              },\n              children: [props.mainUser !== null && /*#__PURE__*/_jsxDEV(CommunityPostsCard, {\n                post: post,\n                id: post.uniquePostId,\n                moderator: props.mainUser.uniqueUserId === community.moderator.uniqueUserId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 947,\n                columnNumber: 49\n              }, this), index < props.posts.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: 20\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 954,\n                columnNumber: 49\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 940,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 13\n    }, this);\n  } else {\n    //If the community is null, simply return a Backdrop with a CircularProgress inside \n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Community, \"XHgyhq3MPfv/jufOqMdcWEk9ekY=\", false, function () {\n  return [useStyles, useHistory, useParams];\n});\n\n_c2 = Community;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    primary: state.userThemeReducer.primary,\n    posts: state.visitorPostsReducer.posts\n  };\n}\n\nexport default connect(mapStateToProps)(Community);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"Community\");","map":{"version":3,"sources":["/Users/simeonikudabo/Downloads/geocities/src/components/Community.js"],"names":["React","useState","useEffect","useRef","Grid","Typography","Paper","Tabs","Tab","Avatar","Backdrop","CircularProgress","List","ListItem","Divider","Button","axios","swal","Dialog","DialogContent","AppBar","Toolbar","Hidden","_","connect","useHistory","useParams","makeStyles","IconButton","Icon","mdiClose","mdiCamera","PropTypes","ValidatorForm","TextValidator","CommunityPostsCard","Resizer","TabPanel","props","children","value","index","other","marginTop","textAlign","propTypes","node","any","isRequired","a11yProps","id","Community","community","setCommunity","useStyles","root","centerContent","margin","nameGrid","avatarLg","height","width","avatarSm","paper","backgroundColor","communityTheme","closeIcon","color","input","display","classes","history","params","textFormRef","joinSending","setJoinSending","postDialog","setPostDialog","curTab","setTab","curTab2","setTab2","textPost","setTextPost","textPostTitle","setTextPostTitle","photoPost","setPhotoPost","photoPostTitle","setPhotoPostTitle","videoPost","setVideoPost","videoPostTitle","setVideoPostTitle","linkPost","setLinkPost","linkPostTitle","setLinkPostTitle","posting","setPosting","uploadPhoto","setUploadPhoto","addValidationRule","v","length","trim","method","url","communityName","then","response","data","dispatch","type","payload","posts","mainUser","find","blockList","person","uniqueUserId","goBack","catch","err","console","log","message","publicJoin","JSON","stringify","username","name","headers","result","privateJoinRequest","moderatorUniqueUserId","moderator","sendTextPost","isValid","current","isFormValid","date","Date","months","month","getMonth","day","getDate","year","getFullYear","dateString","text","title","uniquePostId","now","context","privacy","communityPrivacy","resizerFunction","file","Promise","resolve","imageFileResizer","uri","handlePhotoChange","e","target","files","resizedPhoto","handlePhotoUpload","setPhotoUploading","fd","FormData","append","photoCaption","user","profilePrivacy","setPhotoCaption","setOpenDialog","leaveCommunity","avatar","members","member","uniqueUserid","push","marginBottom","cursor","newVal","preventDefault","shrink","photoUploading","map","post","mapStateToProps","state","userReducer","primary","userThemeReducer","visitorPostsReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Hidden from '@material-ui/core/Hidden';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom'; \nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiClose, mdiCamera } from '@mdi/js';\nimport PropTypes from 'prop-types';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport CommunityPostsCard from './CommunityPostsCard';\nimport Resizer from 'react-image-file-resizer';\n\nfunction TabPanel(props) {\n    //This component will serve as the panel for each individual tab.\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div \n            role='tabpanel'\n            hidden={index !== value} \n            id={`tabpanel-${index}`}\n            aria-label={`tab-${index}`}\n            aria-labelledby={`tab-${index}`}\n            {...other}\n            style={{\n                marginTop: 100,\n            }}\n        >\n            {value === index &&\n                <Grid \n                    item \n                    xs\n                    style={{\n                        textAlign: 'center',\n                    }}\n                >\n                    {children}\n                </Grid>\n            }\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    index: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    };\n}\n\n\nfunction Community(props) {\n    const [community, setCommunity] = useState(null); //This variable and setter will manipulate community.\n    const useStyles = makeStyles(() => ({\n        root: {\n            marginTop: 100,\n        },\n        centerContent: {\n            margin: 'auto',\n            textAlign: 'center',\n        },\n        nameGrid: {\n            margin: 'auto',\n            textAlign: 'center',\n            marginTop: 20,\n        },\n        avatarLg: {\n            height: 168,\n            width: 168,\n            margin: 'auto',\n        },\n        avatarSm: {\n            height: 128,\n            width: 128,\n            margin: 'auto',\n        },\n        paper: {\n            backgroundColor: community !== null ? community.communityTheme : 'rgb(0, 20, 60)',\n        },\n        closeIcon: {\n            color: 'rgb(255, 255, 255)',\n        },\n        input: {\n            display: 'none',\n        },\n    }));\n    const classes = useStyles(); //Custom styles for the component. \n    const history = useHistory(); //Window history API.\n    const params = useParams(); //Access url parameters. \n    const textFormRef = useRef(null); //Ref for validator form when we upload posts.\n    const [joinSending, setJoinSending] = useState(false); //Will disable the button while we send a join or request join to the server.\n    const [postDialog, setPostDialog] = useState(false); //Will open and close the dialog to make a post.\n    const [curTab, setTab] = useState(0); //Sets the current tab in post upload dialog. \n    const [curTab2, setTab2] = useState(0); //For the second tab that displays posts, about (and settings if the user is not null and the uniqueUserId matches the mainUser, for moderation)\n    const [textPost, setTextPost] = useState(''); //Value for text post. \n    const [textPostTitle, setTextPostTitle] = useState(''); //Value for title.\n    const [photoPost, setPhotoPost] = useState(null); //Value for photo upload. \n    const [photoPostTitle, setPhotoPostTitle] = useState(''); //Value for photo post title. \n    const [videoPost, setVideoPost] = useState(null); //Value for video post. \n    const [videoPostTitle, setVideoPostTitle] = useState(''); //Video post title. \n    const [linkPost, setLinkPost] = useState(''); //Value for the link in a link post. \n    const [linkPostTitle, setLinkPostTitle] = useState(''); //Value for link post title. \n    const [posting, setPosting] = useState(false); //Will handle disabling buttons and bars when a post is being sent to the server.\n    const [uploadPhoto, setUploadPhoto] = useState(null); //Will control any photo post photo that we upload to the server. \n    \n\n    useEffect(() => {\n        //Add validation rules \n        ValidatorForm.addValidationRule('titleLength', v => {\n            if(v.length > 75) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Rule for text or caption to be 3,000 characters or less. \n        ValidatorForm.addValidationRule('textLength', v => {\n            if(v.length > 3000) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n\n        //Validation rule to ensure textPost and linkPost are not empty. \n        ValidatorForm.addValidationRule('requiredText', v => {\n            if(v.trim() === '') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        //First we need to fetch the community with axios. \n        if(true) {\n            return axios({\n                method: 'GET',\n                url: `http://10.162.4.11:3001/api/fetch/community/${params.communityName}`,\n            }).then(response => {\n                if(response.data.community) {\n                    setCommunity(response.data.community);\n                    props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Update the theme to match the community theme.\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts}); //Update the posts to match what a visitor viewing these posts will see.\n                    //Now determine if the mainUser is in the blockList, and re-route to the previous page if they are. \n                    if(props.mainUser !== null) {\n                        if(_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n                            swal(\n                                'Uh Oh!',\n                                'You are blocked from this community!',\n                                'error',\n                            );\n                            history.goBack(1);\n                        }\n                    }\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'We could not find that community!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error finding that community! Please try again.',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    }, []);\n\n    function publicJoin() {\n        //Function that will enable a member to join a public community. \n        let data = JSON.stringify({\n            username: props.mainUser.username,\n            uniqueUserId: props.mainUser.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://10.162.4.11:3001/api/public/join/community',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.result === 'success') {\n                swal(\n                    'Great!',\n                    'Successfully joined community!',\n                    'success',\n                );\n                setJoinSending(false);\n                setCommunity(response.data.community);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error with joining this community! Please try again',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error joining this community! Please try again',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    function privateJoinRequest() {\n        //This function will handle sending a join notification to the moderator. \n        setJoinSending(true);\n        let data = JSON.stringify({\n            uniqueUserId: props.mainUser.uniqueUserId,\n            username: props.mainUser.username,\n            moderatorUniqueUserId: community.moderator.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://10.162.4.11:3001/api/community/join/request',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data === 'duplicate') {\n                swal(\n                    'Uh Oh!',\n                    'You have already sent a request to join this community!',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n            else {\n                swal(\n                    'Great!',\n                    'Community join request sent!',\n                    'success',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error sending a request to join this community! Please try again.',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    async function sendTextPost() {\n        //Function that will handle uploading a text post to the server. \n        setPosting(true); \n        let isValid = textFormRef.current.isFormValid();\n        if(!isValid) {\n            swal(\n                'Uh Oh!',\n                'Make sure the form is filled out properly',\n                'error',\n            );\n            setPosting(false);\n            return false;\n        }\n        else {\n            let date = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = JSON.stringify({\n                text: textPost,\n                title: textPostTitle,\n                uniqueUserId: props.mainUser.uniqueUserId,\n                username: props.mainUser.username,\n                community: community.name,\n                type: 'text',\n                dateString: dateString,\n                uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\n                context: 'community',\n                privacy: community.communityPrivacy,\n            });\n\n            return axios({\n                method: 'post',\n                url: 'http://10.162.4.11:3001/api/add/community/text/post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                if(response.data.result === 'success') {\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded text post!',\n                        'success',\n                    );\n                    setTextPost('');\n                    setTextPostTitle('');\n                    setPosting(false);\n                    setPostDialog(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error sending that text post!',\n                        'error',\n                    );\n                    setPosting(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that text post! Please try again.',\n                    'error',\n                );\n                setPosting(false);\n            });\n        }\n    }\n\n    function resizerFunction(file) {\n        //This is a wrapper for the file resizer \n        return new Promise(resolve => {\n            Resizer.imageFileResizer(\n                file,\n                600,\n                600,\n                'JPEG',\n                100,\n                0,\n                uri => {\n                    resolve(uri);\n                },\n                'blob',\n            );\n        });\n    }\n\n    async function handlePhotoChange(e) {\n        //This function will handle passing a photo that is uploaded to the resizer function to rersize the photo\n        let file = e.target.files[0];\n        let resizedPhoto = await resizerFunction(file);\n        setUploadPhoto(resizedPhoto);\n    }\n\n    function handlePhotoUpload() {\n        //Function that will handle sending an uploaded photo to the server after resizing it.\n        //Might need to make some edits here since the photo will be community-based\n        setPhotoUploading(true);\n\n        if(!uploadPhoto) {\n            swal(\n                'Uh Oh!',\n                'You must select a photo to upload!',\n                'error',\n            );\n            setPhotoUploading(false);\n        }\n        else {\n            let data = new Date();\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let month = months[data.getMonth()];\n            let day = data.getDate();\n            let year = data.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let fd = new FormData();\n            fd.append('photo', uploadPhoto, 'photo.jpg');\n            fd.append('caption', photoCaption);\n            fd.append('uniqueUserId', props.user.uniqueUserId);\n            fd.append('uniquePostId', Date.now() + props.user.username + 'photoupload' + props.user.uniqueUserId);\n            fd.append('username', props.user.username);\n            fd.append('dateString', dateString);\n            fd.append('type', 'photo');\n            fd.append('context', 'personal');\n            fd.append('link', `http://192.168.0.9:3000/profile#${Date.now()}${props.user.username}photoupload${props.user.uniqueUserId}`);\n            fd.append('community', '');\n            fd.append('title', '');\n            fd.append('privacy', props.user.profilePrivacy);\n            fd.append('text', '');\n\n            return axios({\n                method: 'POST',\n                url: 'http://10.162.4.11:3001/api/upload/photo',\n                data: fd,\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            }).then(response => {\n                if(response.data.posts) {\n                    props.dispatch({type: 'userPosts/updatePosts', payload: response.data.posts});\n                    swal(\n                        'Great!',\n                        'Successfully uploaded photo!',\n                        'success',\n                    );\n                    setPhotoCaption('');\n                    setUploadPhoto(null);\n                    setOpenDialog(false);\n                    setPhotoUploading(false);\n                }\n                else {\n                    swal(\n                        'Uh Oh!',\n                        'There was an error uploading that photo!',\n                        'error',\n                    );\n                    setPhotoUploading(false);\n                }\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error uploading that photo!',\n                    'error',\n                );\n                setPhotoUploading(false);\n            });\n        }\n    }\n\n    function leaveCommunity() {\n        //This function will remove a member from a community if they are within it. \n        setJoinSending(true);\n        let data = JSON.stringify({\n            username: props.mainUser.username,\n            uniqueUserId: props.mainUser.uniqueUserId,\n            name: community.name,\n        });\n\n        return axios({\n            method: 'POST',\n            url: 'http://10.162.4.11:3001/api/leave/community',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }).then(response => {\n            if(response.data.result === 'success') {\n                swal(\n                    'Great!',\n                    'You have successfully left this community',\n                    'success',\n                );\n                setCommunity(response.data.community);\n                setJoinSending(false);\n            }\n            else {\n                swal(\n                    'Uh Oh!',\n                    'There was an error leaving this community! Please try again.',\n                    'error',\n                );\n                setJoinSending(false);\n            }\n        }).catch(err => {\n            console.log(err.message);\n            swal(\n                'Uh Oh!',\n                'There was an error leaving this community! Please try again.',\n                'error',\n            );\n            setJoinSending(false);\n        });\n    }\n\n    if(community !== null) {\n        return (\n            <Grid \n                className={classes.root} \n                container \n            >\n                <Grid \n                    item \n                    xs={12} \n                    className={classes.centerContent} \n                >\n                    <Hidden \n                        smDown \n                    >\n                        <Avatar \n                            className={classes.avatarLg} \n                            src={`http://10.162.4.11:3001/api/get-photo/${community.avatar}`}\n                            alt={`${community.name} avatar`}\n                            title={`${community.name} avatar`}\n                            variant='square'\n                        />\n                    </Hidden>\n                    <Hidden \n                        mdUp \n                    >\n                        <Avatar \n                            src={`http://10.162.4.11:3001/api/get-photo/${community.avatar}`}\n                            className={classes.avatarSm} \n                            title={`${community.name} avatar`}\n                            alt={`${community.name} avatar`}\n                            variant='square'\n                        />\n                    </Hidden>\n                </Grid>\n                {/* The grid below will store the name of the community */}\n                <Grid \n                    item \n                    xs={12} \n                    className={classes.nameGrid} \n                >\n                    <Typography \n                        variant='h6' \n                        component='h6' \n                        align='center' \n                    >\n                        {community.name}\n                    </Typography>\n                </Grid>\n                {/* End of the grid to display the community name */}\n                {/* Below is the Grid to display the title of the community */}\n                <Grid \n                    item \n                    xs={12}\n                    className={classes.nameGrid} \n                >\n                    <Typography \n                        variant='body1' \n                        component='p'\n                        justify='left' \n                    >\n                        {community.title}\n                    </Typography>\n                </Grid>\n                {/* End of the Grid to display the title of the community */}\n                {/* Now create a button for the user if they are logged in, not a member, and the community is public */}\n                <Grid \n                    item \n                    xs={12}\n                    style={{\n                        margin: 'auto',\n                        textAlign: 'center',\n                        marginTop: 20,\n                    }}\n                >\n                    {/* Button if the user is logged in, not a member, and the community is public */}\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'public' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId) &&\n                        <Button \n                            color='primary' \n                            variant='contained' \n                            onClick={publicJoin}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\n                        </Button>\n                    }\n                    {/* Below is the Button if the user is logged in, not a member, and the community is private */}\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserid) &&\n                        <Button \n                            color='primary' \n                            variant='contained' \n                            onClick={privateJoinRequest}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\n                        </Button>\n                    }\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.moderator.uniqueUserId !==  props.mainUser.uniqueUserId) &&\n                        <Button \n                            color='primary'\n                            variant='outlined' \n                            onClick={leaveCommunity}\n                            disabled={joinSending}\n                        >\n                            {joinSending ? <CircularProgress color='primary' /> : 'leave'}\n                        </Button>\n                    }\n                    {/* Below, we will add a button to route someone who is not signed up or logged in to the sign up page */}\n                    {props.mainUser === null &&\n                        <Button \n                            color='primary' \n                            onClick={e => history.push('/')}\n                        >\n                            Sign up or log in!\n                        </Button>\n                    }\n                    {(props.mainUser === null && community.communityPrivacy === 'private') &&\n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                This community is private\n                            </Typography>\n                        </Grid>\n                    }\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private') && \n                        <Grid \n                            item \n                            xs={12} \n                        >\n                            <Typography \n                                variant='h6' \n                                component='h6' \n                                align='center' \n                            >\n                                This community is private\n                            </Typography>\n                        </Grid>\n                    }\n                    {/*Now I will have two buttons in two grids for members of the community to either chat or post content to the community */}\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\n                        <div>\n                            <Grid \n                                item \n                                xs={12} \n                                style={{\n                                    marginTop: 20,\n                                    marginBottom: 20,\n                                }}\n                            >\n                                <Button \n                                    variant='contained' \n                                    color='primary' \n                                    style={{\n                                        margin: 'auto',\n                                    }}\n                                >\n                                    Chat \n                                </Button>\n                            </Grid>\n                            <Grid \n                                item \n                                xs={12} \n                            >\n                                <Button \n                                    color='primary' \n                                    variant='outlined' \n                                    onClick={e => setPostDialog(true)}\n                                >\n                                    Post \n                                </Button>\n                            </Grid>\n                        </div>\n                    }\n                    {/* This is the end of the two Grids for a the chat Button and the Post button */}\n                    {/*Below create the Dialog that will open when the user tries to make a post. Only show when a user is part of the community */}\n                </Grid>\n                {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <Dialog \n                            open={postDialog} \n                            fullScreen\n                        >\n                            <DialogContent>\n                                <AppBar \n                                    color='primary'\n                                    hidden={posting}\n                                >\n                                    <Icon \n                                        path={mdiClose} \n                                        size={1} \n                                        title='Dialog close' \n                                        style={{\n                                            cursor: 'pointer'\n                                        }}\n                                        onClick={() => setPostDialog(false)}\n                                    />\n                                    <Tabs \n                                        value={curTab}\n                                        onChange={(e, newVal) => setTab(newVal)} \n                                        centered\n                                    >\n                                        <Tab \n                                            {...a11yProps(0)} \n                                            label='Text' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(1)} \n                                            label='Photo' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(2)}\n                                            label='Video' \n                                            disabled={posting}\n                                        />\n                                        <Tab \n                                            {...a11yProps(3)}\n                                            label='Link'\n                                            disabled={posting} \n                                        />\n                                    </Tabs>\n                                </AppBar>\n                                <TabPanel \n                                    index={0}\n                                    value={curTab}\n                                >\n                                    <ValidatorForm\n                                        ref={textFormRef} \n                                        onSubmit={e => e.preventDefault()}\n                                    >\n                                        <Typography \n                                            variant='body1' \n                                            component='small' \n                                            color={textPostTitle.length > 75 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPostTitle.length}/75\n                                        </Typography>\n                                        <TextValidator \n                                            label='Post title'\n                                            placeholder='Enter a title for your post of 75 characters or less'\n                                            value={textPostTitle}\n                                            onChange={e => setTextPostTitle(e.target.value)}\n                                            helperText='Enter a title for this text post'\n                                            validators={['titleLength']}\n                                            errorMessages={['Title can only be up to 75 characters']}\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary'\n                                            variant='outlined'\n                                            fullWidth\n                                        />\n                                        <Typography \n                                            style={{\n                                                marginTop: 30,\n                                            }}\n                                            variant='body1' \n                                            component='small'\n                                            color={textPost.length > 3000 ? 'error' : 'default'}\n                                            align='center' \n                                        >\n                                            {textPost.length}/3000\n                                        </Typography>\n                                        <TextValidator \n                                            label='Text post'\n                                            placeholder='Share a text post!'\n                                            value={textPost}\n                                            onChange={e => setTextPost(e.target.value)}\n                                            helperText='Enter a text post of up to 3,000 characters long!'\n                                            validators={['requiredText', 'textLength']}\n                                            errorMessages={['Must enter some text!', 'Text post cannot be more than 3,000 characters long!']}\n                                            variant='outlined' \n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            color='primary' \n                                            variant='outlined' \n                                            rows={3}\n                                            multiline \n                                            required \n                                            fullWidth \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            onClick={sendTextPost}\n                                            disabled={posting}\n                                        >\n                                            {posting ? <CircularProgress color='primary' /> : 'Upload'}\n                                        </Button>\n                                    </ValidatorForm>\n                                </TabPanel>\n                                <TabPanel \n                                    index={1} \n                                    value={curTab} \n                                >\n                                    <Typography \n                                        variant='h6' \n                                        component='h6' \n                                    >\n                                        Post a photo\n                                    </Typography>\n                                    <label \n                                        html-for='photoPost' \n                                    >\n                                        <input \n                                            className={classes.input}\n                                            type='file'\n                                            accept='image/jpg, image/jpeg, image/png' \n                                            id='photoPost'\n                                            name='photoPost' \n                                            onChange={handlePhotoChange} \n                                            required \n                                        />\n                                        <Button \n                                            variant='contained' \n                                            color='primary' \n                                            component='span' \n                                            aria-label='Photo picker button'\n                                        >\n                                            <Icon \n                                                path={mdiCamera} \n                                                size={1} \n                                                title='Photo upload icon' \n                                                aria-label='Photo upload icon' \n                                            />\n                                        </Button>\n                                    </label>\n                                    <br/>\n                                    <TextField \n                                        label='Caption'\n                                        placeholder='Enter a caption for your photo' \n                                        variant='outlined' \n                                        color='primary' \n                                        value={photoCaption} \n                                        onChange={e => setPhotoCaption(e.target.value)} \n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        rows={4}\n                                        multiline\n                                        required\n                                        style={{\n                                            marginTop: 40,\n                                        }}\n                                        fullWidth\n                                    />\n                                    <br/>\n                                    <Button \n                                        style={{\n                                            marginTop: 30,\n                                        }}\n                                        color='primary' \n                                        variant='outlined' \n                                        onClick={handlePhotoUpload}\n                                        disabled={photoUploading}\n                                    >\n                                        {photoUploading ? <CircularProgress color='primary' /> : 'Upload Photo'}\n                                    </Button>\n                                </TabPanel>\n                            </DialogContent>\n                        </Dialog>\n                    </Grid>\n                }\n                {/*End of the Grid for the dialog box for posts if the user is logged in and a member of the community */}\n                {/* Below add the tabpanel for posts, about, and settings (only render settings if moderator is visiting page) */}\n                {(community.communityPrivacy === 'public' || (props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId))) &&\n                    <Grid \n                        item \n                        xs={12} \n                    >\n                        <Paper \n                            className={classes.paper}\n                            style={{\n                                marginTop: 10,\n                            }}\n                        >\n                            <Tabs \n                                value={curTab2} \n                                onChange={(e, newVal) => setTab2(newVal)}\n                                centered\n                                style={{\n                                    color: 'rgb(255, 255, 255)',\n                                }}\n                            >\n                                <Tab \n                                    label='Posts' \n                                    {...a11yProps(0)} \n                                />\n                                <Tab \n                                    label='About' \n                                    {...a11yProps(1)} \n                                />\n                                {(props.mainUser !== null && community.moderator.uniqueUserId === props.mainUser.uniqueUserId) &&\n                                    <Tab \n                                        label='Settings' \n                                        {...a11yProps(2)} \n                                    />\n                                }\n                            </Tabs>\n                        </Paper>\n                        {/* Now begin the tab for posts. Have the CommunityPostsCard ONLY for users who are logged in */}\n                        <TabPanel \n                            value={0} \n                            index={curTab2} \n                        >\n                            {props.posts.length < 1 && \n                                <Typography \n                                    variant='h6' \n                                    component='h6' \n                                    align='center' \n                                >\n                                    No posts \n                                </Typography>\n                            }\n                            {props.posts.length > 0 && \n                                <div>\n                                    {props.posts.map((post, index) => (\n                                        <div \n                                            style={{\n                                                textAlign: 'left',\n                                            }}\n                                            key={index}\n                                        >\n                                            {props.mainUser !== null &&       \n                                                <CommunityPostsCard\n                                                    post={post}\n                                                    id={post.uniquePostId}\n                                                    moderator={props.mainUser.uniqueUserId === community.moderator.uniqueUserId}\n                                                />\n                                            }\n                                            {index < props.posts.length - 1 &&\n                                                <div \n                                                    style={{\n                                                        marginBottom: 20,\n                                                    }}\n                                                />\n                                            }\n                                        </div>\n                                    ))}\n                                </div>\n                            }\n                        </TabPanel>\n                    </Grid>\n                }\n                {/* End of the Grid for the main sections of the community page */}\n            </Grid>\n        );\n    }\n    else {\n        //If the community is null, simply return a Backdrop with a CircularProgress inside \n        return (\n            <Backdrop \n                open={true} \n            >\n                <CircularProgress \n                    color='primary' \n                />\n            </Backdrop>\n        );\n    }  \n}\n\nfunction mapStateToProps(state) {\n    return {\n        mainUser: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n        posts: state.visitorPostsReducer.posts,\n    };\n}\n\nexport default connect(mapStateToProps)(Community);"]},"metadata":{},"sourceType":"module"}