{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simeonikudabo/Downloads/geocities/src/components/ThreadComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Avatar from '@material-ui/core/Avatar';\nimport swal from 'sweetalert';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiSend, mdiDelete } from '@mdi/js';\nconst useStyles = makeStyles(() => ({\n  topMarg: {\n    marginTop: 100\n  },\n  paper: {\n    maxWidth: 600,\n    margin: 'auto'\n  },\n  formMarg: {\n    marginTop: 40\n  }\n}));\n\nfunction ThreadComponent(props) {\n  _s();\n\n  const classes = useStyles();\n  const params = useParams();\n  const history = useHistory();\n  const gridRef = useRef();\n  const [msg, setMsg] = useState(''); //Variable and setter for the chat message we send.\n\n  const [msgDeleting, setMsgDeleting] = useState(false); //Variable and setter to disable buttons when msg is sending or deleting.\n\n  const [thread, setThread] = useState(null); //Variable and setter for the message thread we receive from the server.\n\n  useEffect(() => {\n    //First check to see if the user is null. Go to login page if they are. \n    if (props.user === null) {\n      swal('Uh Oh!', 'You must be logged in to view a message thread!', 'error');\n      history.push('/');\n    } else {\n      return axios({\n        method: 'GET',\n        url: `http://192.168.0.17:3001/api/grab/thread/${params.uniqueThreadId}/${props.user.uniqueUserId}`\n      }).then(response => {\n        if (response.data === 'no thread') {\n          swal('Uh Oh!', 'That message thread cannot be found!', 'error');\n          history.goBack(1);\n        } else {\n          props.dispatch({\n            type: 'user/updateUser',\n            payload: response.data.user\n          });\n          props.dispatch({\n            type: 'ThemeChange',\n            payload: response.data.user.profileTheme\n          });\n          setThread(response.data.thread);\n\n          if (gridRef.current) {\n            window.scrollTo({\n              behavior: 'smooth',\n              top: gridRef.current.offsetTop\n            });\n          }\n        }\n      });\n    }\n  }, []);\n\n  function timeDifference(date2, dateString) {\n    //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a thread\n    let date1 = Date.now();\n    let difference = date1 - date2;\n    let daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);\n    let hoursDifference = Math.floor(difference / 1000 / 60 / 60);\n    let minutesDifference = Math.floor(difference / 1000 / 60);\n    let secondsDifference = Math.floor(difference / 1000);\n\n    if (daysDifference > 0) {\n      return dateString;\n    } else if (hoursDifference > 0 && hoursDifference < 23) {\n      return `${hoursDifference} hr ago`;\n    } else if (minutesDifference > 0 && minutesDifference < 60) {\n      return `${minutesDifference} min ago`;\n    } else if (minutesDifference === 0) {\n      return `${secondsDifference} secs ago`;\n    } else {\n      return dateString;\n    }\n  }\n\n  function getReceiverUniqueUserId() {\n    //Function that will determine the receiver of the message in the thread and return their ID.\n    if (thread.uniqueUserIds[0] === props.user.uniqueUserId) {\n      return thread.uniqueUserIds[1];\n    } else {\n      return thread.uniqueUserIds[0];\n    }\n  }\n\n  function getReceiverUsername() {\n    //Function that will determine the receiver of the message in the thread and return their ID.\n    if (thread.usernames[0] === props.user.username) {\n      return thread.usernames[1];\n    } else {\n      return thread.usernames[0];\n    }\n  }\n\n  function sendMsg() {\n    //This function will be responsible for sending a message to the server. \n    setMsgDeleting(true);\n\n    if (msg.trim().length < 1) {\n      swal('Uh Oh!', 'You must enter a message!', 'error');\n      setMsgDeleting(false);\n      return false;\n    } else {\n      let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n      let date = new Date();\n      let month = months[date.getMonth()];\n      let day = date.getDate();\n      let year = date.getFullYear();\n      let dateString = `${month} ${day}, ${year}`;\n      let data = JSON.stringify({\n        senderUniqueUserId: props.user.uniqueUserId,\n        receiverUniqueUserId: getReceiverUniqueUserId(),\n        senderUsername: props.user.username,\n        receiverUername: getReceiverUsername(),\n        dateString: dateString,\n        utcTime: Date.now(),\n        msg: msg,\n        uniqueMessageId: 'message' + Date.now() + props.user.uniqueUserId + thread.uniqueThreadId,\n        freshMsg: false,\n        uniqueThreadId: thread.uniqueThreadId\n      });\n      return axios({\n        method: 'POST',\n        url: 'http://192.168.0.17:3001/api/add/dm',\n        data: data,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        swal('Great!', 'You successfully sent that message!', 'success');\n        setThread(response.data.thread);\n\n        if (gridRef.current) {\n          window.scrollTo({\n            behavior: 'smooth',\n            top: gridRef.current.offsetTop\n          });\n        }\n\n        setMsgDeleting(false);\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error sending that message! Please try again.', 'error');\n        setMsgSending(false);\n      });\n    }\n  }\n\n  if (props.user !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.topMarg,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: thread !== null && thread.messages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: thread.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            className: classes.paper,\n            children: /*#__PURE__*/_jsxDEV(ListItem, {\n              alignItems: \"flex-start\",\n              children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  src: `http://192.168.0.17:3001/api/get/avatar/by/id/${message.senderUniqueUserId}`,\n                  alt: `${message.senderUsername}`,\n                  title: `${message.senderUsername}`,\n                  onClick: e => history.push(`/geouser/${message.senderUniqueUserId}`)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    component: \"h6\",\n                    children: message.senderUsername\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    component: \"span\",\n                    color: \"textSecondary\",\n                    children: timeDifference(message.utcTime, message.dateString)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 49\n                }, this),\n                secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  component: \"p\",\n                  children: message.msg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 41\n              }, this), props.user.uniqueUserId === message.senderUniqueUserId && /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  color: \"primary\",\n                  children: /*#__PURE__*/_jsxDEV(Icon, {\n                    path: mdiDelete,\n                    size: 1,\n                    title: \"Message delete\",\n                    \"aria-label\": \"Message delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 37\n            }, this)\n          }, index.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: gridRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.formMarg,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Message\",\n          value: msg,\n          onChange: e => setMsg(e.target.value),\n          color: \"primary\",\n          variant: \"outlined\",\n          placeholder: \"Send message...\",\n          helperText: \"Send a message to this user\",\n          inputLabelProps: {\n            shrink: true\n          },\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"Message send button\",\n                color: \"primary\",\n                disabled: msgDeleting,\n                onClick: sendMsg,\n                children: msgDeleting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 52\n                }, this) : /*#__PURE__*/_jsxDEV(Icon, {\n                  path: mdiSend,\n                  size: 2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 31\n            }, this)\n          },\n          multiline: true,\n          rows: 4,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(ThreadComponent, \"RQF9JXYRlEudI2rxpnXcuAs53Uc=\", false, function () {\n  return [useStyles, useParams, useHistory];\n});\n\n_c = ThreadComponent;\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(ThreadComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreadComponent\");","map":{"version":3,"sources":["/Users/simeonikudabo/Downloads/geocities/src/components/ThreadComponent.js"],"names":["React","useState","useEffect","useRef","Grid","TextField","axios","Typography","Paper","ListItem","ListItemAvatar","ListItemText","ListItemSecondaryAction","Avatar","swal","connect","useHistory","useParams","makeStyles","Backdrop","CircularProgress","InputAdornment","IconButton","Icon","mdiSend","mdiDelete","useStyles","topMarg","marginTop","paper","maxWidth","margin","formMarg","ThreadComponent","props","classes","params","history","gridRef","msg","setMsg","msgDeleting","setMsgDeleting","thread","setThread","user","push","method","url","uniqueThreadId","uniqueUserId","then","response","data","goBack","dispatch","type","payload","profileTheme","current","window","scrollTo","behavior","top","offsetTop","timeDifference","date2","dateString","date1","Date","now","difference","daysDifference","Math","floor","hoursDifference","minutesDifference","secondsDifference","getReceiverUniqueUserId","uniqueUserIds","getReceiverUsername","usernames","username","sendMsg","trim","length","months","date","month","getMonth","day","getDate","year","getFullYear","JSON","stringify","senderUniqueUserId","receiverUniqueUserId","senderUsername","receiverUername","utcTime","uniqueMessageId","freshMsg","headers","catch","err","console","log","message","setMsgSending","messages","map","index","e","toString","target","value","shrink","endAdornment","mapStateToProps","state","userReducer","primary","userThemeReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Avatar from '@material-ui/core/Avatar';\nimport swal from 'sweetalert';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiSend, mdiDelete } from '@mdi/js';\n\nconst useStyles = makeStyles(() => ({\n    topMarg: {\n        marginTop: 100,\n    },\n    paper: {\n        maxWidth: 600,\n        margin: 'auto',\n    },\n    formMarg: {\n        marginTop: 40,\n    }\n}));\n\nfunction ThreadComponent(props) {\n    const classes = useStyles();\n    const params = useParams();\n    const history = useHistory();\n    const gridRef = useRef();\n    const [msg, setMsg] = useState(''); //Variable and setter for the chat message we send.\n    const [msgDeleting, setMsgDeleting] = useState(false); //Variable and setter to disable buttons when msg is sending or deleting.\n    const [thread, setThread] = useState(null); //Variable and setter for the message thread we receive from the server.\n\n    useEffect(() => {\n        //First check to see if the user is null. Go to login page if they are. \n        if(props.user === null) {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to view a message thread!',\n                'error',\n            );\n            history.push('/');\n        }\n        else {\n            return axios({\n                method: 'GET',\n                url: `http://192.168.0.17:3001/api/grab/thread/${params.uniqueThreadId}/${props.user.uniqueUserId}`,\n            }).then(response => {\n                if(response.data === 'no thread') {\n                    swal(\n                        'Uh Oh!',\n                        'That message thread cannot be found!',\n                        'error',\n                    );\n                    history.goBack(1);\n                }\n                else {\n                    props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                    props.dispatch({type: 'ThemeChange', payload: response.data.user.profileTheme});\n                    setThread(response.data.thread);\n                    if(gridRef.current) {\n                        window.scrollTo({\n                            behavior: 'smooth',\n                            top: gridRef.current.offsetTop,\n                        });\n                    }\n                }\n            });\n        }\n    }, []);\n\n    function timeDifference(date2, dateString) {\n        //This function will return whether or not we display something like \"2 hrs ago\" \"20 min ago\" or the date string for a thread\n        let date1 = Date.now();\n        let difference = date1 - date2;\n        let daysDifference = Math.floor(difference/1000/60/60/24);\n        let hoursDifference = Math.floor(difference/1000/60/60);\n        let minutesDifference = Math.floor(difference/1000/60);\n        let secondsDifference = Math.floor(difference/1000);\n        if(daysDifference > 0) {\n            return dateString;\n        }\n        else if(hoursDifference > 0 && hoursDifference < 23) {\n            return `${hoursDifference} hr ago`;\n        }\n        else if(minutesDifference > 0 && minutesDifference < 60) {\n            return `${minutesDifference} min ago`;\n        }\n        else if(minutesDifference === 0) {\n            return `${secondsDifference} secs ago`\n        }\n        else {\n            return dateString;\n        }\n    }\n\n    function getReceiverUniqueUserId() {\n        //Function that will determine the receiver of the message in the thread and return their ID.\n        if(thread.uniqueUserIds[0] === props.user.uniqueUserId) {\n            return thread.uniqueUserIds[1];\n        }\n        else {\n            return thread.uniqueUserIds[0];\n        }\n    }\n\n    function getReceiverUsername() {\n        //Function that will determine the receiver of the message in the thread and return their ID.\n        if(thread.usernames[0] === props.user.username) {\n            return thread.usernames[1];\n        }\n        else {\n            return thread.usernames[0];\n        }\n    }\n\n    function sendMsg() {\n        //This function will be responsible for sending a message to the server. \n        setMsgDeleting(true);\n\n        if(msg.trim().length < 1) {\n            swal(\n                'Uh Oh!',\n                'You must enter a message!',\n                'error',\n            )\n            setMsgDeleting(false);\n            return false;\n        }\n        else {\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            let date = new Date();\n            let month = months[date.getMonth()];\n            let day = date.getDate();\n            let year = date.getFullYear();\n            let dateString = `${month} ${day}, ${year}`;\n            let data = JSON.stringify({\n                senderUniqueUserId: props.user.uniqueUserId,\n                receiverUniqueUserId: getReceiverUniqueUserId(),\n                senderUsername: props.user.username,\n                receiverUername: getReceiverUsername(),\n                dateString: dateString,\n                utcTime: Date.now(),\n                msg: msg,\n                uniqueMessageId: 'message' + Date.now() + props.user.uniqueUserId + thread.uniqueThreadId,\n                freshMsg: false,\n                uniqueThreadId: thread.uniqueThreadId,\n            });\n\n            return axios({\n                method:'POST',\n                url: 'http://192.168.0.17:3001/api/add/dm',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            }).then(response => {\n                swal(\n                    'Great!',\n                    'You successfully sent that message!',\n                    'success'\n                )\n                setThread(response.data.thread);\n                if(gridRef.current) {\n                    window.scrollTo({\n                        behavior: 'smooth',\n                        top: gridRef.current.offsetTop,\n                    });\n                }\n                setMsgDeleting(false);\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error sending that message! Please try again.',\n                    'error',\n                );\n                setMsgSending(false);\n            });\n        }\n    }\n\n    if(props.user !== null) {\n        return (\n            <Grid \n                container \n                className={classes.topMarg} \n            >\n                <Grid \n                    item \n                    xs={12}\n                >\n                    {(thread !== null && thread.messages.length > 0) &&\n                        <div>\n                            {thread.messages.map((message, index) => (\n                                <Paper \n                                    key={index.toString()} \n                                    elevation={3} \n                                    className={classes.paper} \n                                >\n                                    <ListItem \n                                        alignItems='flex-start' \n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar \n                                                src={`http://192.168.0.17:3001/api/get/avatar/by/id/${message.senderUniqueUserId}`}\n                                                alt={`${message.senderUsername}`}\n                                                title={`${message.senderUsername}`} \n                                                onClick={e => history.push(`/geouser/${message.senderUniqueUserId}`)} \n                                            />\n                                        </ListItemAvatar>\n                                        <ListItemText \n                                            primary={\n                                                <div>\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                    >\n                                                        {message.senderUsername}\n                                                    </Typography>\n                                                    <Typography \n                                                        variant='subtitle2' \n                                                        component='span' \n                                                        color='textSecondary' \n                                                    >\n                                                        {timeDifference(message.utcTime, message.dateString)}\n                                                    </Typography>\n                                                </div>\n                                            }\n                                            secondary={\n                                                <Typography \n                                                    variant='body1' \n                                                    component='p'\n                                                >\n                                                    {message.msg}\n                                                </Typography>\n                                            }\n                                        />\n                                        {props.user.uniqueUserId === message.senderUniqueUserId &&\n                                            <ListItemSecondaryAction>\n                                                <IconButton \n                                                    color='primary'\n                                                >\n                                                    <Icon \n                                                        path={mdiDelete} \n                                                        size={1} \n                                                        title='Message delete' \n                                                        aria-label='Message delete' \n                                                    />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        }\n                                    </ListItem>\n                                </Paper>\n                            ))}\n                        </div>\n                    }\n                </Grid>\n                {/* End of the messages Grid. Now add a GridRef for sliding purposes */} \n                <div \n                    ref={gridRef} \n                >\n\n                </div>\n                {/* Now, add the Grid for the TextField to send messages */} \n                <Grid \n                    item \n                    xs={12} \n                    className={classes.formMarg} \n                >\n                    <TextField \n                        label='Message' \n                        value={msg} \n                        onChange={e => setMsg(e.target.value)} \n                        color='primary' \n                        variant='outlined' \n                        placeholder='Send message...' \n                        helperText='Send a message to this user' \n                        inputLabelProps={{\n                            shrink: true,\n                        }}\n                        InputProps={{\n                            endAdornment: (\n                              <InputAdornment position='end'>\n                                <IconButton\n                                  aria-label='Message send button'\n                                  color='primary'\n                                  disabled={msgDeleting}\n                                  onClick={sendMsg}\n                                >\n                                    {msgDeleting ? <CircularProgress /> : (\n                                        <Icon \n                                            path={mdiSend}\n                                            size={2}\n                                        />\n                                    )}\n                                </IconButton>\n                              </InputAdornment>\n                            ),\n                          }}\n                        multiline\n                        rows={4} \n                        fullWidth\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        return (\n            <Backdrop \n                open={true} \n            >\n                <CircularProgress \n                    color='primary' \n                />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(ThreadComponent);"]},"metadata":{},"sourceType":"module"}