{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\bobma\\\\Downloads\\\\excite-app\\\\src\\\\components\\\\Community.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Avatar from '@material-ui/core/Avatar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Hidden from '@material-ui/core/Hidden';\nimport * as _ from 'underscore';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@mdi/react';\nimport { mdiClose } from '@mdi/js';\nimport PropTypes from 'prop-types';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\n\nfunction TabPanel(props) {\n  //This component will serve as the panel for each individual tab.\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: index !== value,\n    id: `tabpanel-${index}`,\n    \"aria-label\": `tab-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      marginTop: 100\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: true,\n      style: {\n        textAlign: 'center'\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TabPanel;\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  value: PropTypes.any.isRequired,\n  index: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `tab-${index}`,\n    'aria-controls': `tabpanel-${index}`\n  };\n}\n\nfunction Community(props) {\n  _s();\n\n  const [community, setCommunity] = useState(null); //This variable and setter will manipulate community.\n\n  const useStyles = makeStyles(() => ({\n    root: {\n      marginTop: 100\n    },\n    centerContent: {\n      margin: 'auto',\n      textAlign: 'center'\n    },\n    nameGrid: {\n      margin: 'auto',\n      textAlign: 'center',\n      marginTop: 20\n    },\n    avatarLg: {\n      height: 168,\n      width: 168,\n      margin: 'auto'\n    },\n    avatarSm: {\n      height: 128,\n      width: 128,\n      margin: 'auto'\n    },\n    paper: {\n      backgroundColor: community !== null ? community.communityTheme : 'rgb(0, 20, 60)'\n    },\n    closeIcon: {\n      color: 'rgb(255, 255, 255)'\n    }\n  }));\n  const classes = useStyles(); //Custom styles for the component. \n\n  const history = useHistory(); //Window history API.\n\n  const params = useParams(); //Access url parameters. \n\n  const textFormRef = useRef(null); //Ref for validator form when we upload posts.\n\n  const [joinSending, setJoinSending] = useState(false); //Will disable the button while we send a join or request join to the server.\n\n  const [postDialog, setPostDialog] = useState(false); //Will open and close the dialog to make a post.\n\n  const [curTab, setTab] = useState(0); //Sets the current tab in post upload dialog. \n\n  const [curTab2, setTab2] = useState(0); //For the second tab that displays posts, about (and settings if the user is not null and the uniqueUserId matches the mainUser, for moderation)\n\n  const [textPost, setTextPost] = useState(''); //Value for text post. \n\n  const [textPostTitle, setTextPostTitle] = useState(''); //Value for title.\n\n  const [photoPost, setPhotoPost] = useState(null); //Value for photo upload. \n\n  const [photoPostTitle, setPhotoPostTitle] = useState(''); //Value for photo post title. \n\n  const [videoPost, setVideoPost] = useState(null); //Value for video post. \n\n  const [videoPostTitle, setVideoPostTitle] = useState(''); //Video post title. \n\n  const [linkPost, setLinkPost] = useState(''); //Value for the link in a link post. \n\n  const [linkPostTitle, setLinkPostTitle] = useState(''); //Value for link post title. \n\n  const [posting, setPosting] = useState(false); //Will handle disabling buttons and bars when a post is being sent to the server.\n\n  useEffect(() => {\n    //Add validation rules \n    ValidatorForm.addValidationRule('titleLength', v => {\n      if (v.length > 75) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Rule for text or caption to be 3,000 characters or less. \n\n    ValidatorForm.addValidationRule('textLength', v => {\n      if (v.length > 3000) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Validation rule to ensure textPost and linkPost are not empty. \n\n    ValidatorForm.addValidationRule('requiredText', v => {\n      if (v.trim() === '') {\n        return false;\n      } else {\n        return true;\n      }\n    }); //First we need to fetch the community with axios. \n\n    if (true) {\n      return axios({\n        method: 'GET',\n        url: `http://192.168.0.9:3001/api/fetch/community/${params.communityName}`\n      }).then(response => {\n        if (response.data.community) {\n          setCommunity(response.data.community);\n          props.dispatch({\n            type: 'ThemeChange',\n            payload: response.data.community.communityTheme\n          }); //Update the theme to match the community theme.\n\n          props.dispatch({\n            type: 'VisitorPosts/UpdatePosts',\n            payload: response.data.posts\n          }); //Update the posts to match what a visitor viewing these posts will see.\n          //Now determine if the mainUser is in the blockList, and re-route to the previous page if they are. \n\n          if (props.mainUser !== null) {\n            if (_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\n              swal('Uh Oh!', 'You are blocked from this community!', 'error');\n              history.goBack(1);\n            }\n          }\n        } else {\n          swal('Uh Oh!', 'We could not find that community!', 'error');\n          history.goBack(1);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error finding that community! Please try again.', 'error');\n        history.goBack(1);\n      });\n    }\n  }, []);\n\n  function publicJoin() {\n    //Function that will enable a member to join a public community. \n    let data = JSON.stringify({\n      username: props.mainUser.username,\n      uniqueUserId: props.mainUser.uniqueUserId,\n      name: community.name\n    });\n    return axios({\n      method: 'POST',\n      url: 'http://192.168.0.9:3001/api/public/join/community',\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data.result === 'success') {\n        swal('Great!', 'Successfully joined community!', 'success');\n        setJoinSending(false);\n        setCommunity(response.data.community);\n      } else {\n        swal('Uh Oh!', 'There was an error with joining this community! Please try again', 'error');\n        setJoinSending(false);\n      }\n    }).catch(err => {\n      console.log(err.message);\n      swal('Uh Oh!', 'There was an error joining this community! Please try again', 'error');\n      setJoinSending(false);\n    });\n  }\n\n  function privateJoinRequest() {\n    //This function will handle sending a join notification to the moderator. \n    setJoinSending(true);\n    let data = JSON.stringify({\n      uniqueUserId: props.mainUser.uniqueUserId,\n      username: props.mainUser.username,\n      moderatorUniqueUserId: community.moderator.uniqueUserId,\n      name: community.name\n    });\n    return axios({\n      method: 'POST',\n      url: 'http://192.168.0.9:3001/api/community/join/request',\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data === 'duplicate') {\n        swal('Uh Oh!', 'You have already sent a request to join this community!', 'error');\n        setJoinSending(false);\n      } else {\n        swal('Great!', 'Community join request sent!', 'success');\n        setJoinSending(false);\n      }\n    }).catch(err => {\n      console.log(err.message);\n      swal('Uh Oh!', 'There was an error sending a request to join this community! Please try again.', 'error');\n      setJoinSending(false);\n    });\n  }\n\n  async function sendTextPost() {\n    //Function that will handle uploading a text post to the server. \n    setPosting(true);\n    let isValid = textFormRef.current.isFormValid();\n\n    if (!isValid) {\n      swal('Uh Oh!', 'Make sure the form is filled out properly', 'error');\n      setPosting(false);\n      return false;\n    } else {\n      let date = new Date();\n      let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n      let month = months[date.getMonth()];\n      let day = date.getDate();\n      let year = date.getFullYear();\n      let dateString = `${month} ${day}, ${year}`;\n      let data = JSON.stringify({\n        text: textPost,\n        title: textPostTitle,\n        uniqueUserId: props.mainUser.uniqueUserId,\n        username: props.mainUser.username,\n        community: community.name,\n        type: 'text',\n        dateString: dateString,\n        uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\n        context: 'community',\n        privacy: community.communityPrivacy\n      });\n      return axios({\n        method: 'post',\n        url: 'http://192.168.0.9:3001/api/add/community/text/post',\n        data: data,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (response.data.result === 'success') {\n          props.dispatch({\n            type: 'visitorPosts/updatePosts',\n            payload: response.data.posts\n          });\n          swal('Great!', 'Successfully uploaded text post!', 'success');\n          setTextPost('');\n          setTextPostTitle('');\n          setPosting(false);\n          setPostDialog(false);\n        } else {\n          swal('Uh Oh!', 'There was an error sending that text post!', 'error');\n          setPosting(false);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error sending that text post! Please try again.', 'error');\n        setPosting(false);\n      });\n    }\n  }\n\n  function leaveCommunity() {\n    //This function will remove a member from a community if they are within it. \n    setJoinSending(true);\n    let data = JSON.stringify({\n      username: props.mainUser.username,\n      uniqueUserId: props.mainUser.uniqueUserId,\n      name: community.name\n    });\n    return axios({\n      method: 'POST',\n      url: 'http://192.168.0.9:3001/api/leave/community',\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data.result === 'success') {\n        swal('Great!', 'You have successfully left this community', 'success');\n        setCommunity(response.data.community);\n        setJoinSending(false);\n      } else {\n        swal('Uh Oh!', 'There was an error leaving this community! Please try again.', 'error');\n        setJoinSending(false);\n      }\n    }).catch(err => {\n      console.log(err.message);\n      swal('Uh Oh!', 'There was an error leaving this community! Please try again.', 'error');\n      setJoinSending(false);\n    });\n  }\n\n  if (community !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      className: classes.root,\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.centerContent,\n        children: [/*#__PURE__*/_jsxDEV(Hidden, {\n          smDown: true,\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            className: classes.avatarLg,\n            src: `http://192.168.0.9:3001/api/get-photo/${community.avatar}`,\n            alt: `${community.name} avatar`,\n            title: `${community.name} avatar`,\n            variant: \"square\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n          mdUp: true,\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            src: `http://192.168.0.9:3001/api/get-photo/${community.avatar}`,\n            className: classes.avatarSm,\n            title: `${community.name} avatar`,\n            alt: `${community.name} avatar`,\n            variant: \"square\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.nameGrid,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h6\",\n          align: \"center\",\n          children: community.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.nameGrid,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          component: \"p\",\n          justify: \"left\",\n          children: community.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          margin: 'auto',\n          textAlign: 'center',\n          marginTop: 20\n        },\n        children: [props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'public' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: publicJoin,\n          disabled: joinSending,\n          children: joinSending ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 44\n          }, this) : 'join'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 25\n        }, this), props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserid && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: privateJoinRequest,\n          disabled: joinSending,\n          children: joinSending ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 44\n          }, this) : 'join'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 25\n        }, this), props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"outlined\",\n          onClick: leaveCommunity,\n          disabled: joinSending,\n          children: joinSending ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 44\n          }, this) : 'leave'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 25\n        }, this), props.mainUser === null && /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          onClick: e => history.push('/'),\n          children: \"Sign up or log in!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 25\n        }, this), props.mainUser === null && community.communityPrivacy === 'private' && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"This community is private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 25\n        }, this), props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"This community is private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 25\n        }, this), props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            style: {\n              marginTop: 20,\n              marginBottom: 20\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              style: {\n                margin: 'auto'\n              },\n              children: \"Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"outlined\",\n              onClick: e => setPostDialog(true),\n              children: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this), props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Dialog, {\n          open: postDialog,\n          fullScreen: true,\n          children: /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(AppBar, {\n              color: \"primary\",\n              hidden: posting,\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                path: mdiClose,\n                size: 1,\n                title: \"Dialog close\",\n                style: {\n                  cursor: 'pointer'\n                },\n                onClick: () => setPostDialog(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n                value: curTab,\n                onChange: (e, newVal) => setTab(newVal),\n                centered: true,\n                children: [/*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(0),\n                  label: \"Text\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(1),\n                  label: \"Photo\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 619,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(2),\n                  label: \"Video\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 624,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Tab, { ...a11yProps(3),\n                  label: \"Link\",\n                  disabled: posting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 629,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              index: 0,\n              value: curTab,\n              children: /*#__PURE__*/_jsxDEV(ValidatorForm, {\n                ref: textFormRef,\n                onSubmit: e => e.preventDefault(),\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  component: \"small\",\n                  color: textPostTitle.length > 75 ? 'error' : 'default',\n                  align: \"center\",\n                  children: [textPostTitle.length, \"/75\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 644,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n                  label: \"Post title\",\n                  placeholder: \"Enter a title for your post of 75 characters or less\",\n                  value: textPostTitle,\n                  onChange: e => setTextPostTitle(e.target.value),\n                  helperText: \"Enter a title for this text post\",\n                  validators: ['titleLength'],\n                  errorMessages: ['Title can only be up to 75 characters'],\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  color: \"primary\",\n                  variant: \"outlined\",\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  style: {\n                    marginTop: 30\n                  },\n                  variant: \"body1\",\n                  component: \"small\",\n                  color: textPost.length > 3000 ? 'error' : 'default',\n                  align: \"center\",\n                  children: [textPost.length, \"/3000\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 667,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n                  label: \"Text post\",\n                  placeholder: \"Share a text post!\",\n                  value: textPost,\n                  onChange: e => setTextPost(e.target.value),\n                  helperText: \"Enter a text post of up to 3,000 characters long!\",\n                  validators: ['requiredText', 'textLength'],\n                  errorMessages: ['Must enter some text!', 'Text post cannot be more than 3,000 characters long!'],\n                  variant: \"outlined\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  color: \"primary\",\n                  variant: \"outlined\",\n                  rows: 3,\n                  multiline: true,\n                  required: true,\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 678,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: sendTextPost,\n                  disabled: posting,\n                  children: posting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    color: \"primary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 703,\n                    columnNumber: 56\n                  }, this) : 'Upload'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 697,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 21\n      }, this), (community.communityPrivacy === 'public' || props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          style: {\n            marginTop: 10\n          },\n          children: /*#__PURE__*/_jsxDEV(Tabs, {\n            value: curTab2,\n            onChange: (e, newVal) => setTab2(newVal),\n            centered: true,\n            style: {\n              color: 'rgb(255, 255, 255)'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Posts\",\n              ...a11yProps(0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 732,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"About\",\n              ...a11yProps(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 33\n            }, this), props.mainUser !== null && community.moderator.uniqueUserId === props.mainUser.uniqueUserId && /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Settings\",\n              ...a11yProps(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this);\n  } else {\n    //If the community is null, simply return a Backdrop with a CircularProgress inside \n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Community, \"cmzMEJ/LI6DzKqnYbv/s0FkT7Mk=\", false, function () {\n  return [useStyles, useHistory, useParams];\n});\n\n_c2 = Community;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    primary: state.userThemeReducer.primary,\n    posts: state.visitorPostsReducer.posts\n  };\n}\n\nexport default connect(mapStateToProps)(Community);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"Community\");","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/Community.js"],"names":["React","useState","useEffect","useRef","Grid","Typography","Paper","Tabs","Tab","Avatar","Backdrop","CircularProgress","List","ListItem","Divider","Button","axios","swal","Dialog","DialogContent","AppBar","Toolbar","Hidden","_","connect","useHistory","useParams","makeStyles","IconButton","Icon","mdiClose","PropTypes","ValidatorForm","TextValidator","TabPanel","props","children","value","index","other","marginTop","textAlign","propTypes","node","any","isRequired","a11yProps","id","Community","community","setCommunity","useStyles","root","centerContent","margin","nameGrid","avatarLg","height","width","avatarSm","paper","backgroundColor","communityTheme","closeIcon","color","classes","history","params","textFormRef","joinSending","setJoinSending","postDialog","setPostDialog","curTab","setTab","curTab2","setTab2","textPost","setTextPost","textPostTitle","setTextPostTitle","photoPost","setPhotoPost","photoPostTitle","setPhotoPostTitle","videoPost","setVideoPost","videoPostTitle","setVideoPostTitle","linkPost","setLinkPost","linkPostTitle","setLinkPostTitle","posting","setPosting","addValidationRule","v","length","trim","method","url","communityName","then","response","data","dispatch","type","payload","posts","mainUser","find","blockList","person","uniqueUserId","goBack","catch","err","console","log","message","publicJoin","JSON","stringify","username","name","headers","result","privateJoinRequest","moderatorUniqueUserId","moderator","sendTextPost","isValid","current","isFormValid","date","Date","months","month","getMonth","day","getDate","year","getFullYear","dateString","text","title","uniquePostId","now","context","privacy","communityPrivacy","leaveCommunity","avatar","members","member","uniqueUserid","e","push","marginBottom","cursor","newVal","preventDefault","target","shrink","mapStateToProps","state","userReducer","user","primary","userThemeReducer","visitorPostsReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport * as _ from 'underscore';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom'; \r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Icon from '@mdi/react';\r\nimport { mdiClose } from '@mdi/js';\r\nimport PropTypes from 'prop-types';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\n\r\nfunction TabPanel(props) {\r\n    //This component will serve as the panel for each individual tab.\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div \r\n            role='tabpanel'\r\n            hidden={index !== value} \r\n            id={`tabpanel-${index}`}\r\n            aria-label={`tab-${index}`}\r\n            aria-labelledby={`tab-${index}`}\r\n            {...other}\r\n            style={{\r\n                marginTop: 100,\r\n            }}\r\n        >\r\n            {value === index &&\r\n                <Grid \r\n                    item \r\n                    xs\r\n                    style={{\r\n                        textAlign: 'center',\r\n                    }}\r\n                >\r\n                    {children}\r\n                </Grid>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    value: PropTypes.any.isRequired,\r\n    index: PropTypes.any.isRequired,\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `tab-${index}`,\r\n        'aria-controls': `tabpanel-${index}`,\r\n    };\r\n}\r\n\r\n\r\nfunction Community(props) {\r\n    const [community, setCommunity] = useState(null); //This variable and setter will manipulate community.\r\n    const useStyles = makeStyles(() => ({\r\n        root: {\r\n            marginTop: 100,\r\n        },\r\n        centerContent: {\r\n            margin: 'auto',\r\n            textAlign: 'center',\r\n        },\r\n        nameGrid: {\r\n            margin: 'auto',\r\n            textAlign: 'center',\r\n            marginTop: 20,\r\n        },\r\n        avatarLg: {\r\n            height: 168,\r\n            width: 168,\r\n            margin: 'auto',\r\n        },\r\n        avatarSm: {\r\n            height: 128,\r\n            width: 128,\r\n            margin: 'auto',\r\n        },\r\n        paper: {\r\n            backgroundColor: community !== null ? community.communityTheme : 'rgb(0, 20, 60)',\r\n        },\r\n        closeIcon: {\r\n            color: 'rgb(255, 255, 255)',\r\n        },\r\n    }));\r\n    const classes = useStyles(); //Custom styles for the component. \r\n    const history = useHistory(); //Window history API.\r\n    const params = useParams(); //Access url parameters. \r\n    const textFormRef = useRef(null); //Ref for validator form when we upload posts.\r\n    const [joinSending, setJoinSending] = useState(false); //Will disable the button while we send a join or request join to the server.\r\n    const [postDialog, setPostDialog] = useState(false); //Will open and close the dialog to make a post.\r\n    const [curTab, setTab] = useState(0); //Sets the current tab in post upload dialog. \r\n    const [curTab2, setTab2] = useState(0); //For the second tab that displays posts, about (and settings if the user is not null and the uniqueUserId matches the mainUser, for moderation)\r\n    const [textPost, setTextPost] = useState(''); //Value for text post. \r\n    const [textPostTitle, setTextPostTitle] = useState(''); //Value for title.\r\n    const [photoPost, setPhotoPost] = useState(null); //Value for photo upload. \r\n    const [photoPostTitle, setPhotoPostTitle] = useState(''); //Value for photo post title. \r\n    const [videoPost, setVideoPost] = useState(null); //Value for video post. \r\n    const [videoPostTitle, setVideoPostTitle] = useState(''); //Video post title. \r\n    const [linkPost, setLinkPost] = useState(''); //Value for the link in a link post. \r\n    const [linkPostTitle, setLinkPostTitle] = useState(''); //Value for link post title. \r\n    const [posting, setPosting] = useState(false); //Will handle disabling buttons and bars when a post is being sent to the server.\r\n\r\n    useEffect(() => {\r\n        //Add validation rules \r\n        ValidatorForm.addValidationRule('titleLength', v => {\r\n            if(v.length > 75) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //Rule for text or caption to be 3,000 characters or less. \r\n        ValidatorForm.addValidationRule('textLength', v => {\r\n            if(v.length > 3000) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //Validation rule to ensure textPost and linkPost are not empty. \r\n        ValidatorForm.addValidationRule('requiredText', v => {\r\n            if(v.trim() === '') {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n        //First we need to fetch the community with axios. \r\n        if(true) {\r\n            return axios({\r\n                method: 'GET',\r\n                url: `http://192.168.0.9:3001/api/fetch/community/${params.communityName}`,\r\n            }).then(response => {\r\n                if(response.data.community) {\r\n                    setCommunity(response.data.community);\r\n                    props.dispatch({type: 'ThemeChange', payload: response.data.community.communityTheme}); //Update the theme to match the community theme.\r\n                    props.dispatch({type: 'VisitorPosts/UpdatePosts', payload: response.data.posts}); //Update the posts to match what a visitor viewing these posts will see.\r\n                    //Now determine if the mainUser is in the blockList, and re-route to the previous page if they are. \r\n                    if(props.mainUser !== null) {\r\n                        if(_.find(response.data.community.blockList, person => person.uniqueUserId === props.mainUser.uniqueUserId)) {\r\n                            swal(\r\n                                'Uh Oh!',\r\n                                'You are blocked from this community!',\r\n                                'error',\r\n                            );\r\n                            history.goBack(1);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    swal(\r\n                        'Uh Oh!',\r\n                        'We could not find that community!',\r\n                        'error',\r\n                    );\r\n                    history.goBack(1);\r\n                }\r\n            }).catch(err => {\r\n                console.log(err.message);\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error finding that community! Please try again.',\r\n                    'error',\r\n                );\r\n                history.goBack(1);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    function publicJoin() {\r\n        //Function that will enable a member to join a public community. \r\n        let data = JSON.stringify({\r\n            username: props.mainUser.username,\r\n            uniqueUserId: props.mainUser.uniqueUserId,\r\n            name: community.name,\r\n        });\r\n\r\n        return axios({\r\n            method: 'POST',\r\n            url: 'http://192.168.0.9:3001/api/public/join/community',\r\n            data: data,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }).then(response => {\r\n            if(response.data.result === 'success') {\r\n                swal(\r\n                    'Great!',\r\n                    'Successfully joined community!',\r\n                    'success',\r\n                );\r\n                setJoinSending(false);\r\n                setCommunity(response.data.community);\r\n            }\r\n            else {\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error with joining this community! Please try again',\r\n                    'error',\r\n                );\r\n                setJoinSending(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err.message);\r\n            swal(\r\n                'Uh Oh!',\r\n                'There was an error joining this community! Please try again',\r\n                'error',\r\n            );\r\n            setJoinSending(false);\r\n        });\r\n    }\r\n\r\n    function privateJoinRequest() {\r\n        //This function will handle sending a join notification to the moderator. \r\n        setJoinSending(true);\r\n        let data = JSON.stringify({\r\n            uniqueUserId: props.mainUser.uniqueUserId,\r\n            username: props.mainUser.username,\r\n            moderatorUniqueUserId: community.moderator.uniqueUserId,\r\n            name: community.name,\r\n        });\r\n\r\n        return axios({\r\n            method: 'POST',\r\n            url: 'http://192.168.0.9:3001/api/community/join/request',\r\n            data: data,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }).then(response => {\r\n            if(response.data === 'duplicate') {\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'You have already sent a request to join this community!',\r\n                    'error',\r\n                );\r\n                setJoinSending(false);\r\n            }\r\n            else {\r\n                swal(\r\n                    'Great!',\r\n                    'Community join request sent!',\r\n                    'success',\r\n                );\r\n                setJoinSending(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err.message);\r\n            swal(\r\n                'Uh Oh!',\r\n                'There was an error sending a request to join this community! Please try again.',\r\n                'error',\r\n            );\r\n            setJoinSending(false);\r\n        });\r\n    }\r\n\r\n    async function sendTextPost() {\r\n        //Function that will handle uploading a text post to the server. \r\n        setPosting(true); \r\n        let isValid = textFormRef.current.isFormValid();\r\n        if(!isValid) {\r\n            swal(\r\n                'Uh Oh!',\r\n                'Make sure the form is filled out properly',\r\n                'error',\r\n            );\r\n            setPosting(false);\r\n            return false;\r\n        }\r\n        else {\r\n            let date = new Date();\r\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n            let month = months[date.getMonth()];\r\n            let day = date.getDate();\r\n            let year = date.getFullYear();\r\n            let dateString = `${month} ${day}, ${year}`;\r\n            let data = JSON.stringify({\r\n                text: textPost,\r\n                title: textPostTitle,\r\n                uniqueUserId: props.mainUser.uniqueUserId,\r\n                username: props.mainUser.username,\r\n                community: community.name,\r\n                type: 'text',\r\n                dateString: dateString,\r\n                uniquePostId: Date.now() + props.mainUser.username + 'textpost' + 'info' + community.name,\r\n                context: 'community',\r\n                privacy: community.communityPrivacy,\r\n            });\r\n\r\n            return axios({\r\n                method: 'post',\r\n                url: 'http://192.168.0.9:3001/api/add/community/text/post',\r\n                data: data,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }).then(response => {\r\n                if(response.data.result === 'success') {\r\n                    props.dispatch({type: 'visitorPosts/updatePosts', payload: response.data.posts});\r\n                    swal(\r\n                        'Great!',\r\n                        'Successfully uploaded text post!',\r\n                        'success',\r\n                    );\r\n                    setTextPost('');\r\n                    setTextPostTitle('');\r\n                    setPosting(false);\r\n                    setPostDialog(false);\r\n                }\r\n                else {\r\n                    swal(\r\n                        'Uh Oh!',\r\n                        'There was an error sending that text post!',\r\n                        'error',\r\n                    );\r\n                    setPosting(false);\r\n                }\r\n            }).catch(err => {\r\n                console.log(err.message);\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error sending that text post! Please try again.',\r\n                    'error',\r\n                );\r\n                setPosting(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    function leaveCommunity() {\r\n        //This function will remove a member from a community if they are within it. \r\n        setJoinSending(true);\r\n        let data = JSON.stringify({\r\n            username: props.mainUser.username,\r\n            uniqueUserId: props.mainUser.uniqueUserId,\r\n            name: community.name,\r\n        });\r\n\r\n        return axios({\r\n            method: 'POST',\r\n            url: 'http://192.168.0.9:3001/api/leave/community',\r\n            data: data,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }).then(response => {\r\n            if(response.data.result === 'success') {\r\n                swal(\r\n                    'Great!',\r\n                    'You have successfully left this community',\r\n                    'success',\r\n                );\r\n                setCommunity(response.data.community);\r\n                setJoinSending(false);\r\n            }\r\n            else {\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error leaving this community! Please try again.',\r\n                    'error',\r\n                );\r\n                setJoinSending(false);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err.message);\r\n            swal(\r\n                'Uh Oh!',\r\n                'There was an error leaving this community! Please try again.',\r\n                'error',\r\n            );\r\n            setJoinSending(false);\r\n        });\r\n    }\r\n\r\n    if(community !== null) {\r\n        return (\r\n            <Grid \r\n                className={classes.root} \r\n                container \r\n            >\r\n                <Grid \r\n                    item \r\n                    xs={12} \r\n                    className={classes.centerContent} \r\n                >\r\n                    <Hidden \r\n                        smDown \r\n                    >\r\n                        <Avatar \r\n                            className={classes.avatarLg} \r\n                            src={`http://192.168.0.9:3001/api/get-photo/${community.avatar}`}\r\n                            alt={`${community.name} avatar`}\r\n                            title={`${community.name} avatar`}\r\n                            variant='square'\r\n                        />\r\n                    </Hidden>\r\n                    <Hidden \r\n                        mdUp \r\n                    >\r\n                        <Avatar \r\n                            src={`http://192.168.0.9:3001/api/get-photo/${community.avatar}`}\r\n                            className={classes.avatarSm} \r\n                            title={`${community.name} avatar`}\r\n                            alt={`${community.name} avatar`}\r\n                            variant='square'\r\n                        />\r\n                    </Hidden>\r\n                </Grid>\r\n                {/* The grid below will store the name of the community */}\r\n                <Grid \r\n                    item \r\n                    xs={12} \r\n                    className={classes.nameGrid} \r\n                >\r\n                    <Typography \r\n                        variant='h6' \r\n                        component='h6' \r\n                        align='center' \r\n                    >\r\n                        {community.name}\r\n                    </Typography>\r\n                </Grid>\r\n                {/* End of the grid to display the community name */}\r\n                {/* Below is the Grid to display the title of the community */}\r\n                <Grid \r\n                    item \r\n                    xs={12}\r\n                    className={classes.nameGrid} \r\n                >\r\n                    <Typography \r\n                        variant='body1' \r\n                        component='p'\r\n                        justify='left' \r\n                    >\r\n                        {community.title}\r\n                    </Typography>\r\n                </Grid>\r\n                {/* End of the Grid to display the title of the community */}\r\n                {/* Now create a button for the user if they are logged in, not a member, and the community is public */}\r\n                <Grid \r\n                    item \r\n                    xs={12}\r\n                    style={{\r\n                        margin: 'auto',\r\n                        textAlign: 'center',\r\n                        marginTop: 20,\r\n                    }}\r\n                >\r\n                    {/* Button if the user is logged in, not a member, and the community is public */}\r\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'public' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserId) &&\r\n                        <Button \r\n                            color='primary' \r\n                            variant='contained' \r\n                            onClick={publicJoin}\r\n                            disabled={joinSending}\r\n                        >\r\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\r\n                        </Button>\r\n                    }\r\n                    {/* Below is the Button if the user is logged in, not a member, and the community is private */}\r\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private' && community.moderator.uniqueUserId !== props.mainUser.uniqueUserid) &&\r\n                        <Button \r\n                            color='primary' \r\n                            variant='contained' \r\n                            onClick={privateJoinRequest}\r\n                            disabled={joinSending}\r\n                        >\r\n                            {joinSending ? <CircularProgress color='primary' /> : 'join'}\r\n                        </Button>\r\n                    }\r\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.moderator.uniqueUserId !==  props.mainUser.uniqueUserId) &&\r\n                        <Button \r\n                            color='primary'\r\n                            variant='outlined' \r\n                            onClick={leaveCommunity}\r\n                            disabled={joinSending}\r\n                        >\r\n                            {joinSending ? <CircularProgress color='primary' /> : 'leave'}\r\n                        </Button>\r\n                    }\r\n                    {/* Below, we will add a button to route someone who is not signed up or logged in to the sign up page */}\r\n                    {props.mainUser === null &&\r\n                        <Button \r\n                            color='primary' \r\n                            onClick={e => history.push('/')}\r\n                        >\r\n                            Sign up or log in!\r\n                        </Button>\r\n                    }\r\n                    {(props.mainUser === null && community.communityPrivacy === 'private') &&\r\n                        <Grid \r\n                            item \r\n                            xs={12} \r\n                        >\r\n                            <Typography \r\n                                variant='h6' \r\n                                component='h6' \r\n                                align='center' \r\n                            >\r\n                                This community is private\r\n                            </Typography>\r\n                        </Grid>\r\n                    }\r\n                    {(props.mainUser !== null && !_.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId) && community.communityPrivacy === 'private') && \r\n                        <Grid \r\n                            item \r\n                            xs={12} \r\n                        >\r\n                            <Typography \r\n                                variant='h6' \r\n                                component='h6' \r\n                                align='center' \r\n                            >\r\n                                This community is private\r\n                            </Typography>\r\n                        </Grid>\r\n                    }\r\n                    {/*Now I will have two buttons in two grids for members of the community to either chat or post content to the community */}\r\n                    {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\r\n                        <div>\r\n                            <Grid \r\n                                item \r\n                                xs={12} \r\n                                style={{\r\n                                    marginTop: 20,\r\n                                    marginBottom: 20,\r\n                                }}\r\n                            >\r\n                                <Button \r\n                                    variant='contained' \r\n                                    color='primary' \r\n                                    style={{\r\n                                        margin: 'auto',\r\n                                    }}\r\n                                >\r\n                                    Chat \r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid \r\n                                item \r\n                                xs={12} \r\n                            >\r\n                                <Button \r\n                                    color='primary' \r\n                                    variant='outlined' \r\n                                    onClick={e => setPostDialog(true)}\r\n                                >\r\n                                    Post \r\n                                </Button>\r\n                            </Grid>\r\n                        </div>\r\n                    }\r\n                    {/* This is the end of the two Grids for a the chat Button and the Post button */}\r\n                    {/*Below create the Dialog that will open when the user tries to make a post. Only show when a user is part of the community */}\r\n                </Grid>\r\n                {(props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId)) &&\r\n                    <Grid \r\n                        item \r\n                        xs={12} \r\n                    >\r\n                        <Dialog \r\n                            open={postDialog} \r\n                            fullScreen\r\n                        >\r\n                            <DialogContent>\r\n                                <AppBar \r\n                                    color='primary'\r\n                                    hidden={posting}\r\n                                >\r\n                                    <Icon \r\n                                        path={mdiClose} \r\n                                        size={1} \r\n                                        title='Dialog close' \r\n                                        style={{\r\n                                            cursor: 'pointer'\r\n                                        }}\r\n                                        onClick={() => setPostDialog(false)}\r\n                                    />\r\n                                    <Tabs \r\n                                        value={curTab}\r\n                                        onChange={(e, newVal) => setTab(newVal)} \r\n                                        centered\r\n                                    >\r\n                                        <Tab \r\n                                            {...a11yProps(0)} \r\n                                            label='Text' \r\n                                            disabled={posting}\r\n                                        />\r\n                                        <Tab \r\n                                            {...a11yProps(1)} \r\n                                            label='Photo' \r\n                                            disabled={posting}\r\n                                        />\r\n                                        <Tab \r\n                                            {...a11yProps(2)}\r\n                                            label='Video' \r\n                                            disabled={posting}\r\n                                        />\r\n                                        <Tab \r\n                                            {...a11yProps(3)}\r\n                                            label='Link'\r\n                                            disabled={posting} \r\n                                        />\r\n                                    </Tabs>\r\n                                </AppBar>\r\n                                <TabPanel \r\n                                    index={0}\r\n                                    value={curTab}\r\n                                >\r\n                                    <ValidatorForm\r\n                                        ref={textFormRef} \r\n                                        onSubmit={e => e.preventDefault()}\r\n                                    >\r\n                                        <Typography \r\n                                            variant='body1' \r\n                                            component='small' \r\n                                            color={textPostTitle.length > 75 ? 'error' : 'default'}\r\n                                            align='center' \r\n                                        >\r\n                                            {textPostTitle.length}/75\r\n                                        </Typography>\r\n                                        <TextValidator \r\n                                            label='Post title'\r\n                                            placeholder='Enter a title for your post of 75 characters or less'\r\n                                            value={textPostTitle}\r\n                                            onChange={e => setTextPostTitle(e.target.value)}\r\n                                            helperText='Enter a title for this text post'\r\n                                            validators={['titleLength']}\r\n                                            errorMessages={['Title can only be up to 75 characters']}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            color='primary'\r\n                                            variant='outlined'\r\n                                            fullWidth\r\n                                        />\r\n                                        <Typography \r\n                                            style={{\r\n                                                marginTop: 30,\r\n                                            }}\r\n                                            variant='body1' \r\n                                            component='small'\r\n                                            color={textPost.length > 3000 ? 'error' : 'default'}\r\n                                            align='center' \r\n                                        >\r\n                                            {textPost.length}/3000\r\n                                        </Typography>\r\n                                        <TextValidator \r\n                                            label='Text post'\r\n                                            placeholder='Share a text post!'\r\n                                            value={textPost}\r\n                                            onChange={e => setTextPost(e.target.value)}\r\n                                            helperText='Enter a text post of up to 3,000 characters long!'\r\n                                            validators={['requiredText', 'textLength']}\r\n                                            errorMessages={['Must enter some text!', 'Text post cannot be more than 3,000 characters long!']}\r\n                                            variant='outlined' \r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            color='primary' \r\n                                            variant='outlined' \r\n                                            rows={3}\r\n                                            multiline \r\n                                            required \r\n                                            fullWidth \r\n                                        />\r\n                                        <Button \r\n                                            variant='contained' \r\n                                            color='primary' \r\n                                            onClick={sendTextPost}\r\n                                            disabled={posting}\r\n                                        >\r\n                                            {posting ? <CircularProgress color='primary' /> : 'Upload'}\r\n                                        </Button>\r\n                                    </ValidatorForm>\r\n                                </TabPanel>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n                    </Grid>\r\n                }\r\n                {/*End of the Grid for the dialog box for posts if the user is logged in and a member of the community */}\r\n                {/* Below add the tabpanel for posts, about, and settings (only render settings if moderator is visiting page) */}\r\n                {(community.communityPrivacy === 'public' || (props.mainUser !== null && _.find(community.members, member => member.uniqueUserId === props.mainUser.uniqueUserId))) &&\r\n                    <Grid \r\n                        item \r\n                        xs={12} \r\n                    >\r\n                        <Paper \r\n                            className={classes.paper}\r\n                            style={{\r\n                                marginTop: 10,\r\n                            }}\r\n                        >\r\n                            <Tabs \r\n                                value={curTab2} \r\n                                onChange={(e, newVal) => setTab2(newVal)}\r\n                                centered\r\n                                style={{\r\n                                    color: 'rgb(255, 255, 255)',\r\n                                }}\r\n                            >\r\n                                <Tab \r\n                                    label='Posts' \r\n                                    {...a11yProps(0)} \r\n                                />\r\n                                <Tab \r\n                                    label='About' \r\n                                    {...a11yProps(1)} \r\n                                />\r\n                                {(props.mainUser !== null && community.moderator.uniqueUserId === props.mainUser.uniqueUserId) &&\r\n                                    <Tab \r\n                                        label='Settings' \r\n                                        {...a11yProps(2)} \r\n                                    />\r\n                                }\r\n                            </Tabs>\r\n                        </Paper>\r\n                    </Grid>\r\n                }\r\n                {/* End of the Grid for the main sections of the community page */}\r\n            </Grid>\r\n        );\r\n    }\r\n    else {\r\n        //If the community is null, simply return a Backdrop with a CircularProgress inside \r\n        return (\r\n            <Backdrop \r\n                open={true} \r\n            >\r\n                <CircularProgress \r\n                    color='primary' \r\n                />\r\n            </Backdrop>\r\n        );\r\n    }  \r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        mainUser: state.userReducer.user,\r\n        primary: state.userThemeReducer.primary,\r\n        posts: state.visitorPostsReducer.posts,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Community);"]},"metadata":{},"sourceType":"module"}