{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/simeonikudabo/Downloads/geocities/src/components/MessagesComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport { useHistory } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Icon from '@mdi/react';\nimport { mdiClose } from '@mdi/js';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nconst userFilterOptions = createFilterOptions({\n  matchFrom: 'any',\n  stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username\n}); //Filter options to search for users to potentially block. \n\nconst useStyles = makeStyles(() => ({\n  topGrid: {\n    marginTop: 100\n  },\n  topMarg: {\n    marginTop: 20,\n    textAlign: 'center'\n  }\n}));\n\nfunction MessagesComponent(props) {\n  _s();\n\n  const classes = useStyles(); //Custom classes.\n\n  const history = useHistory(); //Manipulate window location\n\n  const [threads, setThreads] = useState([]); //Variable and setter for the list of threads. \n\n  const [openDialog, setOpenDialog] = useState(false); //Variable and setter for the compose message dialog\n\n  const [users, setUsers] = useState([]); //Variable and setter for each user to search.\n\n  const [msgTarget, setMsgTarget] = useState(users[0]); //Variable and setter for the GeoUser we want to send a message to\n\n  useEffect(() => {\n    if (props.user === null) {\n      swal('Uh Oh!', 'You must be logged in to access messages!', 'error');\n      history.push('/');\n    } else {\n      //Grab threads and all GeoUsers.\n      return axios({\n        method: 'GET',\n        url: `http://10.162.93.179:3001/api/get/threads/${props.user.uniqueUserId}`\n      }).then(response => {\n        props.dispatch({\n          type: 'user/updateUser',\n          payload: response.data.user\n        });\n        props.dispatch({\n          type: 'ThemeChange',\n          payload: response.data.user.profileTheme\n        });\n        setUsers(response.data.users);\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error retreiving your message threads', 'error');\n        history.goBack(1);\n      });\n    }\n  });\n\n  if (props.user !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.topGrid,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h4\",\n          align: \"center\",\n          children: threads.length < 1 ? 'No messages' : 'Messages'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.topMarg,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: e => setOpenDialog(!openDialog),\n          children: \"Compose +\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: openDialog,\n          fullScreen: true,\n          children: /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(AppBar, {\n              color: \"primary\",\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                path: mdiClose,\n                size: 1,\n                \"aria-label\": \"Close dialog\",\n                title: \"Close\",\n                onClick: e => setOpenDialog(false),\n                style: {\n                  cursor: 'pointer',\n                  color: 'rgb(255, 255, 255)'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                component: \"h4\",\n                style: {\n                  margin: 'auto',\n                  color: 'rgb(255, 255, 255)'\n                },\n                children: \"Create message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              style: {\n                marginTop: 100\n              },\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                value: setMsgTarget,\n                filterOptions: userFilterOptions,\n                options: users,\n                getOptionLabel: option => option.firstName + ' ' + option.lastName,\n                renderOption: option => /*#__PURE__*/_jsxDEV(ListItem, {\n                  alignItems: \"flex-start\",\n                  onClick: () => setMsgTarget(option),\n                  children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                    children: /*#__PURE__*/_jsxDEV(Avatar, {\n                      src: `http://10.162.93.179:3001/api/get-photo/${option.avatar}`,\n                      alt: `${option.username}`,\n                      title: `${option.username}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 156,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h6\",\n                      component: \"h6\",\n                      children: option.username\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 164,\n                      columnNumber: 53\n                    }, this),\n                    secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                      component: \"small\",\n                      color: \"textSecondary\",\n                      children: [option.firstName, \" \", option.lastName]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 41\n                }, this),\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  color: \"primary\",\n                  variant: \"outlined\",\n                  label: \"Search users\",\n                  placeholder: \"To\",\n                  helperText: \"Select a user to send a message to\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  fullWidth: true,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(MessagesComponent, \"Wq81C0emf5Ny3FktCHidLnSCEyU=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = MessagesComponent;\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(MessagesComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"MessagesComponent\");","map":{"version":3,"sources":["/Users/simeonikudabo/Downloads/geocities/src/components/MessagesComponent.js"],"names":["React","useState","useEffect","Typography","Grid","connect","makeStyles","Backdrop","CircularProgress","axios","swal","useHistory","Button","Dialog","DialogContent","AppBar","Icon","mdiClose","TextField","ListItem","ListItemText","ListItemAvatar","Avatar","Autocomplete","createFilterOptions","userFilterOptions","matchFrom","stringify","option","firstName","lastName","username","useStyles","topGrid","marginTop","topMarg","textAlign","MessagesComponent","props","classes","history","threads","setThreads","openDialog","setOpenDialog","users","setUsers","msgTarget","setMsgTarget","user","push","method","url","uniqueUserId","then","response","dispatch","type","payload","data","profileTheme","catch","err","console","log","message","goBack","length","e","cursor","color","margin","avatar","params","shrink","mapStateToProps","state","userReducer","primary","userThemeReducer"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAkD,+BAAlD;AAEA,MAAMC,iBAAiB,GAAGD,mBAAmB,CAAC;AAC1CE,EAAAA,SAAS,EAAE,KAD+B;AAE1CC,EAAAA,SAAS,EAAEC,MAAM,IAAIA,MAAM,CAACC,SAAP,GAAmB,GAAnB,GAAyBD,MAAM,CAACE,QAAhC,GAA2C,GAA3C,GAAiDF,MAAM,CAACG;AAFnC,CAAD,CAA7C,C,CAGI;;AAEJ,MAAMC,SAAS,GAAG1B,UAAU,CAAC,OAAO;AAChC2B,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE;AADN,GADuB;AAIhCC,EAAAA,OAAO,EAAE;AACLD,IAAAA,SAAS,EAAE,EADN;AAELE,IAAAA,SAAS,EAAE;AAFN;AAJuB,CAAP,CAAD,CAA5B;;AAUA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAC9B,QAAMC,OAAO,GAAGP,SAAS,EAAzB,CAD8B,CACD;;AAC7B,QAAMQ,OAAO,GAAG7B,UAAU,EAA1B,CAF8B,CAEA;;AAC9B,QAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwBzC,QAAQ,CAAC,EAAD,CAAtC,CAH8B,CAGa;;AAC3C,QAAM,CAAC0C,UAAD,EAAaC,aAAb,IAA8B3C,QAAQ,CAAC,KAAD,CAA5C,CAJ8B,CAIuB;;AACrD,QAAM,CAAC4C,KAAD,EAAQC,QAAR,IAAoB7C,QAAQ,CAAC,EAAD,CAAlC,CAL8B,CAKU;;AACxC,QAAM,CAAC8C,SAAD,EAAYC,YAAZ,IAA4B/C,QAAQ,CAAC4C,KAAK,CAAC,CAAD,CAAN,CAA1C,CAN8B,CAMwB;;AAEtD3C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGoC,KAAK,CAACW,IAAN,KAAe,IAAlB,EAAwB;AACpBvC,MAAAA,IAAI,CACA,QADA,EAEA,2CAFA,EAGA,OAHA,CAAJ;AAMA8B,MAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACH,KARD,MASK;AACD;AACA,aAAOzC,KAAK,CAAC;AACT0C,QAAAA,MAAM,EAAE,KADC;AAETC,QAAAA,GAAG,EAAG,6CAA4Cd,KAAK,CAACW,IAAN,CAAWI,YAAa;AAFjE,OAAD,CAAL,CAGJC,IAHI,CAGCC,QAAQ,IAAI;AAChBjB,QAAAA,KAAK,CAACkB,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAE,iBAAP;AAA0BC,UAAAA,OAAO,EAAEH,QAAQ,CAACI,IAAT,CAAcV;AAAjD,SAAf;AACAX,QAAAA,KAAK,CAACkB,QAAN,CAAe;AAACC,UAAAA,IAAI,EAAE,aAAP;AAAsBC,UAAAA,OAAO,EAAEH,QAAQ,CAACI,IAAT,CAAcV,IAAd,CAAmBW;AAAlD,SAAf;AACAd,QAAAA,QAAQ,CAACS,QAAQ,CAACI,IAAT,CAAcd,KAAf,CAAR;AACH,OAPM,EAOJgB,KAPI,CAOEC,GAAG,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACAvD,QAAAA,IAAI,CACA,QADA,EAEA,oDAFA,EAGA,OAHA,CAAJ;AAKA8B,QAAAA,OAAO,CAAC0B,MAAR,CAAe,CAAf;AACH,OAfM,CAAP;AAgBH;AACJ,GA7BQ,CAAT;;AA+BA,MAAG5B,KAAK,CAACW,IAAN,KAAe,IAAlB,EAAwB;AACpB,wBACI,QAAC,IAAD;AACI,MAAA,SAAS,MADb;AAEI,MAAA,SAAS,EAAEV,OAAO,CAACN,OAFvB;AAAA,8BAII,QAAC,IAAD;AACI,QAAA,EAAE,EAAE,EADR;AAEI,QAAA,IAAI,MAFR;AAAA,+BAII,QAAC,UAAD;AACI,UAAA,OAAO,EAAC,IADZ;AAEI,UAAA,SAAS,EAAC,IAFd;AAGI,UAAA,KAAK,EAAC,QAHV;AAAA,oBAKKQ,OAAO,CAAC0B,MAAR,GAAiB,CAAjB,GAAqB,aAArB,GAAqC;AAL1C;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAgBI,QAAC,IAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,EAAE,EAAE,EAFR;AAGI,QAAA,SAAS,EAAE5B,OAAO,CAACJ,OAHvB;AAAA,gCAKI,QAAC,MAAD;AACI,UAAA,KAAK,EAAC,SADV;AAEI,UAAA,OAAO,EAAC,WAFZ;AAGI,UAAA,OAAO,EAAEiC,CAAC,IAAIxB,aAAa,CAAC,CAACD,UAAF,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAYI,QAAC,MAAD;AACI,UAAA,IAAI,EAAEA,UADV;AAEI,UAAA,UAAU,MAFd;AAAA,iCAII,QAAC,aAAD;AAAA,oCACI,QAAC,MAAD;AACI,cAAA,KAAK,EAAC,SADV;AAAA,sCAGI,QAAC,IAAD;AACI,gBAAA,IAAI,EAAE1B,QADV;AAEI,gBAAA,IAAI,EAAE,CAFV;AAGI,8BAAW,cAHf;AAII,gBAAA,KAAK,EAAC,OAJV;AAKI,gBAAA,OAAO,EAAEmD,CAAC,IAAIxB,aAAa,CAAC,KAAD,CAL/B;AAMI,gBAAA,KAAK,EAAE;AACHyB,kBAAAA,MAAM,EAAE,SADL;AAEHC,kBAAAA,KAAK,EAAE;AAFJ;AANX;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAcI,QAAC,UAAD;AACI,gBAAA,OAAO,EAAC,IADZ;AAEI,gBAAA,SAAS,EAAC,IAFd;AAGI,gBAAA,KAAK,EAAE;AACHC,kBAAAA,MAAM,EAAE,MADL;AAEHD,kBAAAA,KAAK,EAAE;AAFJ,iBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eA0BI,QAAC,IAAD;AACI,cAAA,IAAI,MADR;AAEI,cAAA,EAAE,EAAE,EAFR;AAGI,cAAA,KAAK,EAAE;AACHpC,gBAAAA,SAAS,EAAE;AADR,eAHX;AAAA,qCAOI,QAAC,YAAD;AACI,gBAAA,KAAK,EAAEc,YADX;AAEI,gBAAA,aAAa,EAAEvB,iBAFnB;AAGI,gBAAA,OAAO,EAAEoB,KAHb;AAII,gBAAA,cAAc,EAAEjB,MAAM,IAAIA,MAAM,CAACC,SAAP,GAAmB,GAAnB,GAAyBD,MAAM,CAACE,QAJ9D;AAKI,gBAAA,YAAY,EAAEF,MAAM,iBAChB,QAAC,QAAD;AACI,kBAAA,UAAU,EAAC,YADf;AAEI,kBAAA,OAAO,EAAE,MAAMoB,YAAY,CAACpB,MAAD,CAF/B;AAAA,0CAII,QAAC,cAAD;AAAA,2CACI,QAAC,MAAD;AACI,sBAAA,GAAG,EAAG,2CAA0CA,MAAM,CAAC4C,MAAO,EADlE;AAEI,sBAAA,GAAG,EAAG,GAAE5C,MAAM,CAACG,QAAS,EAF5B;AAGI,sBAAA,KAAK,EAAG,GAAEH,MAAM,CAACG,QAAS;AAH9B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,0BAJJ,eAWI,QAAC,YAAD;AACI,oBAAA,OAAO,eACH,QAAC,UAAD;AACI,sBAAA,OAAO,EAAC,IADZ;AAEI,sBAAA,SAAS,EAAC,IAFd;AAAA,gCAIKH,MAAM,CAACG;AAJZ;AAAA;AAAA;AAAA;AAAA,4BAFR;AASI,oBAAA,SAAS,eACL,QAAC,UAAD;AACI,sBAAA,SAAS,EAAC,OADd;AAEI,sBAAA,KAAK,EAAC,eAFV;AAAA,iCAIKH,MAAM,CAACC,SAJZ,OAIwBD,MAAM,CAACE,QAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAVR;AAAA;AAAA;AAAA;AAAA,0BAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,wBANR;AAqCI,gBAAA,WAAW,EAAE2C,MAAM,iBACf,QAAC,SAAD,OACQA,MADR;AAEI,kBAAA,KAAK,EAAC,SAFV;AAGI,kBAAA,OAAO,EAAC,UAHZ;AAII,kBAAA,KAAK,EAAC,cAJV;AAKI,kBAAA,WAAW,EAAC,IALhB;AAMI,kBAAA,UAAU,EAAC,oCANf;AAOI,kBAAA,eAAe,EAAE;AACbC,oBAAAA,MAAM,EAAE;AADK,mBAPrB;AAUI,kBAAA,SAAS,MAVb;AAWI,kBAAA,QAAQ;AAXZ;AAAA;AAAA;AAAA;AAAA;AAtCR;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,oBA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA6HH,GA9HD,MA+HK;AACD,wBACI,QAAC,QAAD;AACI,MAAA,IAAI,EAAE,IADV;AAAA,6BAGI,QAAC,gBAAD;AACI,QAAA,KAAK,EAAC;AADV;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AACJ;;GAjLQrC,iB;UACWL,S,EACArB,U;;;KAFX0B,iB;;AAmLT,SAASsC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACH3B,IAAAA,IAAI,EAAE2B,KAAK,CAACC,WAAN,CAAkB5B,IADrB;AAEH6B,IAAAA,OAAO,EAAEF,KAAK,CAACG,gBAAN,CAAuBD;AAF7B,GAAP;AAIH;;AAED,eAAezE,OAAO,CAACsE,eAAD,CAAP,CAAyBtC,iBAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport { useHistory } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Icon from '@mdi/react';\nimport { mdiClose } from '@mdi/js';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\nconst userFilterOptions = createFilterOptions({\n    matchFrom: 'any',\n    stringify: option => option.firstName + ' ' + option.lastName + ' ' + option.username,\n}); //Filter options to search for users to potentially block. \n\nconst useStyles = makeStyles(() => ({\n    topGrid: {\n        marginTop: 100,\n    },\n    topMarg: {\n        marginTop: 20,\n        textAlign: 'center',\n    },\n}));\n\nfunction MessagesComponent(props) {\n    const classes = useStyles(); //Custom classes.\n    const history = useHistory(); //Manipulate window location\n    const [threads, setThreads] = useState([]);//Variable and setter for the list of threads. \n    const [openDialog, setOpenDialog] = useState(false); //Variable and setter for the compose message dialog\n    const [users, setUsers] = useState([]); //Variable and setter for each user to search.\n    const [msgTarget, setMsgTarget] = useState(users[0]); //Variable and setter for the GeoUser we want to send a message to\n\n    useEffect(() => {\n        if(props.user === null) {\n            swal(\n                'Uh Oh!',\n                'You must be logged in to access messages!',\n                'error',\n            );\n\n            history.push('/');\n        }\n        else {\n            //Grab threads and all GeoUsers.\n            return axios({\n                method: 'GET',\n                url: `http://10.162.93.179:3001/api/get/threads/${props.user.uniqueUserId}`,\n            }).then(response => {\n                props.dispatch({type: 'user/updateUser', payload: response.data.user});\n                props.dispatch({type: 'ThemeChange', payload: response.data.user.profileTheme});\n                setUsers(response.data.users);\n            }).catch(err => {\n                console.log(err.message);\n                swal(\n                    'Uh Oh!',\n                    'There was an error retreiving your message threads',\n                    'error',\n                );\n                history.goBack(1);\n            });\n        }\n    });\n\n    if(props.user !== null) {\n        return(\n            <Grid \n                container   \n                className={classes.topGrid} \n            >\n                <Grid \n                    xs={12} \n                    item \n                >\n                    <Typography \n                        variant='h4'\n                        component='h4'\n                        align='center' \n                    >\n                        {threads.length < 1 ? 'No messages' : 'Messages'}\n                    </Typography>\n                </Grid>\n                <Grid \n                    item\n                    xs={12} \n                    className={classes.topMarg}\n                >\n                    <Button \n                        color='primary' \n                        variant='contained' \n                        onClick={e => setOpenDialog(!openDialog)}\n                    >\n                        Compose +\n                    </Button>\n                    <Dialog \n                        open={openDialog} \n                        fullScreen\n                    >\n                        <DialogContent>\n                            <AppBar \n                                color='primary'\n                            >\n                                <Icon \n                                    path={mdiClose} \n                                    size={1} \n                                    aria-label='Close dialog' \n                                    title='Close' \n                                    onClick={e => setOpenDialog(false)}\n                                    style={{\n                                        cursor: 'pointer',\n                                        color: 'rgb(255, 255, 255)'\n                                    }}\n                                />\n                                <Typography \n                                    variant='h4' \n                                    component='h4' \n                                    style={{\n                                        margin: 'auto',\n                                        color: 'rgb(255, 255, 255)',\n                                    }}\n                                >\n                                    Create message\n                                </Typography>\n                            </AppBar>\n                            <Grid \n                                item \n                                xs={12} \n                                style={{\n                                    marginTop: 100,\n                                }}\n                            >\n                                <Autocomplete \n                                    value={setMsgTarget}\n                                    filterOptions={userFilterOptions}\n                                    options={users}\n                                    getOptionLabel={option => option.firstName + ' ' + option.lastName}\n                                    renderOption={option => (\n                                        <ListItem \n                                            alignItems='flex-start' \n                                            onClick={() => setMsgTarget(option)}\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar \n                                                    src={`http://10.162.93.179:3001/api/get-photo/${option.avatar}`}\n                                                    alt={`${option.username}`}\n                                                    title={`${option.username}`} \n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText \n                                                primary={\n                                                    <Typography \n                                                        variant='h6' \n                                                        component='h6' \n                                                    >\n                                                        {option.username}\n                                                    </Typography>\n                                                }\n                                                secondary={\n                                                    <Typography \n                                                        component='small'\n                                                        color='textSecondary' \n                                                    >\n                                                        {option.firstName} {option.lastName}\n                                                    </Typography>\n                                                }\n                                            />\n                                        </ListItem>\n                                    )}\n                                    renderInput={params => (\n                                        <TextField \n                                            {...params} \n                                            color='primary'\n                                            variant='outlined' \n                                            label='Search users' \n                                            placeholder='To'\n                                            helperText='Select a user to send a message to'\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            fullWidth \n                                            required \n                                        />\n                                    )}\n                                />\n                            </Grid>\n                        </DialogContent>\n                    </Dialog>\n                </Grid>\n            </Grid>\n        );\n    }\n    else {\n        return(\n            <Backdrop \n                open={true}\n            >\n                <CircularProgress \n                    color='primary' \n                />\n            </Backdrop>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.userReducer.user,\n        primary: state.userThemeReducer.primary,\n    };\n}\n\nexport default connect(mapStateToProps)(MessagesComponent);"]},"metadata":{},"sourceType":"module"}