{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\bobma\\\\Downloads\\\\excite-app\\\\src\\\\components\\\\Signup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport FnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtils, KeyboardDatePicker } from '@material-ui/pickers';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport Cities from '../cities.json';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  },\n  card: {\n    margin: 'auto',\n    maxWidth: 450\n  },\n  topField: {\n    marginTop: 20\n  },\n  topMarg: {\n    marginTop: 30\n  }\n}));\nexport default function Signup(props) {\n  _s();\n\n  let myCities = JSON.parse(Cities); //The cities that will be parsed from JSON for a user to select a town.\n\n  const classes = useStyles(); //Styles for the component.\n\n  const formRef = useRef(null); //Ref for the ValidatorForm component.\n\n  const [username, setUsername] = useState(null); //Username for the user.\n\n  const [password, setPasssword] = useState(null); //Password for the user.\n\n  const [firstName, setFirstname] = useState(null); //First name of the user.\n\n  const [lastName, setLastname] = useState(null); //Last name of the user.\n\n  const [email, setEmail] = useState(null); //Email of the user. Will need some regex rules.\n\n  const [town, setTown] = useState(myCities[0]); //The users hometown will come from a list of towns.\n\n  const [userState, setUserState] = useState(null); //This will be the home state that the user is from.\n\n  const [college, setCollege] = useState(null); //This will be the college the user attended. \"None\" if they didn't attend one. \n\n  const [birthdate, setBirthDate] = useState(null); //The user must select a birthdate. \n\n  const [interests, setInterests] = useState([]); //This array will store the interests the user has. \n\n  const [twitterHandle, setTwitterHandle] = useState(null); //The twitter handle for the user. \n\n  const [instaHandle, setInstaHandle] = useState(null); //Sets the Instagram handle for the user. \n\n  const [youtubeChannel, setYoutubeChannel] = useState(null); //Sets the Youtube channel for the user. \n\n  const [avatar, setAvatar] = useState(null); //This will store the Avatar for the user. \n\n  const [profileTheme, setProfileTheme] = useState(null); //This will set the profile theme color for the user. \n\n  const [agreeToTerms, setAgreeToTerms] = useState(false); //This will check to see if the user agrees to the terms of service. \n\n  const [bio, setBio] = useState(null); //This will store the mini bio the user creates for their profile.\n\n  const [currentLocation, setCurrentLocation] = useState({}); //Object that will store keys for the users current latitude and longitude. \n\n  const regularExpressions = {\n    usernameExpression: /^\\w+$/,\n    alphaStartRe: /^[A-Za-z]+$/,\n    emailRe: /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/\n  }; //Regular expressions to make sure username is valid. \n\n  useEffect(() => {\n    //First we will get the current Geolocation of the user if they've enabled location tracking. \n    if (\"geolocation\" in navigator) {\n      //If the user has enabled geolocation, get the current position and save latitude and longitude for currentLocation.\n      navigator.geolocation.getCurrentPosition(function (position) {\n        console.log(\"Latitude is :\", position.coords.latitude);\n        console.log(\"Longitude is :\", position.coords.longitude);\n        setCurrentLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, function (err) {\n        //Error callback for location tracking. Set currentPosition to null.\n        console.log(err.message);\n        setCurrentLocation(null);\n      });\n    } else {\n      //Else, if the user has not enabled Geolocation, set the currentLocation to null. \n      console.log('User has not given Geolocation permissions');\n      setCurrentLocation(null);\n    } //We will parse the cities.json data to form an Array \n    //myCities = JSON.parse(Cities);\n    //This validation rule will ensure that the username follows the proper regex rules. \n\n\n    ValidatorForm.addValidationRule('usernameValid', v => {\n      if (!regularExpressions.usernameExpression.test(v)) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //This rule will ensure that the username and password is at least 6 characters. \n\n    ValidatorForm.addValidationRule('enoughCharacters', v => {\n      if (v.length < 6) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //This rule will ensure that a username starts with an Alphanumberic character. \n\n    ValidatorForm.addValidationRule('validStartChar', v => {\n      if (!regularExpressions.alphaStartRe.test(v.slice(0, 1))) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //This rule will ensure that a username is not more than 24 characters long.\n\n    ValidatorForm.addValidationRule('tooManyChars', v => {\n      if (v.length > 24) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //This rule will make sure the length of certain fields are valid \n\n    ValidatorForm.addValidationRule('isFilled', v => {\n      if (v.length < 1) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //This rule will ensure that emails have a valid email format \n\n    ValidatorForm.addValidationRule('emailValid', v => {\n      if (!regularExpressions.emailRe.test(v)) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }, []);\n\n  function preventSpaces(e) {\n    //This function will prevent a user from adding spaces to their username \n    if (e.keyCode === 32) {\n      e.preventDefault();\n      return false;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.card,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: [\"Sign up today!\", /*#__PURE__*/_jsxDEV(SvgIcon, {\n              style: {\n                color: 'rgb(0, 20, 60)'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M 10.050781 0.222656 C 9.261719 0.355469 8.6875 0.765625 8.472656 1.363281 C 8.402344 1.558594 8.394531 1.902344 8.449219 2.085938 C 8.621094 2.644531 9.289062 3.136719 9.988281 3.226562 C 10.082031 3.234375 10.347656 3.246094 10.574219 3.242188 C 11.0625 3.238281 11.152344 3.257812 11.332031 3.414062 C 11.5 3.5625 11.566406 3.738281 11.585938 4.046875 C 11.589844 4.179688 11.585938 4.332031 11.574219 4.386719 L 11.550781 4.480469 L 11.214844 4.503906 C 8.734375 4.695312 6.742188 5.953125 5.914062 7.84375 C 5.265625 9.324219 5.53125 11.039062 6.597656 12.300781 C 6.824219 12.570312 7.167969 12.90625 7.351562 13.035156 C 7.410156 13.078125 7.460938 13.117188 7.460938 13.121094 C 7.460938 13.125 7.359375 13.179688 7.230469 13.238281 C 6.515625 13.582031 5.902344 14.085938 5.648438 14.535156 C 5.445312 14.898438 5.371094 15.320312 5.460938 15.632812 C 5.617188 16.203125 6.226562 16.734375 7.144531 17.109375 C 7.308594 17.175781 7.433594 17.230469 7.425781 17.234375 C 7.421875 17.238281 7.292969 17.285156 7.140625 17.339844 C 5.796875 17.804688 4.949219 18.566406 4.664062 19.566406 C 4.582031 19.851562 4.574219 20.457031 4.648438 20.691406 C 4.828125 21.277344 5.1875 21.757812 5.785156 22.230469 C 6.644531 22.902344 7.910156 23.375 9.476562 23.597656 C 10.308594 23.71875 10.734375 23.746094 11.914062 23.746094 C 12.980469 23.746094 13.308594 23.734375 14.046875 23.664062 C 14.910156 23.578125 15.722656 23.4375 16.425781 23.253906 C 18.523438 22.695312 19.863281 21.703125 20.296875 20.386719 C 20.414062 20.035156 20.433594 19.890625 20.433594 19.449219 C 20.433594 19.085938 20.421875 18.996094 20.371094 18.808594 C 20.210938 18.242188 19.941406 17.851562 19.417969 17.445312 C 18.839844 16.992188 18.0625 16.664062 17.011719 16.4375 C 15.882812 16.1875 14.839844 16.105469 12.277344 16.074219 C 10.996094 16.058594 10.128906 16.042969 9.957031 16.03125 C 9.875 16.027344 9.707031 16.019531 9.578125 16.011719 C 8.390625 15.945312 7.71875 15.707031 7.449219 15.261719 C 7.375 15.144531 7.367188 15.101562 7.367188 14.945312 C 7.367188 14.78125 7.375 14.753906 7.464844 14.609375 C 7.519531 14.523438 7.617188 14.40625 7.679688 14.347656 C 7.832031 14.210938 8.136719 14.023438 8.386719 13.914062 L 8.59375 13.824219 L 8.691406 13.871094 C 8.949219 13.996094 9.578125 14.21875 9.902344 14.300781 C 12.304688 14.929688 14.867188 14.4375 16.605469 13.019531 C 18.023438 11.859375 18.652344 10.246094 18.296875 8.664062 C 18.117188 7.855469 17.640625 7.050781 16.949219 6.378906 C 16.722656 6.15625 16.144531 5.714844 15.871094 5.550781 C 15.1875 5.144531 14.410156 4.835938 13.644531 4.660156 C 13.386719 4.601562 12.800781 4.511719 12.683594 4.511719 C 12.628906 4.511719 12.582031 4.503906 12.570312 4.492188 C 12.5625 4.480469 12.578125 4.363281 12.609375 4.234375 C 12.699219 3.8125 12.734375 3.5 12.734375 3.003906 C 12.730469 2.464844 12.691406 2.203125 12.558594 1.796875 C 12.273438 0.953125 11.609375 0.386719 10.734375 0.242188 C 10.574219 0.214844 10.175781 0.203125 10.050781 0.222656 Z M 12.519531 6.125 C 14.375 6.332031 15.828125 7.410156 16.210938 8.871094 C 16.265625 9.058594 16.273438 9.167969 16.273438 9.519531 C 16.273438 9.882812 16.265625 9.972656 16.210938 10.183594 C 15.96875 11.101562 15.3125 11.871094 14.34375 12.378906 C 13.535156 12.804688 12.53125 13.011719 11.59375 12.945312 C 10.949219 12.898438 10.546875 12.8125 9.96875 12.585938 C 8.765625 12.117188 7.933594 11.265625 7.640625 10.203125 C 7.5625 9.90625 7.554688 9.183594 7.632812 8.886719 C 8.003906 7.429688 9.464844 6.335938 11.308594 6.125 C 11.636719 6.089844 12.191406 6.085938 12.519531 6.125 Z M 9.394531 17.675781 C 9.945312 17.738281 10.980469 17.777344 12.8125 17.816406 C 14.164062 17.84375 14.667969 17.863281 15.253906 17.933594 C 15.9375 18.007812 16.398438 18.109375 16.84375 18.269531 C 17.6875 18.574219 18.121094 19.050781 18.121094 19.660156 C 18.121094 20.058594 17.925781 20.394531 17.492188 20.726562 C 16.746094 21.304688 15.425781 21.6875 13.632812 21.855469 C 13.140625 21.902344 11.339844 21.910156 10.894531 21.867188 C 9.703125 21.753906 8.859375 21.570312 8.21875 21.285156 C 7.699219 21.054688 7.308594 20.742188 7.121094 20.414062 C 6.972656 20.148438 6.929688 19.777344 7.015625 19.460938 C 7.191406 18.816406 7.855469 18.191406 8.832031 17.746094 C 8.953125 17.691406 9.066406 17.644531 9.082031 17.644531 C 9.097656 17.644531 9.238281 17.660156 9.394531 17.675781 Z M 9.394531 17.675781\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M 11.617188 8.546875 C 11.261719 8.625 10.957031 8.828125 10.792969 9.101562 C 10.691406 9.261719 10.691406 9.269531 10.691406 9.527344 C 10.691406 9.792969 10.691406 9.792969 10.796875 9.960938 C 11.070312 10.394531 11.644531 10.617188 12.242188 10.519531 C 12.75 10.433594 13.160156 10.082031 13.238281 9.667969 C 13.328125 9.171875 12.929688 8.691406 12.320312 8.550781 C 12.144531 8.511719 11.792969 8.507812 11.617188 8.546875 Z M 11.617188 8.546875 \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n            ref: formRef,\n            onSubmit: e => e.preventDefault(),\n            children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n              type: \"text\",\n              label: \"Username\",\n              placeholder: \"Username\",\n              value: username,\n              onChange: e => setUsername(e.target.value),\n              onKeyDown: preventSpaces,\n              color: \"primary\",\n              variant: \"outlined\",\n              className: classes.topField,\n              InputLabelProps: {\n                shrink: true\n              },\n              helperText: \"Username must be between 6 and 24 characters, can only contain letters, numbers, and underscores, and must start with a letter!\",\n              validators: ['usernameValid', 'enoughCharacters', 'validStartChar', 'tooManyChars'],\n              errorMessages: ['Username can only consist of letters numbers and underscores. Must start with a letter!', 'Username must be at least 6 characters long!', 'Username must start with a letter!', 'Username cannot be more than 24 characters long!'],\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              className: classes.topMarg,\n              type: \"password\",\n              label: \"Password\",\n              placeholder: \"Password\",\n              value: password,\n              onChange: e => setPasssword(e.target.value),\n              variant: \"outlined\",\n              color: \"primary\",\n              InputLabelProps: {\n                shrink: true\n              },\n              helperText: \"Password must be at least 6 characters long!\",\n              validators: ['enoughCharacters'],\n              errorMessages: ['Password must be at least 6 characters long!'],\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              className: classes.topMarg,\n              type: \"text\",\n              label: \"First name\",\n              placeholder: \"First name\",\n              value: firstName,\n              onChange: e => setFirstname(e.target.value),\n              variant: \"outlined\",\n              color: \"primary\",\n              InputLabelProps: {\n                shrink: true\n              },\n              helperText: \"First name must match the first name used on your Facebook profile!\",\n              validators: ['isFilled'],\n              errorMessages: ['First name must match the first name used on your Facebook profile!'],\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              className: classes.topMarg,\n              type: \"text\",\n              label: \"Last name\",\n              placeholder: \"Last name\",\n              value: lastName,\n              onChange: e => setLastname(e.target.value),\n              variant: \"outlined\",\n              color: \"primary\",\n              InputLabelProps: {\n                shrink: true\n              },\n              helperText: \"Last name must match the last name used on your Facebook profile!\",\n              validators: ['isFilled'],\n              errorMessages: ['Last name must match the last name used on your Facebook profile!'],\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              className: classes.topMarg,\n              type: \"email\",\n              label: \"Email\",\n              placeholder: \"Email\",\n              value: email,\n              onChange: e => setEmail(e.target.value),\n              helperText: \"Must enter a valid email!\",\n              variant: \"outlined\",\n              color: \"primary\",\n              InputLabelProps: {\n                shrink: true\n              },\n              validators: ['isFilled', 'validEmail'],\n              errorMessages: ['Must enter an email address!', 'Email must be valid!'],\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.topMarg,\n              component: \"fieldset\",\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                component: \"legend\",\n                children: \"Select your city\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                options: myCities,\n                getOptionLabel: option => option,\n                value: town,\n                onChange: setTown,\n                renderOption: option => /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  component: \"p\",\n                  children: option\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 41\n                }, this),\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  color: \"primary\",\n                  variant: \"outlined\",\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 41\n                }, this),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                children: \"If your city is not in the list, select a nearby city!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Signup, \"XWvF0V05y+/czbwCz6L5Dz+f0w4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/Signup.js"],"names":["React","useState","useEffect","useRef","Grid","Typography","Card","CardContent","ValidatorForm","TextValidator","FormControl","FormLabel","FormHelperText","Select","Checkbox","TextField","FnsUtils","MuiPickersUtils","KeyboardDatePicker","Autocomplete","SvgIcon","makeStyles","connect","Cities","useStyles","theme","root","padding","spacing","card","margin","maxWidth","topField","marginTop","topMarg","Signup","props","myCities","JSON","parse","classes","formRef","username","setUsername","password","setPasssword","firstName","setFirstname","lastName","setLastname","email","setEmail","town","setTown","userState","setUserState","college","setCollege","birthdate","setBirthDate","interests","setInterests","twitterHandle","setTwitterHandle","instaHandle","setInstaHandle","youtubeChannel","setYoutubeChannel","avatar","setAvatar","profileTheme","setProfileTheme","agreeToTerms","setAgreeToTerms","bio","setBio","currentLocation","setCurrentLocation","regularExpressions","usernameExpression","alphaStartRe","emailRe","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","err","message","addValidationRule","v","test","length","slice","preventSpaces","e","keyCode","preventDefault","color","target","value","shrink","option","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtils,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport Cities from '../cities.json';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    card: {\r\n        margin: 'auto',\r\n        maxWidth: 450,\r\n    },\r\n    topField: {\r\n        marginTop: 20,\r\n    },\r\n    topMarg: {\r\n        marginTop: 30,\r\n    },\r\n}));\r\n\r\nexport default function Signup(props) {\r\n    let myCities = JSON.parse(Cities);//The cities that will be parsed from JSON for a user to select a town.\r\n    const classes = useStyles(); //Styles for the component.\r\n    const formRef = useRef(null); //Ref for the ValidatorForm component.\r\n    const [username, setUsername] = useState(null); //Username for the user.\r\n    const [password, setPasssword] = useState(null); //Password for the user.\r\n    const [firstName, setFirstname] = useState(null); //First name of the user.\r\n    const [lastName, setLastname] = useState(null); //Last name of the user.\r\n    const [email, setEmail] = useState(null); //Email of the user. Will need some regex rules.\r\n    const [town, setTown] = useState(myCities[0]); //The users hometown will come from a list of towns.\r\n    const [userState, setUserState] = useState(null); //This will be the home state that the user is from.\r\n    const [college, setCollege] = useState(null); //This will be the college the user attended. \"None\" if they didn't attend one. \r\n    const [birthdate, setBirthDate] = useState(null); //The user must select a birthdate. \r\n    const [interests, setInterests] = useState([]); //This array will store the interests the user has. \r\n    const [twitterHandle, setTwitterHandle] = useState(null); //The twitter handle for the user. \r\n    const [instaHandle, setInstaHandle] = useState(null); //Sets the Instagram handle for the user. \r\n    const [youtubeChannel, setYoutubeChannel] = useState(null); //Sets the Youtube channel for the user. \r\n    const [avatar, setAvatar] = useState(null); //This will store the Avatar for the user. \r\n    const [profileTheme, setProfileTheme] = useState(null); //This will set the profile theme color for the user. \r\n    const [agreeToTerms, setAgreeToTerms] = useState(false); //This will check to see if the user agrees to the terms of service. \r\n    const [bio, setBio] = useState(null); //This will store the mini bio the user creates for their profile.\r\n    const [currentLocation, setCurrentLocation] = useState({}); //Object that will store keys for the users current latitude and longitude. \r\n    const regularExpressions = {\r\n        usernameExpression: /^\\w+$/,\r\n        alphaStartRe: /^[A-Za-z]+$/,\r\n        emailRe: /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/,\r\n    }; //Regular expressions to make sure username is valid. \r\n    useEffect(() => {\r\n        //First we will get the current Geolocation of the user if they've enabled location tracking. \r\n        if(\"geolocation\" in navigator) {\r\n            //If the user has enabled geolocation, get the current position and save latitude and longitude for currentLocation.\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n                console.log(\"Latitude is :\", position.coords.latitude);\r\n                console.log(\"Longitude is :\", position.coords.longitude);\r\n                setCurrentLocation({\r\n                    latitude: position.coords.latitude,\r\n                    longitude: position.coords.longitude,\r\n                });\r\n              }, function(err) {\r\n                  //Error callback for location tracking. Set currentPosition to null.\r\n                  console.log(err.message);\r\n                  setCurrentLocation(null);\r\n              });\r\n        }\r\n        else {\r\n            //Else, if the user has not enabled Geolocation, set the currentLocation to null. \r\n            console.log('User has not given Geolocation permissions');\r\n            setCurrentLocation(null);\r\n        }\r\n\r\n        //We will parse the cities.json data to form an Array \r\n        //myCities = JSON.parse(Cities);\r\n\r\n        //This validation rule will ensure that the username follows the proper regex rules. \r\n        ValidatorForm.addValidationRule('usernameValid', v => {\r\n            if(!regularExpressions.usernameExpression.test(v)) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //This rule will ensure that the username and password is at least 6 characters. \r\n        ValidatorForm.addValidationRule('enoughCharacters', v => {\r\n            if(v.length < 6) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //This rule will ensure that a username starts with an Alphanumberic character. \r\n        ValidatorForm.addValidationRule('validStartChar', v => {\r\n            if(!regularExpressions.alphaStartRe.test(v.slice(0, 1))) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //This rule will ensure that a username is not more than 24 characters long.\r\n        ValidatorForm.addValidationRule('tooManyChars', v => {\r\n            if(v.length > 24) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //This rule will make sure the length of certain fields are valid \r\n        ValidatorForm.addValidationRule('isFilled', v => {\r\n            if(v.length < 1) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //This rule will ensure that emails have a valid email format \r\n        ValidatorForm.addValidationRule('emailValid', v => {\r\n            if(!regularExpressions.emailRe.test(v)) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n    }, []);\r\n\r\n    function preventSpaces(e) {\r\n        //This function will prevent a user from adding spaces to their username \r\n        if(e.keyCode === 32) {\r\n            e.preventDefault();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid \r\n            container \r\n        >\r\n            <Grid \r\n                item \r\n                xs={12} \r\n            >\r\n                <Card \r\n                    className={classes.card} \r\n                >\r\n                    <CardContent>\r\n                        <Typography \r\n                        variant='h6' \r\n                        component='h6' \r\n                        align='center'\r\n                        >\r\n                            Sign up today!\r\n                            <SvgIcon  \r\n                                style={{\r\n                                    color: 'rgb(0, 20, 60)',\r\n                                }}\r\n                            >\r\n                                <path d=\"M 10.050781 0.222656 C 9.261719 0.355469 8.6875 0.765625 8.472656 1.363281 C 8.402344 1.558594 8.394531 1.902344 8.449219 2.085938 C 8.621094 2.644531 9.289062 3.136719 9.988281 3.226562 C 10.082031 3.234375 10.347656 3.246094 10.574219 3.242188 C 11.0625 3.238281 11.152344 3.257812 11.332031 3.414062 C 11.5 3.5625 11.566406 3.738281 11.585938 4.046875 C 11.589844 4.179688 11.585938 4.332031 11.574219 4.386719 L 11.550781 4.480469 L 11.214844 4.503906 C 8.734375 4.695312 6.742188 5.953125 5.914062 7.84375 C 5.265625 9.324219 5.53125 11.039062 6.597656 12.300781 C 6.824219 12.570312 7.167969 12.90625 7.351562 13.035156 C 7.410156 13.078125 7.460938 13.117188 7.460938 13.121094 C 7.460938 13.125 7.359375 13.179688 7.230469 13.238281 C 6.515625 13.582031 5.902344 14.085938 5.648438 14.535156 C 5.445312 14.898438 5.371094 15.320312 5.460938 15.632812 C 5.617188 16.203125 6.226562 16.734375 7.144531 17.109375 C 7.308594 17.175781 7.433594 17.230469 7.425781 17.234375 C 7.421875 17.238281 7.292969 17.285156 7.140625 17.339844 C 5.796875 17.804688 4.949219 18.566406 4.664062 19.566406 C 4.582031 19.851562 4.574219 20.457031 4.648438 20.691406 C 4.828125 21.277344 5.1875 21.757812 5.785156 22.230469 C 6.644531 22.902344 7.910156 23.375 9.476562 23.597656 C 10.308594 23.71875 10.734375 23.746094 11.914062 23.746094 C 12.980469 23.746094 13.308594 23.734375 14.046875 23.664062 C 14.910156 23.578125 15.722656 23.4375 16.425781 23.253906 C 18.523438 22.695312 19.863281 21.703125 20.296875 20.386719 C 20.414062 20.035156 20.433594 19.890625 20.433594 19.449219 C 20.433594 19.085938 20.421875 18.996094 20.371094 18.808594 C 20.210938 18.242188 19.941406 17.851562 19.417969 17.445312 C 18.839844 16.992188 18.0625 16.664062 17.011719 16.4375 C 15.882812 16.1875 14.839844 16.105469 12.277344 16.074219 C 10.996094 16.058594 10.128906 16.042969 9.957031 16.03125 C 9.875 16.027344 9.707031 16.019531 9.578125 16.011719 C 8.390625 15.945312 7.71875 15.707031 7.449219 15.261719 C 7.375 15.144531 7.367188 15.101562 7.367188 14.945312 C 7.367188 14.78125 7.375 14.753906 7.464844 14.609375 C 7.519531 14.523438 7.617188 14.40625 7.679688 14.347656 C 7.832031 14.210938 8.136719 14.023438 8.386719 13.914062 L 8.59375 13.824219 L 8.691406 13.871094 C 8.949219 13.996094 9.578125 14.21875 9.902344 14.300781 C 12.304688 14.929688 14.867188 14.4375 16.605469 13.019531 C 18.023438 11.859375 18.652344 10.246094 18.296875 8.664062 C 18.117188 7.855469 17.640625 7.050781 16.949219 6.378906 C 16.722656 6.15625 16.144531 5.714844 15.871094 5.550781 C 15.1875 5.144531 14.410156 4.835938 13.644531 4.660156 C 13.386719 4.601562 12.800781 4.511719 12.683594 4.511719 C 12.628906 4.511719 12.582031 4.503906 12.570312 4.492188 C 12.5625 4.480469 12.578125 4.363281 12.609375 4.234375 C 12.699219 3.8125 12.734375 3.5 12.734375 3.003906 C 12.730469 2.464844 12.691406 2.203125 12.558594 1.796875 C 12.273438 0.953125 11.609375 0.386719 10.734375 0.242188 C 10.574219 0.214844 10.175781 0.203125 10.050781 0.222656 Z M 12.519531 6.125 C 14.375 6.332031 15.828125 7.410156 16.210938 8.871094 C 16.265625 9.058594 16.273438 9.167969 16.273438 9.519531 C 16.273438 9.882812 16.265625 9.972656 16.210938 10.183594 C 15.96875 11.101562 15.3125 11.871094 14.34375 12.378906 C 13.535156 12.804688 12.53125 13.011719 11.59375 12.945312 C 10.949219 12.898438 10.546875 12.8125 9.96875 12.585938 C 8.765625 12.117188 7.933594 11.265625 7.640625 10.203125 C 7.5625 9.90625 7.554688 9.183594 7.632812 8.886719 C 8.003906 7.429688 9.464844 6.335938 11.308594 6.125 C 11.636719 6.089844 12.191406 6.085938 12.519531 6.125 Z M 9.394531 17.675781 C 9.945312 17.738281 10.980469 17.777344 12.8125 17.816406 C 14.164062 17.84375 14.667969 17.863281 15.253906 17.933594 C 15.9375 18.007812 16.398438 18.109375 16.84375 18.269531 C 17.6875 18.574219 18.121094 19.050781 18.121094 19.660156 C 18.121094 20.058594 17.925781 20.394531 17.492188 20.726562 C 16.746094 21.304688 15.425781 21.6875 13.632812 21.855469 C 13.140625 21.902344 11.339844 21.910156 10.894531 21.867188 C 9.703125 21.753906 8.859375 21.570312 8.21875 21.285156 C 7.699219 21.054688 7.308594 20.742188 7.121094 20.414062 C 6.972656 20.148438 6.929688 19.777344 7.015625 19.460938 C 7.191406 18.816406 7.855469 18.191406 8.832031 17.746094 C 8.953125 17.691406 9.066406 17.644531 9.082031 17.644531 C 9.097656 17.644531 9.238281 17.660156 9.394531 17.675781 Z M 9.394531 17.675781\" />\r\n                                <path d=\"M 11.617188 8.546875 C 11.261719 8.625 10.957031 8.828125 10.792969 9.101562 C 10.691406 9.261719 10.691406 9.269531 10.691406 9.527344 C 10.691406 9.792969 10.691406 9.792969 10.796875 9.960938 C 11.070312 10.394531 11.644531 10.617188 12.242188 10.519531 C 12.75 10.433594 13.160156 10.082031 13.238281 9.667969 C 13.328125 9.171875 12.929688 8.691406 12.320312 8.550781 C 12.144531 8.511719 11.792969 8.507812 11.617188 8.546875 Z M 11.617188 8.546875 \"/>\r\n                            </SvgIcon>\r\n                        </Typography>\r\n                        <ValidatorForm \r\n                            ref={formRef}\r\n                            onSubmit={e => e.preventDefault()}\r\n                        >\r\n                            <TextValidator \r\n                                type='text' \r\n                                label='Username'\r\n                                placeholder='Username'\r\n                                value={username}\r\n                                onChange={e => setUsername(e.target.value)}\r\n                                onKeyDown={preventSpaces}\r\n                                color='primary'\r\n                                variant='outlined'\r\n                                className={classes.topField}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                helperText='Username must be between 6 and 24 characters, can only contain letters, numbers, and underscores, and must start with a letter!'\r\n                                validators={['usernameValid', 'enoughCharacters', 'validStartChar', 'tooManyChars']}\r\n                                errorMessages={['Username can only consist of letters numbers and underscores. Must start with a letter!', 'Username must be at least 6 characters long!', 'Username must start with a letter!', 'Username cannot be more than 24 characters long!']}\r\n                                fullWidth\r\n                                required\r\n                            />\r\n                            <TextValidator \r\n                                className={classes.topMarg}\r\n                                type='password'\r\n                                label='Password'\r\n                                placeholder='Password'\r\n                                value={password}\r\n                                onChange={e => setPasssword(e.target.value)}\r\n                                variant='outlined' \r\n                                color='primary' \r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                helperText='Password must be at least 6 characters long!'\r\n                                validators={['enoughCharacters']}\r\n                                errorMessages={['Password must be at least 6 characters long!']}\r\n                                fullWidth \r\n                                required \r\n                            />\r\n                            <TextValidator \r\n                                className={classes.topMarg}\r\n                                type='text' \r\n                                label='First name'\r\n                                placeholder='First name' \r\n                                value={firstName}\r\n                                onChange={e => setFirstname(e.target.value)} \r\n                                variant='outlined' \r\n                                color='primary'\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                helperText='First name must match the first name used on your Facebook profile!'\r\n                                validators={['isFilled']}\r\n                                errorMessages={['First name must match the first name used on your Facebook profile!']}\r\n                                fullWidth \r\n                                required \r\n                            />\r\n                            <TextValidator \r\n                                className={classes.topMarg} \r\n                                type='text'\r\n                                label='Last name'\r\n                                placeholder='Last name'\r\n                                value={lastName}\r\n                                onChange={e => setLastname(e.target.value)}\r\n                                variant='outlined'\r\n                                color='primary' \r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                helperText='Last name must match the last name used on your Facebook profile!'\r\n                                validators={['isFilled']}\r\n                                errorMessages={['Last name must match the last name used on your Facebook profile!']}\r\n                                fullWidth \r\n                                required \r\n                            />\r\n                            <TextValidator \r\n                                className={classes.topMarg}\r\n                                type='email'\r\n                                label='Email'\r\n                                placeholder='Email'\r\n                                value={email}\r\n                                onChange={e => setEmail(e.target.value)}\r\n                                helperText='Must enter a valid email!'\r\n                                variant='outlined' \r\n                                color='primary' \r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                validators={['isFilled', 'validEmail']}\r\n                                errorMessages={['Must enter an email address!', 'Email must be valid!']}\r\n                                fullWidth \r\n                                required \r\n                            />\r\n                            <FormControl \r\n                                className={classes.topMarg} \r\n                                component='fieldset' \r\n                            >\r\n                                <FormLabel \r\n                                    component='legend' \r\n                                >\r\n                                    Select your city \r\n                                </FormLabel>\r\n                                <Autocomplete \r\n                                    options={myCities} \r\n                                    getOptionLabel={option => option} \r\n                                    value={town}\r\n                                    onChange={setTown}\r\n                                    renderOption={option => (\r\n                                        <Typography \r\n                                            variant='body1' \r\n                                            component='p' \r\n                                        >\r\n                                            {option}\r\n                                        </Typography>\r\n                                    )}\r\n                                    renderInput={params => (\r\n                                        <TextField \r\n                                            {...params}\r\n                                            color='primary' \r\n                                            variant='outlined'\r\n                                            fullWidth\r\n                                        />\r\n                                    )}\r\n                                    required \r\n                                />\r\n                                <FormHelperText>\r\n                                    If your city is not in the list, select a nearby city!\r\n                                </FormHelperText>\r\n                            </FormControl>\r\n                        </ValidatorForm>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}