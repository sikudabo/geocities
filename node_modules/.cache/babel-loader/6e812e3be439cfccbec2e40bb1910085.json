{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\bobma\\\\Downloads\\\\excite-app\\\\src\\\\components\\\\GeoUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport * as _ from 'underscore';\nimport swal from 'sweetalert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Icon from '@mdi/react';\nimport { mdiCheckBold, mdiPencil, mdiClose, mdiCamera, mdiVideo, mdiTwitter, mdiInstagram, mdiYoutube } from '@mdi/js';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Divider from '@material-ui/core/Divider';\nimport Link from '@material-ui/core/Link';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction TabPanel(props) {\n  //This component will serve as the panel for each individual tab.\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: index !== value,\n    id: `tabpanel-${index}`,\n    \"aria-label\": `tab-${index}`,\n    \"aria-labelledby\": `tab-${index}`,\n    ...other,\n    style: {\n      marginTop: 100\n    },\n    children: value === index && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: true,\n      style: {\n        textAlign: 'center'\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TabPanel;\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  value: PropTypes.any.isRequired,\n  index: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `tab-${index}`,\n    'aria-controls': `tabpanel-${index}`\n  };\n}\n\nfunction GeoUser(props) {\n  _s();\n\n  const [geoUser, setGeoUser] = useState(null); //This is the variable and setter that will set the value of the user for the page we are visiting. \n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      marginTop: 20\n    },\n    profileAvatar: {\n      height: 128,\n      width: 128,\n      margin: 'auto'\n    },\n    profileAvatarLg: {\n      height: 168,\n      width: 168,\n      margin: 'auto'\n    },\n    usernameDisplay: {\n      marginTop: 40,\n      margin: 'auto'\n    },\n    statsInfo: {\n      marginTop: 40,\n      textAlign: 'center'\n    },\n    paper: {\n      backgroundColor: geoUser ? geoUser.profileTheme : 'rgb(0, 20, 60)',\n      color: 'rgb(255, 255, 255)',\n      marginTop: 40\n    },\n    input: {\n      display: 'none'\n    }\n  }));\n  const classes = useStyles();\n  const history = useHistory();\n  const params = useParams();\n  const [curTab, setCurTab] = useState(0); //This is the variable and setter for the current tab that we will see based on \"posts\" \"about\" and \"events\".\n\n  const [posts, setPosts] = useState([]); //This is the variable and the setter for the current posts for the GeoCities user who's page another user is visiting. \n\n  useEffect(() => {\n    //Check if the state for the global user exists. If not, we will push this user back to the login page.\n    if (!props.mainUser) {\n      //TODO: Will need to create a seperate route to handle a user who isn't on GeoCities who might visit a page.\n      history.goBack(1);\n    } else if (props.mainUser) {\n      //We will grab the user of the current profile that we want to see, along with retrieving and updating the value of the current user. \n      return axios({\n        method: 'GET',\n        url: `http://192.168.0.9:3001/api/get/geo/user/${params.uniqueUserId}/${props.mainUser.uniqueUserId}`\n      }).then(response => {\n        if (response.data.geoUser) {\n          if (response.data.geoUser.uniqueUserId === props.mainUser.uniqueUserId) {\n            history.push('/profile');\n          } else {\n            alert('Fetched user');\n            console.log(response.data.geoUser); //TODO: set up functionality to take the mainUser back one page if they are blocked.\n\n            setGeoUser(response.data.geoUser); //set the geoUser state var to the response user. \n\n            setPosts(response.data.posts); //Set the local posts state variable to the geoUsers posts.\n\n            props.dispatch({\n              type: 'user/updateUser',\n              payload: response.data.mainUser\n            }); //Set the global main user variable. \n            //Change the theme of the page to that of the geoUser. \n          }\n        } else {\n          swal('Uh Oh!', 'There was an error finding that user! That user may no longer exist.', 'error');\n          history.goBack(1);\n        }\n      }).catch(err => {\n        console.log(err.message);\n        swal('Uh Oh!', 'There was an error finding that user! Please try again.', 'error');\n        history.goBack(1);\n      });\n    }\n  }, []);\n\n  if (geoUser !== null) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Hidden, {\n            mdUp: true,\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              className: classes.profileAvatar,\n              src: geoUser ? `http://192.168.0.9:3001/api/get-photo/${geoUser.avatar}` : '',\n              title: geoUser ? `${geoUser.username}` : '',\n              alt: geoUser ? `${geoUser.username}` : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n            smDown: true,\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              className: classes.profileAvatarLg,\n              src: geoUser ? `http://192.168.0.9:3001/api/get-photo/${geoUser.avatar}` : '',\n              title: geoUser ? `${geoUser.username}` : '',\n              alt: geoUser ? `${geoUser.username}` : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: geoUser ? geoUser.username : 'haha'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(GeoUser, \"lCH2SLlnrC02i1YmrM1fs+E4i3I=\", false, function () {\n  return [useStyles, useHistory, useParams];\n});\n\n_c2 = GeoUser;\n\nfunction mapStateToProps(state) {\n  //Retrieve the main global user along with the theme state variable to change to theme to the one the geoUser has set.\n  return {\n    mainUser: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(GeoUser);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"GeoUser\");","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/GeoUser.js"],"names":["React","useState","useEffect","useRef","useHistory","useParams","Grid","Avatar","Typography","Button","Tabs","Tab","Dialog","DialogContent","AppBar","Toolbar","connect","axios","_","swal","makeStyles","Hidden","Icon","mdiCheckBold","mdiPencil","mdiClose","mdiCamera","mdiVideo","mdiTwitter","mdiInstagram","mdiYoutube","Paper","PropTypes","ListItem","ListItemText","ListItemIcon","Divider","Link","Backdrop","CircularProgress","TabPanel","props","children","value","index","other","marginTop","textAlign","propTypes","node","any","isRequired","a11yProps","id","GeoUser","geoUser","setGeoUser","useStyles","theme","root","profileAvatar","height","width","margin","profileAvatarLg","usernameDisplay","statsInfo","paper","backgroundColor","profileTheme","color","input","display","classes","history","params","curTab","setCurTab","posts","setPosts","mainUser","goBack","method","url","uniqueUserId","then","response","data","push","alert","console","log","dispatch","type","payload","catch","err","message","avatar","username","mapStateToProps","state","userReducer","user","primary","userThemeReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef}  from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport * as _ from 'underscore';\r\nimport swal from 'sweetalert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Icon from '@mdi/react';\r\nimport { mdiCheckBold, mdiPencil, mdiClose, mdiCamera, mdiVideo, mdiTwitter, mdiInstagram, mdiYoutube } from '@mdi/js';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Link from '@material-ui/core/Link';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction TabPanel(props) {\r\n    //This component will serve as the panel for each individual tab.\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div \r\n            role='tabpanel'\r\n            hidden={index !== value} \r\n            id={`tabpanel-${index}`}\r\n            aria-label={`tab-${index}`}\r\n            aria-labelledby={`tab-${index}`}\r\n            {...other}\r\n            style={{\r\n                marginTop: 100,\r\n            }}\r\n        >\r\n            {value === index &&\r\n                <Grid \r\n                    item \r\n                    xs\r\n                    style={{\r\n                        textAlign: 'center',\r\n                    }}\r\n                >\r\n                    {children}\r\n                </Grid>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    value: PropTypes.any.isRequired,\r\n    index: PropTypes.any.isRequired,\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `tab-${index}`,\r\n        'aria-controls': `tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction GeoUser(props) {\r\n    const [geoUser, setGeoUser] = useState(null)//This is the variable and setter that will set the value of the user for the page we are visiting. \r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            marginTop: 20,\r\n        },\r\n        profileAvatar: {\r\n            height: 128,\r\n            width: 128,\r\n            margin: 'auto',\r\n        },\r\n        profileAvatarLg: {\r\n            height: 168,\r\n            width: 168,\r\n            margin: 'auto',\r\n        },\r\n        usernameDisplay: {\r\n            marginTop: 40,\r\n            margin: 'auto',\r\n        },\r\n        statsInfo: {\r\n            marginTop: 40,\r\n            textAlign: 'center',\r\n        },\r\n        paper: {\r\n            backgroundColor: geoUser ? geoUser.profileTheme : 'rgb(0, 20, 60)',\r\n            color: 'rgb(255, 255, 255)',\r\n            marginTop: 40,\r\n        },\r\n        input: {\r\n            display: 'none',\r\n        },\r\n    }));\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const params = useParams();\r\n    const [curTab, setCurTab] = useState(0); //This is the variable and setter for the current tab that we will see based on \"posts\" \"about\" and \"events\".\r\n    const [posts, setPosts] = useState([]); //This is the variable and the setter for the current posts for the GeoCities user who's page another user is visiting. \r\n\r\n    useEffect(() => {\r\n        //Check if the state for the global user exists. If not, we will push this user back to the login page.\r\n        if(!props.mainUser) {\r\n            //TODO: Will need to create a seperate route to handle a user who isn't on GeoCities who might visit a page.\r\n            history.goBack(1);\r\n        }\r\n        else if(props.mainUser) {\r\n            //We will grab the user of the current profile that we want to see, along with retrieving and updating the value of the current user. \r\n            return axios({\r\n                method: 'GET',\r\n                url: `http://192.168.0.9:3001/api/get/geo/user/${params.uniqueUserId}/${props.mainUser.uniqueUserId}`,\r\n            }).then(response => {\r\n                if(response.data.geoUser) {\r\n                    if(response.data.geoUser.uniqueUserId === props.mainUser.uniqueUserId) {\r\n                        history.push('/profile');\r\n                    }\r\n                    else {\r\n                        alert('Fetched user');\r\n                        console.log(response.data.geoUser);\r\n                        //TODO: set up functionality to take the mainUser back one page if they are blocked.\r\n                        setGeoUser(response.data.geoUser); //set the geoUser state var to the response user. \r\n                        setPosts(response.data.posts); //Set the local posts state variable to the geoUsers posts.\r\n                        props.dispatch({type: 'user/updateUser', payload: response.data.mainUser}); //Set the global main user variable. \r\n                        //Change the theme of the page to that of the geoUser. \r\n                    }\r\n                }\r\n                else {\r\n                    swal(\r\n                        'Uh Oh!',\r\n                        'There was an error finding that user! That user may no longer exist.',\r\n                        'error',\r\n                    );\r\n                    history.goBack(1);\r\n                }\r\n            }).catch(err => {\r\n                console.log(err.message);\r\n                swal(\r\n                    'Uh Oh!',\r\n                    'There was an error finding that user! Please try again.',\r\n                    'error',\r\n                );\r\n                history.goBack(1);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    if(geoUser !== null) {\r\n        return (\r\n            <Grid \r\n                className={classes.root} \r\n            >\r\n                <Grid \r\n                    item \r\n                    container\r\n                    xs={12} \r\n                >\r\n                    <Grid \r\n                        item \r\n                        xs={12} \r\n                    >\r\n                        {/* Below is the geoUser avatar that will be 128x128 pixels */}\r\n                        <Hidden \r\n                            mdUp \r\n                        >\r\n                            <Avatar \r\n                                className={classes.profileAvatar} \r\n                                src={geoUser ? `http://192.168.0.9:3001/api/get-photo/${geoUser.avatar}` : ''}\r\n                                title={geoUser ? `${geoUser.username}` : ''}\r\n                                alt={geoUser ? `${geoUser.username}` : ''} \r\n                            />\r\n                        </Hidden>\r\n                        {/* Below will display the avatar on medium screen and up devices */}\r\n                        <Hidden \r\n                            smDown \r\n                        >\r\n                            <Avatar \r\n                                className={classes.profileAvatarLg} \r\n                                src={geoUser ? `http://192.168.0.9:3001/api/get-photo/${geoUser.avatar}` : ''} \r\n                                title={geoUser ? `${geoUser.username}` : ''}\r\n                                alt={geoUser ? `${geoUser.username}` : ''} \r\n                            />\r\n                        </Hidden>\r\n                        <Typography \r\n                            variant='h4' \r\n                        >\r\n                            {geoUser ? geoUser.username : 'haha'}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <Backdrop \r\n                open={true} \r\n            >\r\n                <CircularProgress \r\n                    color='primary' \r\n                />\r\n            </Backdrop>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    //Retrieve the main global user along with the theme state variable to change to theme to the one the geoUser has set.\r\n    return {\r\n        mainUser: state.userReducer.user,\r\n        primary: state.userThemeReducer.primary,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(GeoUser);"]},"metadata":{},"sourceType":"module"}