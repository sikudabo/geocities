{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\bobma\\\\Downloads\\\\excite-app\\\\src\\\\components\\\\BuildCommunity.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/CameraAlt';\nimport Swal from 'sweetalert';\nimport axios from 'axios';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Resizer from 'react-image-file-resizer';\nimport { SwatchesPicker } from 'react-color';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(() => ({\n  root: {\n    marginTop: 100\n  },\n  card: {\n    margin: 'auto',\n    maxWidth: 450\n  },\n  topField: {\n    marginTop: 20\n  },\n  fieldMarg: {\n    marginTop: 30\n  }\n}));\n\nfunction BuildCommunity(props) {\n  _s();\n\n  const classes = useStyles(); //Custom styles\n\n  const history = useHistory(); //History API access\n\n  const formRef = useRef(null); //Form reference\n\n  const [name, setName] = useState(''); //State for community name. \n\n  const [title, setTitle] = useState(''); //State for community title (100 character max).\n\n  const [topics, setTopics] = useState([]); //Community topics.\n\n  const [communityTheme, setCommunityTheme] = useState('#00143C'); //Community theme color. Default to dark blue.\n\n  const [avatar, setAvatar] = useState(null); //Community profile image. \n\n  const [description, setDescription] = useState(''); //Community description string. \n\n  const regularExpressions = {\n    nameExpression: /^\\w+$/,\n    alphaStartRe: /^[A-Za-z]+$/\n  }; //Regular expressions for a valid community name with letters, numbers, and underscores, along with another regex for the community name to start with a letter.\n\n  useEffect(() => {\n    //First, check to see if the user is logged into GeoCities. Redirect them to login page if not. \n    if (props.mainUser === null) {\n      swal('Uh Oh!', 'You must be logged in to build a community!', 'error');\n      history.push('/');\n    } else {\n      props.dispatch({\n        type: 'ThemeChange',\n        payload: props.mainUser.profileTheme\n      }); //Update profile theme.\n    } //Now add some form validation rules. \n    //Rule that the name (or title) not be empty. \n\n\n    ValidatorForm.addValidationRule('nameRequired', v => {\n      if (v === '') {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Validation rule that the length of a name for a community be between 6 and 30 characters\n\n    ValidatorForm.addValidationRule('nameLength', v => {\n      if (v.length < 6) {\n        return false;\n      } else if (v.length > 50) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //Validation rule that the title of a community be between 10 and 75 characters \n\n    ValidatorForm.addValidationRule('titleLength', v => {\n      if (v.length < 10) {\n        return false;\n      } else if (v.length > 75) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //The rule below ensures that the name is valid and follows regex rules.\n\n    ValidatorForm.addValidationRule('nameRe', v => {\n      if (!regularExpressions.nameExpression.test(v)) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //The rule below ensures the name starts with an alpha character \n\n    ValidatorForm.addValidationRule('alphaStart', v => {\n      if (!regularExpressions.alphaStartRe.test(v)) {\n        return false;\n      } else {\n        return true;\n      }\n    }); //The rule below ensures that the community description is at least 10 characters and at most 300. \n\n    ValidatorForm.addValidationRule('descriptionLength', v => {\n      if (v.length < 10) {\n        return false;\n      } else if (v.length > 300) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }, []);\n\n  if (props.mainUser !== null) {\n    //Return this layout if the user is signed in. \n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.card,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            align: \"center\",\n            children: \"Build a GeoCities community!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this);\n  } else {\n    //If the mainUser is null, simply return a circular progress until we load the user, or redirect to the log in page. \n\n    /*#__PURE__*/\n    _jsxDEV(Backdrop, {\n      open: true,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(BuildCommunity, \"ujKWmMMwRj1thylV4ERnuBHGvjA=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = BuildCommunity;\n\nfunction mapStateToProps(state) {\n  return {\n    mainUser: state.userReducer.user,\n    primary: state.userThemeReducer.primary\n  };\n}\n\nexport default connect(mapStateToProps)(BuildCommunity);\n\nvar _c;\n\n$RefreshReg$(_c, \"BuildCommunity\");","map":{"version":3,"sources":["c:/Users/bobma/Downloads/excite-app/src/components/BuildCommunity.js"],"names":["React","useState","useEffect","useRef","Grid","Card","CardContent","Typography","ValidatorForm","TextValidator","Checkbox","FormControl","FormLabel","FormControlLabel","FormGroup","Button","CameraIcon","Swal","axios","Backdrop","CircularProgress","Resizer","SwatchesPicker","useHistory","connect","makeStyles","useStyles","root","marginTop","card","margin","maxWidth","topField","fieldMarg","BuildCommunity","props","classes","history","formRef","name","setName","title","setTitle","topics","setTopics","communityTheme","setCommunityTheme","avatar","setAvatar","description","setDescription","regularExpressions","nameExpression","alphaStartRe","mainUser","swal","push","dispatch","type","payload","profileTheme","addValidationRule","v","length","test","mapStateToProps","state","userReducer","user","primary","userThemeReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport CameraIcon from '@material-ui/icons/CameraAlt';\r\nimport Swal from 'sweetalert';\r\nimport axios from 'axios'; \r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'; \r\nimport Resizer from 'react-image-file-resizer';\r\nimport { SwatchesPicker } from 'react-color';\r\nimport { useHistory }  from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        marginTop: 100,\r\n    },\r\n    card: {\r\n        margin: 'auto',\r\n        maxWidth: 450,\r\n    },\r\n    topField: {\r\n        marginTop: 20,\r\n    },\r\n    fieldMarg: {\r\n        marginTop: 30,\r\n    },\r\n}));\r\n\r\nfunction BuildCommunity(props) {\r\n    const classes = useStyles(); //Custom styles\r\n    const history = useHistory(); //History API access\r\n    const formRef = useRef(null); //Form reference\r\n    const [name, setName] = useState(''); //State for community name. \r\n    const [title, setTitle] = useState(''); //State for community title (100 character max).\r\n    const [topics, setTopics] = useState([]); //Community topics.\r\n    const [communityTheme, setCommunityTheme] = useState('#00143C'); //Community theme color. Default to dark blue.\r\n    const [avatar, setAvatar] = useState(null); //Community profile image. \r\n    const [description, setDescription] = useState(''); //Community description string. \r\n    const regularExpressions = {\r\n        nameExpression: /^\\w+$/,\r\n        alphaStartRe: /^[A-Za-z]+$/,\r\n    }; //Regular expressions for a valid community name with letters, numbers, and underscores, along with another regex for the community name to start with a letter.\r\n\r\n    useEffect(() => {\r\n        //First, check to see if the user is logged into GeoCities. Redirect them to login page if not. \r\n        if(props.mainUser === null) {\r\n            swal(\r\n                'Uh Oh!',\r\n                'You must be logged in to build a community!',\r\n                'error',\r\n            );\r\n            history.push('/');\r\n        }\r\n        else {\r\n            props.dispatch({type: 'ThemeChange', payload: props.mainUser.profileTheme}); //Update profile theme.\r\n        }\r\n\r\n        //Now add some form validation rules. \r\n        //Rule that the name (or title) not be empty. \r\n        ValidatorForm.addValidationRule('nameRequired', v => {\r\n            if(v === '') {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //Validation rule that the length of a name for a community be between 6 and 30 characters\r\n        ValidatorForm.addValidationRule('nameLength', v => {\r\n            if(v.length < 6) {\r\n                return false;\r\n            }\r\n            else if(v.length > 50) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //Validation rule that the title of a community be between 10 and 75 characters \r\n        ValidatorForm.addValidationRule('titleLength', v => {\r\n            if(v.length < 10) {\r\n                return false;\r\n            }\r\n            else if(v.length > 75) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //The rule below ensures that the name is valid and follows regex rules.\r\n        ValidatorForm.addValidationRule('nameRe', v => {\r\n            if(!regularExpressions.nameExpression.test(v)) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //The rule below ensures the name starts with an alpha character \r\n        ValidatorForm.addValidationRule('alphaStart', v => {\r\n            if(!regularExpressions.alphaStartRe.test(v)) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n\r\n        //The rule below ensures that the community description is at least 10 characters and at most 300. \r\n        ValidatorForm.addValidationRule('descriptionLength', v => {\r\n            if(v.length < 10) {\r\n                return false;\r\n            }\r\n            else if(v.length > 300) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    if(props.mainUser !== null) {\r\n        //Return this layout if the user is signed in. \r\n        return (\r\n            <Grid \r\n                container \r\n                className={classes.root}\r\n            >\r\n                <Card \r\n                    className={classes.card} \r\n                >\r\n                    <CardContent>\r\n                        <Typography \r\n                            variant='h6' \r\n                            component='h6' \r\n                            align='center' \r\n                        >\r\n                            Build a GeoCities community!\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n    else {\r\n        //If the mainUser is null, simply return a circular progress until we load the user, or redirect to the log in page. \r\n        <Backdrop \r\n            open={true} \r\n        >\r\n            <CircularProgress \r\n                color='primary' \r\n            />\r\n        </Backdrop>\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        mainUser: state.userReducer.user,\r\n        primary: state.userThemeReducer.primary,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(BuildCommunity);"]},"metadata":{},"sourceType":"module"}